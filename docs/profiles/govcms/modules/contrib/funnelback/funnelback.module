<?php

/**
 * @file
 * Provides Funnelback search integration.
 */

define('FUNNELBACK_DEFAULT_NUM_PAGES', 10);
define('FUNNELBACK_COLLECTION', variable_get('funnelback_collection', 'example-collection'));
define('FUNNELBACK_PROFILE', variable_get('funnelback_profile', NULL));
define('FUNNELBACK_AUTO_NUMBER', variable_get('funnelback_autocomplete_number', 10));
define('FUNNELBACK_BASE_URL', variable_get('funnelback_base_url', 'https://example.funnelback.com/search/'));

/**
 * Implements hook_menu().
 */
function funnelback_menu() {
  $items = [];
  $items['funnelback/search'] = [
    'title' => 'Search',
    'description' => 'Search using Funnelback',
    'page callback' => 'funnelback_search_view',
    'access arguments' => ['use funnelback search'],
  ];
  $items['funnelback/search/autocompletion'] = [
    'title' => 'Funnelback autocompletion',
    'description' => 'Funnelback autocompletion list',
    'page callback' => 'funnelback_autocompletion_view',
    'access arguments' => ['use funnelback search'],
  ];
  $items['admin/config/search/funnelback'] = [
    'title' => 'Funnelback search',
    'description' => 'Configure funnelback settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['funnelback_admin_form'],
    'access arguments' => ['administer funnelback'],
    'file' => 'includes/funnelback.admin.inc',
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function funnelback_permission() {
  return [
    'use funnelback search' => [
      'title'       => t('Use Funnelback search'),
      'description' => t('Use the Funnelback search block to make searches and display matching results'),
    ],
    'administer funnelback' => [
      'title'       => t('Administer Funnelback search settings'),
      'description' => t('Allows access to change the Funnelback API connection parameters'),
    ],
  ];
}

/**
 * Implements hook_requirements().
 */
function funnelback_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $funnelback = new Funnelback(FUNNELBACK_COLLECTION, FUNNELBACK_PROFILE, FUNNELBACK_AUTO_NUMBER, FUNNELBACK_BASE_URL);
    $funnelbackRequest = new FunnelbackClient();

    // Test connection.
    $results = $funnelback->funnelbackDoQuery('!padrneull', 0, NULL, NULL, NULL, $funnelbackRequest);
    if ($results) {
      $requirements['funnelback'] = [
        'title' => t('Funnelback connection'),
        'value' => t('Connected to Funnelback.'),
        'severity' => REQUIREMENT_OK,
      ];
    }
    else {
      $requirements['funnelback'] = [
        'title' => t('Funnelback connection'),
        'value' => t('Failed to connect to Funnelback, please check <a href="@config">Funnelback configuration.</a>', [
          '@config' => '/admin/config/search/funnelback',
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

  }

  return $requirements;
}

/**
 * Implements hook_theme().
 */
function funnelback_theme() {
  return [
    'funnelback_results' => [
      'variables' => [
        'items' => [],
        'query' => NULL,
        'total' => NULL,
        'pager' => NULL,
        'curator' => NULL,
        'summary' => NULL,
        'breadcrumb' => NULL,
        'spell' => NULL,
        'no_result_text' => NULL,
      ],
      'template' => 'funnelback-results',
      'path' => drupal_get_path('module', 'funnelback') . '/templates',
    ],
    'funnelback_result' => [
      'variables' => [
        'display_url' => NULL,
        'live_url' => NULL,
        'title' => NULL,
        'date' => NULL,
        'summary' => NULL,
        'metadata' => [],
      ],
      'template' => 'funnelback-result',
      'path' => drupal_get_path('module', 'funnelback') . '/templates',
    ],
    'funnelback_contextual_nav_block' => [
      'variables' => [
        'summary' => NULL,
        'contextual_nav' => NULL
      ],
      'template' => 'funnelback-contextual-nav-block',
      'path' => drupal_get_path('module', 'funnelback') . '/templates',
    ],
    'funnelback_facets_block' => [
      'variables' => [
        'facets' => NULL,
        'query' => NULL,
      ],
      'template' => 'funnelback-facets-block',
      'path' => drupal_get_path('module', 'funnelback') . '/templates',
    ],
    'funnelback_summary' => [
      'variables' => [
        'summary' => NULL,
      ],
      'template' => 'funnelback-summary',
      'path' => drupal_get_path('module', 'funnelback') . '/templates',
    ],
    'funnelback_spell' => [
      'variables' => [
        'spell' => NULL,
      ],
      'template' => 'funnelback-spell',
      'path' => drupal_get_path('module', 'funnelback') . '/templates',
    ],
    'funnelback_breadcrumb' => [
      'variables' => [
        'facets' => NULL,
        'facet_extras' => NULL,
        'selected' => FALSE,
      ],
      'template' => 'funnelback-breadcrumb',
      'path' => drupal_get_path('module', 'funnelback') . '/templates',
    ],
    'funnelback_curator' => [
      'variables' => [
        'curator' => NULL,
      ],
      'template' => 'funnelback-curator',
      'path' => drupal_get_path('module', 'funnelback') . '/templates',
    ],
    'funnelback_pager' => [
      'variables' => [
        'summary' => NULL
      ],
      'template' => 'funnelback-pager',
      'path' => drupal_get_path('module', 'funnelback') . '/templates',
    ],
  ];
}

/**
 * Page callback for funnelback search.
 */
function funnelback_search_view() {

  // Create an array of query params.
  $request_params = drupal_get_query_parameters();

  $funnelback = new Funnelback(FUNNELBACK_COLLECTION, FUNNELBACK_PROFILE, FUNNELBACK_AUTO_NUMBER, FUNNELBACK_BASE_URL);
  $funnelbackRequest = new FunnelbackClient();

  if (!isset($request_params['query'])) {
    $query = NULL;
  }
  else {
    $query = filter_xss($request_params['query']);
  }
  $start = (!empty($request_params['start_rank'])) ? filter_xss($request_params['start_rank']) : 0;

  $raw_queries = explode('&', $_SERVER['QUERY_STRING']);

  // Filter the facet params out.
  $facet_query = FunnelbackQueryString::funnelbackFilterFacetQueryString($raw_queries);

  // Filter the contextual params out.
  $contextual_query = FunnelbackQueryString::funnelbackFilterContextualQueryString($raw_queries);

  $results = $funnelback->funnelbackDoQuery($query, $start, NULL, $facet_query, $contextual_query, $funnelbackRequest, variable_get('funnelback_custom_template'));

  $output = [];

  // Check custom template usage.
  if (!empty($results) && Funnelback::funnelbackResultValidator($results)) {
    // Composer array of rendered results.
    $items = [];
    foreach ($results['results'] as $result) {
      // Use funnelback summary by default.
      $render_item = [
        '#theme' => 'funnelback_result',
        '#display_url' => $result['display_url'],
        '#live_url' => $result['live_url'],
        '#title' => $result['title'],
        '#date' => $result['date'],
        '#summary' => $result['summary'],
        // Pass any custom metadata to theme for further customisation.
        '#metadata' => $result['metaData'],
      ];
      $items[] = $render_item;

      // Use view mode if local node.
      if ($result['metaData']['nodeId'] && variable_get('funnelback_enable_display_mode')) {
        // Check if the node is local.
        $live_url = $result['live_url'];
        global $base_url;
        if (parse_url($base_url, PHP_URL_HOST) == parse_url('http://' . $live_url, PHP_URL_HOST)) {
          // Node Id and view mode are available. Use view mode to render node.
          $view_mode = variable_get('funnelback_display_mode');
          $node = node_load($result['metaData']['nodeId']);
          // Check node still exist. Do not display result if node exist in
          // Funnelback index but removed in local database.
          if ($node) {
            $node_render_array = entity_view('node', [$node], $view_mode);
            $items[] = $node_render_array;
          }
        }
      }
    }

    $summary = [
      '#theme' => 'funnelback_summary',
      '#summary' => $results['summary'],
    ];

    // Detect if there is any filter selected.
    $selected = FALSE;
    foreach ($results['facets'] as $facet) {
      if ($facet['selected'] == TRUE) {
        $selected = TRUE;
      }
    }
    Funnelback::funnelbackFilterFacetDisplay($results['facets']);
    $breadcrumb = [
      '#theme' => 'funnelback_breadcrumb',
      '#facets' => $results['facets'],
      '#facet_extras' => $results['facetExtras'],
      '#selected' => $selected,
    ];
    $spell = [
      '#theme' => 'funnelback_spell',
      '#spell' => $results['spell'],
    ];
    $curator = [
      '#theme' => 'funnelback_curator',
      '#curator' => $results['curator'],
    ];
    $pager = [
      '#theme' => 'funnelback_pager',
      '#summary' => $results['summary']
    ];

    // Sanitise no-result-text with query token.
    $no_result_text = variable_get('funnelback_no_result_text', NULL);
    $no_result_text = filter_xss_admin(str_replace('[funnelback-query]', $query, $no_result_text));

    $output = [
      '#theme' => 'funnelback_results',
      '#items' => $items,
      '#total' => $results['summary']['total'],
      '#query' => $results['summary']['query'],
      '#curator' => $curator,
      '#pager' => $pager,
      '#summary' => $summary,
      '#breadcrumb' => $breadcrumb,
      '#spell' => $spell,
      '#no_result_text' => $no_result_text,
      '#attached' => [
        'css' => [
          [
            'data' => drupal_get_path('module', 'funnelback') . '/css/funnelback.css',
            'type' => 'file',
          ]
        ]
      ]
    ];
  }
  else {
    drupal_set_message(t('There was an error connecting to funnelback, please enable debug and check the log.'), 'warning');
  }

  return $output;
}

/**
 * Page callback for autocompletion request.
 */
function funnelback_autocompletion_view($partial_query) {

  $funnelback = new Funnelback(FUNNELBACK_COLLECTION, FUNNELBACK_PROFILE, FUNNELBACK_AUTO_NUMBER, FUNNELBACK_BASE_URL);
  $funnelbackRequest = new FunnelbackClient();

  $results = $funnelback->funnelbackDoQuery(NULL, NULL, $partial_query, NULL, NULL, $funnelbackRequest);

  // Add key to suggest array.
  $suggests = [];
  foreach ($results as $result) {
    $suggests[$result['key']] = $result['key'];
  }

  drupal_json_output($suggests);
}

/**
 * Implement HOOK_preprocess_node().
 */
function funnelback_preprocess_node(&$vars) {
  if (variable_get('funnelback_enable_display_mode') == TRUE) {
    // Add node ID and content type to metadata for funnelback to index.
    $nid_element = [
      '#tag' => 'meta',
      '#attributes' => [
        'property' => 'nodeId',
        'content' => $vars['nid'],
      ],
    ];
    drupal_add_html_head($nid_element, 'nodeId');
  }
}

/**
 * Preprocess function for the funnelback_results pager.
 */
function funnelback_preprocess_funnelback_pager(&$vars) {
  $summary      = $vars['summary'];
  $page_size    = intval($summary['page_size']);
  $start        = intval($summary['start']);
  $i            = 0;
  $pager_end    = FUNNELBACK_DEFAULT_NUM_PAGES;
  // If we get bigger than 10 pages, offset the pager numbers.
  if ($start > $page_size * FUNNELBACK_DEFAULT_NUM_PAGES) {
    // Round to the nearest 10.
    $pager_offset = floor($start / FUNNELBACK_DEFAULT_NUM_PAGES / FUNNELBACK_DEFAULT_NUM_PAGES) * FUNNELBACK_DEFAULT_NUM_PAGES;
    $i            = $pager_offset;
    $pager_end    = $i + FUNNELBACK_DEFAULT_NUM_PAGES;
  }
  $pager = [];
  $pages = [];

  // Get the current query strings.
  $query_strings = explode('&', $_SERVER['QUERY_STRING']);

  while ($i < $pager_end && $i * $page_size < $summary['total']) {
    // Create the pager title and link.
    $page = [];
    $page['title'] = strval($i + 1);
    $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
    $query_strings[] = 'start_rank=' . strval($i * $page_size + 1);
    $page['link'] = '?' . implode('&', $query_strings);
    $page['link'] = FunnelbackQueryString::funnelbackQueryNormaliser($page['link']);

    // Flag the current page.
    $current = FALSE;
    if ($start == ($i * $page_size + 1)) {
      $current = TRUE;
    }
    $page['current'] = $current;

    // Create the previous/next links.
    if ($current) {
      $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
      $query_strings[] = 'start_rank=' . strval(($i - 1) * $page_size + 1);
      $pager['prev_link'] = '?' . implode('&', $query_strings);
      $pager['prev_link'] = FunnelbackQueryString::funnelbackQueryNormaliser($pager['prev_link']);

      $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
      $query_strings[] = 'start_rank=' . strval(($i + 1) * $page_size + 1);
      $pager['next_link'] = '?' . implode('&', $query_strings);
      $pager['next_link'] = FunnelbackQueryString::funnelbackQueryNormaliser($pager['next_link']);
    }

    $pages[] = $page;

    $i++;
  }

  $pager['pages'] = $pages;

  // Flag if we're on the first page.
  $pager['first'] = (intval($summary['start']) == 1);

  // Flag if we are not in the first page.
  if (intval($summary['start']) > $page_size) {
    $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
    $query_strings[] = 'start_rank=1';
    $pager['first_link'] = '?' . implode('&', $query_strings);
    $pager['first_link'] = FunnelbackQueryString::funnelbackQueryNormaliser($pager['first_link']);
  }

  // Flag if we are on the last page.
  $pager['last'] = (intval($summary['total']) <= (intval($summary['start']) * $page_size));

  // Flag if we are not on the last page.
  if (!$pager['last']) {
    $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
    $query_strings[] = 'start_rank=' . (floor($summary['total'] / $page_size) * $page_size + 1);
    $pager['last_link'] = '?' . implode('&', $query_strings);
    $pager['last_link'] = FunnelbackQueryString::funnelbackQueryNormaliser($pager['last_link']);
  }

  $vars['pager'] = $pager;
}


/**
 * Implements hook_block_info().
 */
function funnelback_block_info() {

  // Search block.
  $blocks['search_form'] = [
    'info' => t('Funnelback search block'),
    'cache' => DRUPAL_NO_CACHE,
    'properties' => [
      'administrative' => TRUE,
    ],
  ];

  // Provide 'have you tried?' block.
  $blocks['contextual'] = [
    'info' => t('Funnelback Contextual Nav'),
    'cache' => DRUPAL_NO_CACHE,
  ];

  // Provide facet block.
  $blocks['funnelback_facet'] = [
    'info' => t('Funnelback facet block'),
    'cache' => DRUPAL_NO_CACHE,
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function funnelback_block_view($delta = '') {

  $block = [];
  switch ($delta) {
    case 'search_form':
      if (user_access('use funnelback search')) {
        $block['subject'] = t('');
        $block['content'] = drupal_get_form('funnelback_search_block_form');
      }
      break;

    case 'contextual':
      if (user_access('use funnelback search')) {
        $block['subject'] = t('');
        $block['content'] = funnelback_contextual_nav_view();
      }
      break;

    case 'funnelback_facet':
      if (user_access('use funnelback search')) {
        $block['subject'] = t('');
        $block['content'] = funnelback_facet_view();
      }
      break;
  }

  return $block;
}

/**
 * Search block form.
 */
function funnelback_search_block_form($form, &$form_state) {

  // Find out current search query.
  $query_string = drupal_get_query_parameters();
  if (isset($query_string['query'])) {
    $query = check_plain(filter_xss($query_string['query']));
    $query = str_replace("`", '', $query);
  }
  else {
    $query = '';
  }

  $form['funnelback_search_field'] = [
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#size' => 15,
    '#default_value' => $query,
    '#attributes' => ['title' => t('Enter the terms you wish to search for.')],
  ];

  // Add auto-completion.
  $auto_completion = variable_get('funnelback_enable_autocomplete', FALSE);
  if ($auto_completion) {
    $form['funnelback_search_field']['#autocomplete_path'] = 'funnelback/search/autocompletion';
  }

  $form['funnelback_search_submit'] = [
    '#type' => 'submit',
    '#value' => t('Search'),
  ];

  return $form;
}

/**
 * Submit callback for search block form.
 */
function funnelback_search_block_form_submit($form, &$form_state) {

  $query = check_plain(filter_xss($form_state['values']['funnelback_search_field']));

  // Fixes issues where drupal_goto may not work.
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  // Redirect to the search page.
  drupal_goto('funnelback/search', [
    'query' => ['query' => $query],
  ]);
}

/**
 * Block callback for contextual navigation.
 */
function funnelback_contextual_nav_view() {

  $results = Funnelback::funnelbackStaticResultsCache();
  $output = [];
  if (Funnelback::funnelbackResultValidator($results)) {
    $contextual_nav = $results['contextual_nav'];
    $summary = $results['summary'];
    $output = [
      '#theme' => 'funnelback_contextual_nav_block',
      '#summary' => $summary,
      '#contextual_nav' => $contextual_nav,
      "#attached" => [
        'css' => [
          [
            'data' => drupal_get_path(
                'module',
                'funnelback'
              ).'/css/funnelback.contextual.css',
            'type' => 'file',
          ],
        ],
      ],
    ];
  }

  return $output;
}

/**
 * Block callback for facet block.
 */
function funnelback_facet_view() {

  $results = Funnelback::funnelbackStaticResultsCache();
  $output = [];
  if (Funnelback::funnelbackResultValidator($results)) {
    $facets = $results['facets'];
    $query = $results['summary']['query'];

    // Only support single drill down, checkbox and radio button at the moment.
    Funnelback::funnelbackFilterFacetDisplay($facets);

    $output = [
      '#theme' => 'funnelback_facets_block',
      '#facets' => $facets,
      '#query' => $query,
      "#attached" => [
        'css' => [
          [
            'data' => drupal_get_path('module', 'funnelback') . '/css/funnelback.facet.css',
            'type' => 'file',
          ],
        ],
        'js' => [
          [
            'data' => drupal_get_path('module', 'funnelback') . '/js/funnelback.facet.js',
            'type' => 'file',
          ]
        ],
      ]
    ];
  }

  return $output;
}
