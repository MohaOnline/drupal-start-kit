<?php

include_once 'dvg_payment_webform.dvg.user_permission.inc';

/**
 * Implements hook_menu().
 */
function dvg_payment_webform_menu() {
  $items['admin/config/services/payment/dvg-payment-webform'] = array(
    'title' => 'DVG Payment webform',
    'description' => 'Manage DVG Payment webform settings.',
    'access arguments' => array('payment.global.administer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dvg_payment_webform.admin.inc',
    'file path' => drupal_get_path('module', 'dvg_payment_webform') . '/includes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dvg_payment_webform_config'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function dvg_payment_webform_permission() {
  return array(
    'edit webform payment settings' => array(
      'title' => t('Edit webform payment settings'),
      'description' => '',
    ),
  );
}

/**
 * Implements hook_webform_node_defaults_alter().
 */
function dvg_payment_webform_webform_node_defaults_alter(&$defaults) {
  $defaults['dvg_payment_enabled'] = 0;
  $defaults['dvg_payment_amount'] = NULL;
  $defaults['dvg_payment_button_label'] = NULL;
  $defaults['dvg_payment_description'] = NULL;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_payment_webform_form_webform_configure_form_alter(&$form, &$form_state) {
  $node = &$form['#node'];

  $form['dvg_payment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment'),
    '#collapsible' => TRUE,
    '#collapsed' => !$node->webform['dvg_payment_enabled'],
  );
  $form['dvg_payment']['dvg_payment_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable payment'),
    '#description' => t('Add a step for paying the form before submitting.'),
    '#default_value' => $node->webform['dvg_payment_enabled'],
    '#id' => 'dvg-payment-enabled',
  );
  $form['dvg_payment']['settings'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(
        '#dvg-payment-enabled' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );
  $form['dvg_payment']['settings']['dvg_payment_amount'] = array(
    '#type' => 'payment_amount',
    '#title' => t('Amount'),
    '#currency_code' => 'EUR',
    '#minimum_amount' => 1,
    '#theme_wrappers' => array('form_element'),
    '#default_value' => $node->webform['dvg_payment_amount'],
    '#element_validate' => array('dvg_payment_webform_form_process_amount_validate', 'payment_form_process_amount_validate'),
  );

  $payment_method_options = payment_method_options();

  $dvg_default_method = variable_get('dvg_payment_webform_method');
  if (isset($payment_method_options[$dvg_default_method])) {
    $default_method = $payment_method_options[$dvg_default_method];
    // Prepend the default option while preserving keys.
    $payment_method_options = array(0 => t('Default (!default_method)', array('!default_method' => $default_method))) + $payment_method_options;
  }

  $form['dvg_payment']['settings']['dvg_payment_method'] = array(
    '#type' => 'select',
    '#options' => $payment_method_options,
    '#title' => t('Payment method for this form'),
    '#default_value' => $node->webform['dvg_payment_method'],
  );

  $form['dvg_payment']['settings']['dvg_payment_button_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment button label'),
    '#description' => t('The text for the button that will proceed to the next page. If left blank, the default label Pay will be used.'),
    '#default_value' => $node->webform['dvg_payment_button_label'],
  );
  $form['dvg_payment']['settings']['dvg_payment_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment description'),
    '#maxlength' => 40,
    '#description' => t('The text description of the payment.'),
    '#default_value' => $node->webform['dvg_payment_description'],
  );

  array_unshift($form['#submit'], 'dvg_payment_webform_webform_configure_form_submit');
}

/**
 * Implements hook_requirements().
 */
function dvg_payment_webform_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {
    $method = _dvg_payment_webform_get_payment_method();
    if ($method) {
      $requirements['dvg_payment_webform'] = array(
        'title' => 'DVG Payment webform',
        'severity' => REQUIREMENT_OK,
        'value' => $method->title_specific,
      );
    }
    else {
      $link = l(t('DVG Payment configuration'), 'admin/config/services/payment/dvg-payment-webform');
      $requirements['dvg_payment_webform'] = array(
        'title' => 'DVG Payment webform',
        'description' => $t('Select a default payment method in the !link', array('!link' => $link)),
        'severity' => REQUIREMENT_ERROR,
        'value' => '',
      );
    }
  }

  return $requirements;
}

/**
 * Element validate handler for webform_configure_form().
 */
function dvg_payment_webform_form_process_amount_validate(array &$element, array &$form_state) {
  if (class_exists('BartFeenstra\Currency\Input')) {
    try {
      $element['#value'] = BartFeenstra\Currency\Input::parseAmount($element['#value']);
      form_set_value($element, $element['#value'], $form_state);
    }
    // Ignore these exceptions.
    catch (BartFeenstra\Currency\AmountNotNumericException $e) {
    }
    catch (BartFeenstra\Currency\AmountInvalidDecimalSeparatorException $e) {
    }
  }
}

/**
 * Submit handler for webform_configure_form().
 */
function dvg_payment_webform_webform_configure_form_submit(&$form, &$form_state) {
  $node = &$form['#node'];

  $node->webform['dvg_payment_enabled'] = (int) $form_state['values']['dvg_payment_enabled'];
  if ($node->webform['dvg_payment_enabled']) {
    $node->webform['dvg_payment_amount'] = (float) $form_state['values']['dvg_payment_amount'];
    $node->webform['dvg_payment_method'] = (int) $form_state['values']['dvg_payment_method'];
    $node->webform['dvg_payment_button_label'] = $form_state['values']['dvg_payment_button_label'];
    $node->webform['dvg_payment_description'] = $form_state['values']['dvg_payment_description'];
  }
  else {
    $node->webform['dvg_payment_amount'] =
      $node->webform['dvg_payment_button_label'] =
      $node->webform['dvg_payment_description'] = NULL;
    $node->webform['dvg_payment_method'] = 0;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_payment_webform_form_dvg_global_texts_alter(&$form, &$form_state) {
  $form['dvg_payment_webform'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment Webform'),
  );
  $value = variable_get('dvg_payment_webform_payment_suffix', array('value' => '', 'format' => 'filtered_html'));
  $form['dvg_payment_webform']['dvg_payment_webform_payment_suffix'] = array(
    '#type' => 'text_format',
    '#title' => t('Payment message suffix'),
    '#default_value' => $value['value'],
    '#format' => $value['format'],
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_payment_webform_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  // Check if payments are enabled for this form.
  if (!isset($node->webform['dvg_payment_enabled']) || !$node->webform['dvg_payment_enabled']) {
    return;
  }

  // Wrap our submit-handler around the webform_client_form_pages.
  $handler_set = FALSE;
  foreach ($form['#submit'] as $index => $submit_handler) {
    if ($submit_handler == 'webform_client_form_pages') {
      $form['#submit'][$index] = 'dvg_payment_webform_webform_client_form_pages';
      $handler_set = TRUE;
    }
  }
  if (!$handler_set) {
    array_unshift($form['#submit'], 'dvg_payment_webform_webform_client_form_pages');
  }

  $page_count = $form_state['webform']['page_count'];
  $page_num = $form_state['webform']['page_num'];

  // Fix submit text when preview is enabled.
  if ($node->webform['preview'] && $page_num === ($page_count - 1)) {
    $node->webform['submit_text'] = _dvg_payment_webform_payment_button_label($node);
  }

  // Take over the default submit button.
  if ($page_num === $page_count) {
    if ($suffix = variable_get('dvg_payment_webform_payment_suffix', '')) {
      $suffix = check_markup($suffix['value'], $suffix['format']);
    }

    $payment_amount = $node->webform['dvg_payment_amount'];
    drupal_alter('dvg_payment_webform_amount', $payment_amount, $form, $form_state);

    $form['dvg_payment_summary'] = array(
      '#prefix' => '<h2>' . t('Payment') . '</h2>',
      '#markup' => '<p>' . t('@title costs @amount', array(
          '@title' => $node->title,
          '@amount' => payment_amount_human_readable($payment_amount, 'EUR'),
        )) . '</p>',
      '#suffix' => $suffix,
      '#weight' => $form['actions']['#weight'] - 1,
    );

    $form['actions']['pay'] = $form['actions']['submit'];
    $form['actions']['pay']['#value'] = _dvg_payment_webform_payment_button_label($node);
    unset($form['actions']['submit']);
  }
}

/**
 * Helper function that grabs the payment button label.
 */
function _dvg_payment_webform_payment_button_label($node) {
  return empty($node->webform['dvg_payment_button_label']) ? t('Pay') : $node->webform['dvg_payment_button_label'];
}

/**
 * Helper function to format data for a watchdog message.
 */
function _dvg_payment_webform_watchdog_data($data) {
  return implode('<br />', array_map(
    function($v, $k) { return $k . ' = ' . $v; }, $data, array_keys($data)
  ));
}

/**
 * Webform submit handler that wraps around webform_client_form_pages().
 */
function dvg_payment_webform_webform_client_form_pages(&$form, &$form_state) {
  global $user;
  $node = &$form['#node'];

  webform_client_form_pages($form, $form_state);

  $page_count = $form_state['webform']['page_count'];
  $page_num = $form_state['webform']['page_num'];

  if ($page_num === $page_count && $form_state['values']['op'] == _dvg_payment_webform_payment_button_label($node)) {
    // Force save as draft, to save progress so far.
    $form['#is_draft'] = TRUE;
    $form_state['save_draft'] = TRUE;
    webform_client_form_submit($form, $form_state);

    $submission_sid = $form_state['values']['details']['sid'];
    $payment_description = empty($node->webform['dvg_payment_description']) ? t('Payment') : $node->webform['dvg_payment_description'];

    $payment_method_id = FALSE;
    if (!empty($node->webform['dvg_payment_method'])) {
      $payment_method_id = $node->webform['dvg_payment_method'];
    }
    $payment_method = _dvg_payment_webform_get_payment_method($payment_method_id);

    $submission = webform_get_submission($node->nid, $submission_sid);
    // Encrypt submission values if possible.
    if (module_exists('webform_encrypt')) {
      webform_encrypt_webform_submission_presave($node, $submission);
      unset($submission->wfm_data);
    }

    // Make payment object.
    $payment = new Payment(array(
      'uid' => $user->uid,
      'currency_code' => 'EUR',
      'description' => $payment_description,
      'finish_callback' => 'dvg_payment_webform_finish_payment',
      'method' => $payment_method,
      'context' => 'payment_webform_' . $submission_sid,
      'context_data' => array(
        'submission_sid' => $submission_sid,
        'node_id' => $node->nid,
        'user_id' => $user->uid,
        'encrypted_submission' => $submission,
        'creation_date' => REQUEST_TIME,
      ),
    ));
    // Store form info in session, since this doesn't belong in the database.
    $_SESSION['dvg_payment'] = array(
      'form' => $form,
      'form_state' => $form_state,
    );

    $payment_amount = $node->webform['dvg_payment_amount'];
    drupal_alter('dvg_payment_webform_amount', $payment_amount, $form, $form_state);

    // Add line item to the payment.
    _dvg_payment_webform_payment_add_line_items($payment, $payment_description, $payment_amount);

    // Force save, because we need a pid.
    entity_save('payment', $payment);

    $_SESSION['dvg_payment']['payment_pid'] = $payment->pid;
    dvg_payment_webform_insert($payment->pid, $submission_sid);

    watchdog('dvg_payment_webform', 'Sending user to payment: !data', array('!data' => _dvg_payment_webform_watchdog_data(array(
      'uid' => $user->uid,
      'node_nid' => $node->nid,
      'payment_pid' => $payment->pid,
      'submission_sid' => $submission_sid,
      'amount' => payment_amount_human_readable($payment_amount, $payment->currency_code),
    ))), WATCHDOG_DEBUG);


    // Send to ogone!
    $payment->execute();

    // Profit?
  }
}

/**
 * Helper function that grabs the configured payment method.
 */
function _dvg_payment_webform_get_payment_method($method_id = FALSE) {
  if ($method_id) {
    $selected_method_id = $method_id;
  }
  else {
    $selected_method_id = variable_get('dvg_payment_webform_method');
  }

  if ($selected_method_id) {
    $method = entity_load('payment_method', array($selected_method_id));
    if (isset($method[$selected_method_id])) {
      return $method[$selected_method_id];
    }
  }
}

/**
 * Helper function that adds line items to payment object.
 */
function _dvg_payment_webform_payment_add_line_items($payment, $description, $amount) {
  // Delete all existing payment line items.
  if (!empty($payment->line_items)) {
    db_delete('payment_line_item')
      ->condition('pid', $payment->pid)
      ->condition('name', array_keys($payment->line_items), 'IN')
      ->execute();
    $payment->line_items = array();
  }

  // Add the registration price to the payment.
  $payment->setLineItem(new PaymentLineItem(array(
    'name' => 'payment',
    'amount' => $amount,
    'description' => $description,
    'quantity' => 1,
    'tax_rate' => 0,
  )));
}

/**
 * Implements hook_ogone_redirect_data().
 */
function dvg_payment_webform_ogone_redirect_data_alter(&$data, &$payment) {
  // Empty the backurl to hide the back-button in Ogone.
  $data['BACKURL'] = FALSE;

  // Add the node title as payment description.
  if (!empty($payment->context_data['node_id'])) {
    $node = node_load($payment->context_data['node_id']);
    $data['COM'] = $node->title;
  }
}

/**
 * Payment finish callback.
 *
 * This is called when the user returns to the site
 * after payment.
 */
function dvg_payment_webform_finish_payment($payment = NULL) {
  if (!empty($payment) && !empty($payment->context_data['submission_sid'])) {
    $submission_sid = $payment->context_data['submission_sid'];
    $account = user_load($payment->context_data['user_id']);
    $node = node_load($payment->context_data['node_id']);

    if (isset($_SESSION['dvg_payment'])) {
      // Payment is finished by the user.
      $form = $_SESSION['dvg_payment']['form'];
      $form_state = $_SESSION['dvg_payment']['form_state'];
    }
    else {
      // Payment is finished by an Ogone callback, lacking any session data.
      // Compile some fake $form and $form_state data to do just the bare essentials.
      $form = array(
        '#node' => $node,
      );
      $form_state = array();
      $form_state['values']['details']['sid'] = $submission_sid;
      $form_state['webform']['page_num'] = 0;
      $form_state['values']['submitted'] = array();
      $form_state['values']['details']['finished'] = FALSE;
    }

    $payment_amount = $node->webform['dvg_payment_amount'];
    drupal_alter('dvg_payment_webform_amount', $payment_amount, $form, $form_state);

    watchdog('dvg_payment_webform', 'Came back from payment: !data', array(
      '!data' => _dvg_payment_webform_watchdog_data(array(
        'uid' => $account->uid,
        'node_nid' => $node->nid,
        'payment_pid' => $payment->pid,
        'submission_sid' => $submission_sid,
        'amount' => payment_amount_human_readable($payment_amount, $payment->currency_code),
      )),
    ), WATCHDOG_DEBUG);

    $success = payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_SUCCESS);
    $pending = payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_PENDING);
    if ($success || $pending) {
      $status = ($success) ? t('success') : t('pending');
      watchdog('dvg_payment_webform', 'Payment @status: !data', array(
        '!data' => _dvg_payment_webform_watchdog_data(array(
          'uid' => $account ? $account->uid : 0,
          'node_nid' => $node->nid,
          'payment_pid' => $payment->pid,
          'submission_sid' => $submission_sid,
          'amount' => payment_amount_human_readable($payment_amount, $payment->currency_code),
          'status' => $status,
        )),
        '@status' => $status,
      ), ($success) ? WATCHDOG_INFO : WATCHDOG_WARNING);

      // Only save the webform status if it's not a draft anymore.
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $submission = webform_get_submission($node->nid, $submission_sid);
      if ($submission->is_draft) {
        $form_state['webform_completed'] = TRUE;
        $form_state['save_draft'] = FALSE;
        $form_state['rebuild'] = FALSE;

        // Call all webform submit handlers besides our own.
        foreach($form['#submit'] as $submit_function) {
          if ($submit_function !== 'dvg_payment_webform_webform_client_form_pages') {
            $submit_function($form, $form_state);
          }
        }

        // Decrypt the submissions after possible encryption in the function above.
        if (module_exists('webform_encrypt')) {
          webform_encrypt_webform_submission_load(array($submission));
        }
      }

      // Let other modules do their thing.
      module_invoke_all('dvg_payment_completed', $success ? PAYMENT_STATUS_SUCCESS : PAYMENT_STATUS_PENDING, $node, $submission);

      if (isset($_SESSION['dvg_payment'])) {
        drupal_set_message(t('Payment successful.'), 'status');

        // We have payment, remove session-traces and redirect.
        unset($_SESSION['dvg_payment']);

        $form_state['rebuild'] = FALSE;
        $form_state['redirect'] = _dvg_payment_webform_webform_redirect_url($node, $submission);

        drupal_redirect_form($form_state);
      }
      return;
    }

    if (isset($_SESSION['dvg_payment'])) {
      drupal_goto('node/' . $node->nid);
    }
  }

  if (isset($_SESSION['dvg_payment'])) {
    drupal_access_denied();
  }
}

/**
 * Helper function that creates a redirect-array (or NULL).
 *
 * @see webform_client_form_submit()
 */
function _dvg_payment_webform_webform_redirect_url($node, $submission) {
  global $user;

  // Clean up the redirect URL and filter it for webform tokens.
  $redirect_url = trim($node->webform['redirect_url']);
  $redirect_url = webform_replace_tokens($redirect_url, $node, $submission);

  // Remove the domain name from the redirect.
  $redirect_url = preg_replace('/^' . preg_quote($GLOBALS['base_url'], '/') . '\//', '', $redirect_url);

  $redirect = NULL;
  if ($redirect_url == '<none>') {
    $redirect = NULL;
  }
  elseif ($redirect_url == '<confirmation>') {
    $query = array('sid' => $submission->sid);
    if ((int) $user->uid === 0) {
      $query['token'] = md5($submission->submitted . $submission->sid . drupal_get_private_key());
    }
    $redirect = array('node/' . $node->nid . '/done', array('query' => $query));
  }
  elseif (valid_url($redirect_url, TRUE)) {
    $redirect = $redirect_url;
  }
  elseif ($redirect_url && strpos($redirect_url, 'http') !== 0) {
    $redirect = $redirect_url;
  }

  return $redirect;
}

/**
 * Implements hook_node_view_alter().
 */
function dvg_payment_webform_node_view_alter(&$build) {
  global $user;

  if (!empty($build['webform']) && !empty($_SESSION['dvg_payment']['payment_pid'])) {
    $form = $build['webform']['#form'];
    $form_state = $_SESSION['dvg_payment']['form_state'];
    $submission_sid = $form_state['values']['details']['sid'];
    $node = $form['#node'];

    $payment_pid = $_SESSION['dvg_payment']['payment_pid'];
    $payment = entity_object_load($payment_pid, 'payment');

    unset($_SESSION['dvg_payment']);

    $payment_amount = $node->webform['dvg_payment_amount'];
    drupal_alter('dvg_payment_webform_amount', $payment_amount, $form, $form_state);

    watchdog('dvg_payment_webform', 'Payment failed: !data', array(
      '!data' => _dvg_payment_webform_watchdog_data(array(
        'uid' => $user->uid,
        'node_nid' => $node->nid,
        'payment_pid' => $payment->pid,
        'submission_sid' => $submission_sid,
        'amount' => payment_amount_human_readable($payment_amount, $payment->currency_code),
      )),
    ));

    // Payment canceled or error; back to the last page.
    drupal_set_message(t('The payment has failed') . '<p class="inline-info">' . t('Do you want to try again? Click on the %button-label button to restart the payment process.', array(
      '%button-label' => _dvg_payment_webform_payment_button_label($form['#node']),
    )) . '</p>', 'error');
    $form_state['webform']['page_num'] = $form_state['webform']['page_count'];
    $build['webform']['#form'] = drupal_rebuild_form($form['#form_id'], $form_state);
  }
}

/**
 * Implements hook_webform_submission_render_alter().
 */
function dvg_payment_webform_webform_submission_render_alter(&$renderable) {
  // Don't display this link when sending an email or payment is not enabled.
  if (!empty($renderable['#email']) || empty($renderable['#node']->webform['dvg_payment_enabled'])) {
    return;
  }

  if (!$renderable['#submission']->preview) {
    $status = t('No payment found');
    $payment = _dvg_payment_webform_get_payment_by_sid($renderable['#submission']->sid);
    if ($payment) {
      $status = dvg_payment_webform_submission_payment_status($renderable['#submission']->sid);

      if (user_access('payment.payment.view.any')) {
        $status = l($status, 'payment/' . $payment->pid);
      }
    }

    $format = $renderable['#format'];
    $renderable['payment'] = array(
      '#title' => t('Payment'),
      '#format' => $format,
      '#markup' => $status,
      '#value' => $status,
      '#parents' => array('payment'),
      '#weight' => 99,
      '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
      '#webform_component' => array(
        'type' => 'display',
        // Non existing form_key, wfm module expects this one.
        'form_key' => 'payment_markup',
        // Non existing cid, wfm module expects this one.
        'cid' => '10000',
      ),
    );
  }
}

/**
 * Implements hook_webform_results_download_submission_information_info().
 */
function dvg_payment_webform_webform_results_download_submission_information_info() {
  return array(
    'dvg_payment' => t('Payment'),
  );
}

/**
 * Implements hook_webform_results_download_submission_information_data().
 */
function dvg_payment_webform_webform_results_download_submission_information_data($token, $submission, array $options, $serial_start, $row_count) {
  $payment_data = &drupal_static(__FUNCTION__, array());

  switch ($token) {
    case 'dvg_payment':
      if (!isset($payment_data[$submission->sid])) {
        $payment_data[$submission->sid] = FALSE;
        $node = node_load($submission->nid);
        if ($node && !empty($node->webform['dvg_payment_enabled'])) {
          $payment_data[$submission->sid] = dvg_payment_webform_submission_payment_status($submission->sid);
        }
      }
      return $payment_data[$submission->sid];
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function dvg_payment_webform_entity_view_alter(&$build, $type) {
  if ($type == 'payment' && isset($build['#entity'])) {
    $submission = _dvg_payment_webform_get_submission_by_pid($build['#entity']->pid);
    if ($submission) {
      $build['submission'] = array(
        '#title' => t('Webform submission'),
        '#markup' => l(t('Webform submission'), 'node/' . $submission->nid . '/submission/' . $submission->sid),
        '#weight' => 99,
      );
    }
  }
}

/**
 * Helper function to get a payment status label.
 */
function dvg_payment_webform_submission_payment_status($sid) {
  $status = t('No payment found');

  $payment = _dvg_payment_webform_get_payment_by_sid($sid);
  if ($payment) {
    $status = t('Not paid');
    if (payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_SUCCESS)) {
      $status = t('Paid');
    }
    elseif (payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_PENDING)) {
      $status = t('Pending');
    }
  }

  return $status;
}

/**
 * Helper function to load a submission by pid.
 */
function _dvg_payment_webform_get_submission_by_pid($pid) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');

  $sid = db_select('dvg_payment_webform', 'dpw')
    ->fields('dpw', array('sid'))
    ->condition('pid', $pid)
    ->orderBy('sid', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchField();

  $submissions = webform_get_submissions(array('sid' => $sid));
  if (!empty($submissions[$sid])) {
    return $submissions[$sid];
  }
}

/**
 * Helper function to load a payment by sid.
 */
function _dvg_payment_webform_get_payment_by_sid($sid) {
  $pid = db_select('dvg_payment_webform', 'dpw')
    ->fields('dpw', array('pid'))
    ->condition('sid', $sid)
    ->orderBy('pid', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchField();

  if ($pid) {
    return entity_load_single('payment', $pid);
  }
}

/**
 * Stores the payment pid with a submission sid.
 */
function dvg_payment_webform_insert($pid, $sid) {
  $data = array(
    'pid' => $pid,
    'sid' => $sid,
  );

  return drupal_write_record('dvg_payment_webform', $data);
}

/**
 * Deletes a payment by pid.
 */
function dvg_payment_webform_delete_by_pid($pid) {
  db_delete('dvg_payment_webform')
    ->condition('pid', $pid)
    ->execute();
}

/**
 * Deletes a payment by sid.
 */
function dvg_payment_webform_delete_by_sid($sid) {
  db_delete('dvg_payment_webform')
    ->condition('sid', $sid)
    ->execute();
}

/**
 * Implements hook_webform_submission_delete().
 */
function dvg_payment_webform_webform_submission_delete($node, $submission) {
  dvg_payment_webform_delete_by_sid($submission->sid);
}

/**
 * Implements hook_entity_delete().
 */
function dvg_payment_webform_entity_delete($entity, $type) {
  if ($type == 'payment' && !empty($entity->pid)) {
    dvg_payment_webform_delete_by_pid($entity->pid);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_payment_webform_form_ogone_form_redirect_alter(&$form, &$form_state) {
  $form['submit']['#value'] = t('Click here if your browser does not forward you automatically');
  $form['submit']['#attributes'] = array(
    'class' => array('submit-link'),
  );

  unset($form['js']);

  $form['#attached']['js'][] = array(
    'data' => 'document.getElementById(\'ogone-form-redirect\').submit();',
    'type' => 'inline',
    'scope' => 'footer',
  );
}

/**
 * Implements hook_features_override_ignore().
 */
function dvg_payment_webform_features_override_ignore($component) {
  if (in_array($component, array('currency', 'currency_locale_pattern'))) {
    return array(
      'alternativeSigns' => 0,
      'disabled' => 0,
      'exchangeRates' => 0,
      'export_type' => 0,
      'ISO4217Number' => 0,
      'rounding_step' => 0,
      'subunits' => 0,
      'usage' => 0,
    );
  }
}

/**
 * Implements hook_token_info().
 */
function dvg_payment_webform_token_info() {
  $info['tokens']['submission']['payment_status'] = array(
    'name' => t('Payment status'),
    'description' => t('The status of the payment for the webform submission.'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function dvg_payment_webform_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'submission' && !empty($data['webform-submission'])) {
    $submission = $data['webform-submission'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'payment_status':
          $replacements[$original] = dvg_payment_webform_submission_payment_status($submission->sid);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_tokens_alter().
 *
 * Add the payment status to [submission:values]
 * if [submission:payment_status] isn't used.
 */
function dvg_payment_webform_tokens_alter(array &$replacements, array $context) {
  if ($context['type'] == 'submission' && !isset($replacements['[submission:payment_status]']) && !empty($context['data']['node']->webform['dvg_payment_enabled'])) {
    $payment_status = dvg_payment_webform_submission_payment_status($context['data']['webform-submission']->sid);
    if ($payment_status && isset($replacements['[submission:values]'])) {
      $replacements['[submission:values]'] .= t('Payment status') . ': ' . $payment_status;
    }
  }
}

/**
 * Implements hook_fea_form_config_alter().
 */
function dvg_payment_webform_fea_form_config_alter(&$config, $form_id) {
  $roles = user_roles(FALSE, 'edit webform payment settings');
  if ($form_id == 'webform_configure_form') {
    foreach ($config['elements'] as &$element) {
      if ($element['tree'][0] == 'dvg_payment') {
        $element['roles'] = drupal_map_assoc(array_values($roles));
      }
    }
  }
}

/**
 * Implements hook_ogone_feedback().
 *
 * Saves additional fields into payment object, which can be easily accessed.
 */
function dvg_payment_webform_ogone_feedback($data, $payment) {
  if (!empty($data['ORDERID'])) {
    $payment->context_data['order_id'] = $data['ORDERID'];
  }
  if (!empty($data['PAYID'])) {
    $payment->context_data['pay_id'] = $data['PAYID'];
  }
  entity_save('payment', $payment);
}
