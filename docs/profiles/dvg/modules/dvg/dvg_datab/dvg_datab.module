<?php

define('DVG_DATAB_DEMO_BSN', 200600000279400);
define('DVG_DATAB_DEMO_CID', 8888);
define('DVG_DATAB_DEMO_SECRET', 'secret');

require_once 'includes/dvg_datab.context.inc';
include_once 'includes/dvg_datab.block.inc';

/**
 * Implements hook_menu().
 */
function dvg_datab_menu() {
  $items = array();

  $items['admin/config/services/datab'] = array(
    'title' => 'DataB',
    'description' => 'Administer DataB settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dvg_datab_settings'),
    'access arguments' => array('administer datab'),
    'file' => 'dvg_datab.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/docid/%'] = array(
    'page callback' => 'dvg_datab_download_doc',
    'page arguments' => array(1, 3),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function dvg_datab_permission() {
  return array(
    'administer datab' => array(
      'title' => t('Administer DataB settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implementation hook_ctools_plugin_api().
 */
function dvg_datab_ctools_plugin_api($module, $api) {
  if ($module == 'context' && ($api == 'plugins' || $api == 'context')) {
    return array('version' => 3);
  }
}

/**
 * Implements hook_dvg_requirements().
 */
function dvg_datab_dvg_requirements() {
  $requirements = array();

  $datab = variable_get('dvg_datab', array());

  $requirements['dvg_datab_settings'] = array(
    'title' => t('DataB Settings'),
  );
  if (!empty($datab['url']) && !empty($datab['cid']) && !empty($datab['secret'])) {
    $requirements['dvg_datab_settings']['value'] = t('Ok');
    $requirements['dvg_datab_settings']['severity'] = REQUIREMENT_OK;
  }
  else {
    $requirements['dvg_datab_settings']['value'] = l(t('Configure DataB settings'), 'admin/config/services/datab');
    $requirements['dvg_datab_settings']['severity'] = REQUIREMENT_ERROR;
  }

  return $requirements;
}

/**
 * Retrieves the doclist for the provided bsn.
 */
function dvg_datab_doclist($bsn) {
  drupal_page_is_cacheable(FALSE);

  $datab = variable_get('dvg_datab', array());

  $query_params = array(
    'cid' => _dvg_datab_in_demo_mode() ? DVG_DATAB_DEMO_CID : $datab['cid'],
    'secret' => _dvg_datab_in_demo_mode() ? DVG_DATAB_DEMO_SECRET : $datab['secret'],
    'request' => 'doclist',
    'uid' => $bsn,
  );
  if (isset($datab['strict']) && $datab['strict']) {
    $query_params['strict'] = "true";
  }

  $query = drupal_http_build_query($query_params);
  $url = $datab['url'] . '?' . $query;
  $doc_list = drupal_http_request($url);

  if ($doc_list->code != 200) {
    throw new DvgDataBException(t('Http error code @code returned', array(
      '@code' => $doc_list->code,
    )));
  }

  $data = dvg_datab_xml_to_array($doc_list->data);
  if ($data === FALSE) {
    throw new DvgDataBException(t('DataB returned an unknown error'));
  }

  if (empty($data['response']['succes']) || strtolower($data['response']['succes']) == 'false' || strtolower($data['response']['succes']) != 'true') {
    throw new DvgDataBException(t('DataB returned error code @code: @error', array(
      '@code' => $data['response']['error']['@attributes']['code'],
      '@error' => $data['response']['error']['@attributes']['description']
    )));
  }

  return !empty($data['response']['document']) ? $data['response']['document'] : array();
}

/**
 * Retrieves a document for the provided bsn and docid.
 */
function dvg_datab_doc_info($bsn, $docid) {
  $datab = variable_get('dvg_datab', array());

  $query = drupal_http_build_query(array(
    'cid' => _dvg_datab_in_demo_mode() ? DVG_DATAB_DEMO_CID : $datab['cid'],
    'secret' => _dvg_datab_in_demo_mode() ? DVG_DATAB_DEMO_SECRET : $datab['secret'],
    'request' => 'getdoc',
    'output' => 'raw',
    'uid' => $bsn,
    'docid' => $docid,
  ));
  $url = $datab['url'] . '?' . $query;
  $doc_info = drupal_http_request($url);

  if ($doc_info->code != 200) {
    throw new DvgDataBException(t('Http error code @code returned', array(
      '@code' => $doc_info->code,
    )));
  }

  if (empty($doc_info->data)) {
    throw new DvgDataBException(t('No document data returned'));
  }

  if (strpos($doc_info->data, '** ERROR **') === 0) {
    $code = substr($doc_info->data, 11, 2);
    $error = substr($doc_info->data, 13);

    throw new DvgDataBException(t('DataB returned error code @code while fetching document: @error', array(
      '@code' => $code,
      '@error' => $error,
    )));
  }

  $name = $type = '';
  $doclist = dvg_datab_doclist($bsn);
  foreach ($doclist as $doc) {
    if ($doc['docid'] == $docid) {
      $name = $doc['description'];
      $type = _dvg_datab_doctype($doc['doctype']);
      break;
    }
  }

  return array(
    'name' => $name,
    'type' => $type,
    'data' => $doc_info->data,
  );
}

/**
 * Converts a string of xml into an array.
 *
 * This uses a trick to convert the xml to an array.
 * All functions return FALSE in case of an error.
 */
function dvg_datab_xml_to_array($xml_string) {
  $xml = simplexml_load_string($xml_string, NULL, LIBXML_NOCDATA);
  $json = json_encode($xml);
  return json_decode($json, TRUE);
}

/**
 * Implements hook_context_callback_info().
 */
function dvg_datab_context_callback_info() {
  return array(
    'conditions' => array(
      'dvg_datab_doclist' => array(
        'label' => 'DVG Data B. DocList',
        'callback' => 'functional_content__callback',
        'callback arguments' => array(
          'dvg_datab_doclist',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_functional_content().
 */
function dvg_datab_functional_content() {
  $items = array(
    '#group' => array(
      'label' => t('DVG Data B.'),
    ),
  );

  $items['dvg_datab_doclist'] = array(
    'label' => 'DVG Data B. DocList Node',
    'description' => t('Use this node ID to place the Data B. DocList or DigiD-login button'),
  );

  return $items;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dvg_datab_preprocess_node(&$variables) {
  global $user;

  if (
    !empty($variables['nid']) &&
    $variables['nid'] == functional_content_nid('dvg_datab_doclist') &&
    dvg_authentication_external_logged_in($user, ['digid'])
  ) {
    $variables['content']['body']['#access'] = FALSE;
  }
}

/**
 * Converts known Data B. doctypes to a file type.
 */
function _dvg_datab_doctype($doc_type) {
  static $doc_types = array(
    'A' => 'pdf',
    'F' => 'pdf',
    'P' => 'pdf',
    'R' => 'pdf',
    'L' => 'pdf',
    'J' => 'jpeg',
    'C' => 'html',
    'H' => 'html',
    'M' => 'cyclorama',
    'S' => 'xls',
    'X' => 'xls',
    'D' => 'doc',
    'Z' => 'zip',
    'E' => 'xml',
  );

  $doc_type = drupal_strtoupper($doc_type);
  if (isset($doc_types[$doc_type])) {
    return $doc_types[$doc_type];
  }

  return FALSE;
}

/**
 * Converts a Data B. filetype to a mime type.
 */
function _dvg_datab_mimetype($file_type) {
  static $mime_types = array(
    'pdf' => 'application/pdf',
    'jpeg' => 'image/jpeg',
    'html' => 'text/html',
    'doc' => 'application/msword',
    'xls' => 'application/vnd.ms-excel',
    'zip' => 'application/zip',
    'xml' => 'application/xml',
  );

  $file_type = drupal_strtolower($file_type);
  if (isset($mime_types[$file_type])) {
    return $mime_types[$file_type];
  }

  return FALSE;
}

/**
 * Array filter callback that checks end date of the doc.
 */
function _dvg_datab_filter_doclist($doc) {
  if (isset($doc['einddatum']) && $doc['einddatum'] < date('Y-m-d')) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Sorting-callback that sorts on start-date, end-date and description.
 */
function _dvg_datab_sort_doclist($a, $b) {
  if (isset($a['startdatum']) && isset($b['startdatum']) && $a['startdatum'] != $b['startdatum']) {
    return strcmp($b['startdatum'], $a['startdatum']);
  }

  if (isset($a['einddatum']) && isset($b['einddatum']) && $a['einddatum'] != $b['einddatum']) {
    return strcmp($b['einddatum'], $a['einddatum']);
  }

  if (isset($a['description']) && isset($b['description']) && $a['description'] != $b['description']) {
    return strcmp($b['description'], $a['description']);
  }

  return 0;
}

/**
 * Generates the Data B doclist.
 */
function _dvg_datab_generate_doclist() {
  $bsn = !_dvg_datab_in_demo_mode() ? dvg_authentication_get_external_user_value('bsn') : DVG_DATAB_DEMO_BSN;

  $doclist = array();
  try {
    if ($bsn) {
      $doclist = dvg_datab_doclist($bsn);
    }
  }
  catch (DvgDataBException $e) {
    watchdog('dvg_datab', $e->getMessage(), array(), WATCHDOG_ERROR);
  }

  if (empty($doclist)) {
    if ($message = variable_get('dvg_datab_no_result', FALSE)) {
      return check_markup($message['value'], $message['format']);
    }

    return t('No documents found.');
  }

  $doclist = array_filter($doclist, '_dvg_datab_filter_doclist');
  usort($doclist, '_dvg_datab_sort_doclist');

  $all_docs = array();
  foreach ($doclist as $doc) {
    $doc_date = strtotime($doc['startdatum']);
    $year = date('Y', $doc_date);

    $all_docs[$year][] = $doc;
  }

  $items = array();
  foreach ($all_docs as $docs_year => $docs) {
    $items_year = array();
    foreach ($docs as $doc) {
      $item = $doc['description'];
      $type = _dvg_datab_doctype($doc['doctype']);
      $url = current_path() . '/docid/' . $doc['docid'];

      $options = array(
        'attributes' => array(
          'class' => array('link-file'),
        ),
      );

      if ($type) {
        $options['html'] = TRUE;
        $item = '<span class="file type-' . drupal_clean_css_identifier($type) . '">' . $type . ' </span>' . $item;
      }

      $items_year[] = '<span class="file">' . l($item, $url, $options) . '</span>';
    }

    $items[] = theme('item_list', array(
      'items' => $items_year,
      'title' => $docs_year,
      'class' => array('doclist-year'),
    ));
  }

  $list = array(
    'items' => $items,
    'class' => array('doclist'),
  );

  $result_text = '';
  if ($message = variable_get('dvg_datab_result_text', FALSE)) {
    $result_text = check_markup($message['value'], $message['format']);
  }

  return $result_text . theme('item_list', $list);
}

/**
 * Page callback that presents the document to the user.
 */
function dvg_datab_download_doc($node, $docid) {
  drupal_page_is_cacheable(FALSE);

  $bsn = !_dvg_datab_in_demo_mode() ? dvg_authentication_get_external_user_value('bsn') : DVG_DATAB_DEMO_BSN;

  $doc_info = array();
  try {
    if ($bsn) {
      $doc_info = dvg_datab_doc_info($bsn, $docid);
    }
  }
  catch (DvgDataBException $e) {
    watchdog('dvg_datab', $e->getMessage(), array(), WATCHDOG_ERROR);
  }

  if (empty($doc_info['data'])) {
    drupal_not_found();
  }
  else {
    $type = _dvg_datab_mimetype($doc_info['type']);
    if ($type) {
      drupal_add_http_header('Content-Type', $type . '; utf-8');
    }

    $filename = $doc_info['name'];
    if ($doc_info['type']) {
      $filename .= '.' . $doc_info['type'];
    }

    header('Content-Disposition: attachment; filename="' . $filename . '"');

    echo $doc_info['data'];
  }

  drupal_exit();
}

/**
 * Helper to determine if the demo content should be dislayed.
 */
function _dvg_datab_in_demo_mode() {
  $datab_config = variable_get('dvg_datab', array());

  if (!empty($datab_config['demo_mode'])) {
    return (bool) $datab_config['demo_mode'];
  }

  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_datab_form_dvg_global_texts_alter(&$form, &$form_state, $form_id) {
  $form['dvg_datab'] = array(
    '#type' => 'fieldset',
    '#title' => t('DataB'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $message = variable_get('dvg_datab_no_result', array('value' => '', 'format' => 'filtered_html'));
  $form['dvg_datab']['dvg_datab_no_result'] = array(
    '#size' => '80',
    '#type' => 'text_format',
    '#format' => $message['format'],
    '#title' => t('No result text'),
    '#rows' => 5,
    '#default_value' => $message['value'],
  );

  $result_text = variable_get('dvg_datab_result_text', array('value' => '', 'format' => 'filtered_html'));
  $form['dvg_datab']['dvg_datab_result_text'] = array(
    '#size' => '80',
    '#type' => 'text_format',
    '#format' => $result_text['format'],
    '#title' => t('Result text'),
    '#rows' => 5,
    '#default_value' => $result_text['value'],
  );
}

/**
 * Implements hook_dvg_authentication_required_providers().
 */
function dvg_datab_dvg_authentication_required_providers() {
  return [
    'digid',
  ];
}
