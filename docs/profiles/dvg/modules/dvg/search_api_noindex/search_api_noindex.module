<?php

/**
 * @file
 * Removes specified nodes from any selected search index.
 */

/**
 * Implements hook_form_alter().
 */
function search_api_noindex_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  $form['search_api_noindex'] = array();
  $index_list = search_api_index_load_multiple(FALSE);

  foreach ($index_list as $index) {

    // Check if noindex filter is enabled
    if (isset($index->options['data_alter_callbacks']['search_api_noindex_alter_noindex_filter'])) {
      $noindex_enabled = $index->options['data_alter_callbacks']['search_api_noindex_alter_noindex_filter']['status'];

      // Check status Search API filter 'Bundle filter'.
      $filter_bundle_enabled = $index->options['data_alter_callbacks']['search_api_alter_bundle_filter']['status'];

      if ($noindex_enabled && $filter_bundle_enabled) {
        $bundles = $index->options['data_alter_callbacks']['search_api_alter_bundle_filter']['settings'];

        $is_selected = in_array($node->type, $bundles['bundles']);

        // $bundles['default'] => 1 = All but those from one of the selected bundles
        // $bundles['default'] => 0 = Only those from the selected bundles
        $noindex_enabled = ($bundles['default'] xor $is_selected);
      }

      if ($noindex_enabled) {
        if (!isset($node->search_api_noindex)) {
          $node->search_api_noindex = array();
        }

        $form['search_api_noindex'][$index->machine_name] = array(
          '#type' => 'checkbox',
          '#default_value' => isset($node->search_api_noindex[$index->machine_name]) ? $node->search_api_noindex[$index->machine_name] : FALSE,
          '#required' => FALSE,
          '#title' => check_plain(t($index->name)),
        );
      }
    }

    if ($form['search_api_noindex']) {
      $form['search_api_noindex'] += array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#weight' => 99,
        '#group' => 'additional_settings',
        '#description' => t('Do not index this node in the following search lists.'),
        '#title' => t('Internal search options'),
        '#access' => user_access('change noindex value'),
      );
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function search_api_noindex_node_presave($node) {
  if (!empty($node->search_api_noindex) && is_array($node->search_api_noindex)) {
    $node->search_api_noindex = serialize($node->search_api_noindex);
  }
}

/**
 * Implements hook_node_load().
 */
function search_api_noindex_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if (!empty($node->search_api_noindex)) {
      $node->search_api_noindex = unserialize($node->search_api_noindex);
    }
  }
}

/**
 * Implements hook_permission().
 */
function search_api_noindex_permission() {
  return array(
    'change noindex value' => array(
      'title' => t('Change the noindex value'),
      'description' => t('Show the Search API noindex option for nodes.'),
    ),
  );
}

/**
 * Implements hook_search_api_alter_callback_info().
 */
function search_api_noindex_search_api_alter_callback_info() {
  $callbacks['search_api_noindex_alter_noindex_filter'] = array(
    'name' => t('Noindex filter'),
    'description' => t('Exclude items from indexing based on their node noindex setting.'),
    'class' => 'SearchApiNoindexAlterNoindexFilter',
    // Filters should be executed first.
    'weight' => -10,
  );

  return $callbacks;
}
