<?php
/**
 * @file
 * Code for the Content type: Crisis block feature.
 */

include_once 'dvg_ct_crisis_block.features.inc';
include_once 'dvg_ct_crisis_block.dvg.user_permission.inc';

/**
 * Implements hook_functional_content().
 */
function dvg_ct_crisis_block_functional_content() {
  $fc = array(
    'dvg_ct_crisis_block' => array(
      'label' => t('Crisis block'),
    ),
  );

  return $fc;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Check all search_api_noindex options for new crisis_block nodes.
 */
function dvg_ct_crisis_block_form_crisis_block_node_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#node']->nid) && !empty($form['search_api_noindex'])) {
    foreach (element_children($form['search_api_noindex']) as $child) {
      $form['search_api_noindex'][$child]['#default_value'] = TRUE;
    }
  }
}

/**
 * Fetch the crisis block node, if all conditions are met.
 */
function _dvg_ct_crisis_block_get_block() {
  $node = functional_content_node('dvg_ct_crisis_block');

  if ($node && current_path() != 'node/' . $node->nid && node_access('view', $node)) {
    return $node;
  }

  return FALSE;
}

/**
 * Implements hook_page_alter().
 */
function dvg_ct_crisis_block_page_alter(&$page) {
  if (drupal_is_front_page()) {
    $node = _dvg_ct_crisis_block_get_block();

    if ($node) {
      $node_view = node_view($node);
      $page['content_top'][] = $node_view;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function dvg_ct_crisis_block_module_implements_alter(&$implementations, $hook) {
  _dvg_global_module_implements_last('dvg_ct_crisis_block', array('page_alter', 'form_alter'), $implementations, $hook);
}

/**
 * Implements hook_node_access().
 *
 * Disable node detail pages for the crisis_block content type.
 * Unless the user has create permissions (to allow cloning).
 */
function dvg_ct_crisis_block_node_access($node, $op, $account) {
  if (
    $op == 'view' &&
    $node->type == 'crisis_block' &&
    $node->nid == arg(1) &&
    !node_access('update', $node, $account) &&
    !node_access('create', $node, $account)
  ) {
    return NODE_ACCESS_DENY;
  }
}

/**
 * Implements hook_survey_form_is_visible_alter().
 */
function dvg_ct_crisis_block_survey_form_is_visible_alter(&$visible) {
  if ($visible && _dvg_ct_crisis_block_get_block() !== FALSE) {
    $visible = FALSE;
  }
}

/**
 * Implements hook_dvg_kif_is_visible_alter().
 */
function dvg_ct_crisis_block_dvg_kif_is_visible_alter(&$visible) {
  if ($visible && _dvg_ct_crisis_block_get_block()) {
    $visible = FALSE;
  }
}

/**
 * Implements dvg_ct_crisis_banner_button_is_visible_alter().
 */
function dvg_ct_crisis_block_dvg_ct_crisis_banner_button_is_visible_alter(&$visible) {
  if ($visible && _dvg_ct_crisis_block_get_block() !== FALSE) {
    $visible = FALSE;
  }
}
