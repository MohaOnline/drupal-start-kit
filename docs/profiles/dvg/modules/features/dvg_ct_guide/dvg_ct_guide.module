<?php
/**
 * @file
 * Code for the Guide Content Type feature.
 */

define('DVG_GUIDE_METATAG_LINKS', 'ct_guide_metatag_links');

include_once 'dvg_ct_guide.features.inc';
include_once 'dvg_ct_guide.dvg.user_permission.inc';

/**
 * Implements hook_html_head_alter().
 */
function dvg_ct_guide_html_head_alter(&$elements) {
  $metatag_links = &drupal_static(DVG_GUIDE_METATAG_LINKS);

  if (empty($metatag_links)) {
    return;
  }

  foreach ($elements as $key => $element) {
    // Skip non-links and elements added by this module.
    if ($element['#tag'] != 'link' || strpos($key, 'dvg_guide:') === 0) {
      continue;
    }

    foreach (array_keys($metatag_links) as $tag) {
      if (strpos($key, 'drupal_add_html_head_link:' . $tag . ':<') === 0) {
        unset($elements[$key]);
      }
    }
  }
}

/**
 * Helper function to add a metatag link.
 *
 * Stores the links to remove the duplicates later.
 *
 * @see drupal_add_html_head_link().
 */
function _dvg_ct_guide_add_metatag_link($tag, $href) {
  $metatag_links = &drupal_static(DVG_GUIDE_METATAG_LINKS);
  $metatag_links[$tag] = $href;

  // Manually add a html_head link, with a custom name to easily detect it.
  // @see drupal_add_html_head_link().
  $attributes = array('rel' => $tag, 'href' => $href);

  $element = array(
    '#tag' => 'link',
    '#attributes' => $attributes,
  );

  $href = '<' . check_plain($attributes['href']) . '>;';
  unset($attributes['href']);
  $element['#attached']['drupal_add_http_header'][] = array('Link',  $href . drupal_http_header_attributes($attributes), TRUE);

  drupal_add_html_head($element, 'dvg_guide:' . $attributes['rel'] . ':' . $href);
}

/**
 * Implements hook_preprocess_node().
 */
function dvg_ct_guide_preprocess_node(&$variables) {
  $node = $variables['node'];

  if ($variables['node']->type == 'guide' && $variables['view_mode'] == 'full' && isset($node->field_guide_pages)) {
    $guide_pages = field_get_items('node', $node, 'field_guide_pages');
    $node_ids = array();

    foreach ($guide_pages as $guide_page) {
      $node_ids[] = $guide_page['target_id'];
    }

    $nodes = node_load_multiple($node_ids, array('status' => 1));
    $node_keys = array_keys($nodes);
    $target_node = arg(2) ? arg(2) : 0;

    // Check if target nid is a valid node inside the guide
    if (!in_array($target_node, $node_keys)) {
      $target_node = $node_keys[0];
    }

    // Create the guide
    $items = array();
    $items['type'] = 'ol';
    $items['attributes']['class'] = array('guide-menu');
    $items_nav = array();

    // Renew the keys
    $nodes = array_values($nodes);

    foreach ($nodes as $key => $guide_node) {
      $options = array();

      if ($guide_node->nid == $target_node) {
        $active_node = $key;
        $options['attributes']['class'][] = 'active';

        // Add a canonical and shortlink to the current guide page.
        if ($guide_node->type != 'task' && count(_dvg_ct_guide_get_related_guides($guide_node->nid)) == 1) {
          $shortlink_url = 'node/' . $node->nid . '/' . $guide_node->nid;
        }
        else {
          $shortlink_url = 'node/' . $guide_node->nid;
        }
        _dvg_ct_guide_add_metatag_link('canonical', url($shortlink_url));
        _dvg_ct_guide_add_metatag_link('shortlink', base_path() . $shortlink_url);

        // Set previous link
        if (isset($nodes[$key - 1])) {
          $options_nav['attributes']['title'] = $nodes[$key - 1]->title;
          $items_nav['attributes']['class'][] = 'prev';
          $items_nav['items'][] = array(
            'data' => l(t('Previous step'), 'node/' . $node->nid . '/' . $nodes[$key - 1]->nid, $options_nav),
            'class' => array('prev'),
          );
        }

        // Set next link
        if (isset($nodes[$key + 1])) {
          $options_nav['attributes']['title'] = $nodes[$key + 1]->title;
          $items_nav['attributes']['class'][] = 'next';
          $items_nav['items'][] = array(
            'data' => l(t('Next step'), 'node/' . $node->nid . '/' . $nodes[$key + 1]->nid, $options_nav),
            'class' => array('next'),
          );
        }
      }

      $items['items'][] = l($guide_node->title, 'node/' . $node->nid . '/' . $guide_node->nid, $options);
    }

    $item['class'] = array('guide-menu');
    $variables['guide_pages_menu'] = theme('item_list', $items);
    $variables['guide_pages_node'] = node_view($nodes[$active_node]);

    if (isset($items_nav['items'])) {
      $items_nav['attributes']['class'] = array('guide-nav');
      $variables['guide_pages_nav'] = theme('item_list', $items_nav);
    }
  }

  // Check if node needs to be redirected to a guide.
  if (arg(1) == $node->nid && $node->type == 'page' && $variables['view_mode'] == 'full') {
    $entities = _dvg_ct_guide_get_related_guides($node->nid);
    if (count($entities) == 1) {
      drupal_goto(_dvg_ct_guide_get_guide_page_path(key($entities), $node->nid));
    }
  }

  // Set node view mode to page
  $page_node = node_load(arg(1));
  if (arg(0) == 'node' && arg(1) != $node->nid && $page_node && $page_node->type == 'guide') {
    $variables['page_link'] = FALSE;
  }
}

/**
 * Helper function to get the correct guide page path.
 */
function _dvg_ct_guide_get_guide_page_path($guide_nid, $page_nid) {
  $guide_alias = drupal_get_path_alias('node/' . $guide_nid);
  return $guide_alias . '/' . $page_nid;
}

/**
 * Implements hook_field_extra_fields().
 */
function dvg_ct_guide_field_extra_fields() {
  $field_data['display']['related_guides'] = array(
    'label' => t('Related guides'),
    'description' => t('Show links of related guides when node exist in multiple guides'),
    'weight' => '50',
  );

  $extra['node']['page'] = $field_data;
  $extra['node']['task'] = $field_data;

  return $extra;
}

/**
 * Implements hook_node_view().
 *
 * Make list of related guides
 */
function dvg_ct_guide_node_view($node, $view_mode) {
  if (arg(1) == $node->nid && $view_mode == 'full' && ($node->type == 'page' || $node->type == 'task')) {
    $guides = array();
    $entities = _dvg_ct_guide_get_related_guides($node->nid);
    foreach ($entities as $entity) {
      if ($guide = node_load($entity->nid)) {
        $guides[] = l($guide->title, 'node/' . $guide->nid);
      }
    }

    if (!empty($guides)) {
      $title = '<h2 class="title">' . t('Related guides') . '</h2>';

      $node->content['related_guides'] = array(
        '#prefix' => '<div class="field field-name-field-related-guides">' . $title,
        '#markup' => theme('item_list', array(
          'items' => $guides,
        )),
        '#suffix' => '</div>',
      );

      // Check if the related-pages-enabled class has already been added.
      $section_classes = $node->content['#groups']['group_main_section']->format_settings['instance_settings']['classes'];
      $class = strpos($section_classes, 'related-pages-enabled') ? '' : ' related-pages-enabled';
      $node->content['#groups']['group_main_section']->format_settings['instance_settings']['classes'] .= $class;
    }
  }
}

/**
 * Get all related guides of nid
 */
function _dvg_ct_guide_get_related_guides($nid, $status = 1) {
  $nid_guides = &drupal_static(__FUNCTION__, array());

  if (!isset($nid_guides[$nid])) {
    $nid_guides[$nid] = array();

    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'guide')
      ->fieldCondition('field_guide_pages', 'target_id', $nid, '=');

    if (is_numeric($status)) {
      $query->propertyCondition('status', $status);
    }

    $result = $query->execute();
    if (!empty($result['node'])) {
      $nid_guides[$nid] = $result['node'];
    }
  }

  return $nid_guides[$nid];
}

/**
 * Implements hook_node_insert().
 */
function dvg_ct_guide_node_insert($node) {
  if ($node->type == 'guide') {
    _dvg_ct_guide_create_aliases($node);
  }
}

/**
 * Implements hook_node_update().
 */
function dvg_ct_guide_node_update($node) {
  if ($node->type == 'guide') {
    if ($child_pages = field_get_items('node', $node, 'field_guide_pages')) {
      foreach ($child_pages as $child_page) {
        _dvg_ct_guide_alias_redirect($node, $child_page['target_id']);
      }
    }
    _dvg_ct_guide_create_aliases($node);
  }
  else {
    if ($guides = _dvg_ct_guide_get_related_guides($node->nid)) {
      foreach (node_load_multiple(array_keys($guides)) as $guide_node) {
        _dvg_ct_guide_alias_redirect($guide_node, $node->nid);
        _dvg_ct_guide_create_aliases($guide_node);
      }
    };
  }
}

/**
 * Save the old aliases as redirects.
 */
function _dvg_ct_guide_alias_redirect($guide_node, $child_nid) {
  if (module_exists('redirect')) {
    $redirect_path = 'node/' . $guide_node->nid . '/' . $child_nid;
    $old_alias = drupal_get_path_alias($redirect_path, $guide_node->language);

    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = $old_alias;
    $redirect->redirect = $redirect_path;
    $redirect->language = $guide_node->language;

    // Check if the redirect exists before saving.
    $hash = redirect_hash($redirect);
    if (!redirect_load_by_hash($hash)) {
      redirect_save($redirect);
    }
  }
}

/**
 * (Re)create Aliases for the guide.
 */
function _dvg_ct_guide_create_aliases($node) {
  if (!$pages = field_get_items('node', $node, 'field_guide_pages')) {
    return;
  }

  // Remove all aliases where source like 'node/$node->nid/_%'
  db_delete('url_alias')
    ->condition('source', 'node/' . $node->nid . '/_%', 'LIKE')
    ->execute();

  // Current $node's alias
  module_load_include('inc', 'pathauto');
  $base_alias = pathauto_create_alias('node', 'return', 'node/' . $node->nid, array('node' => $node), $node->type, $node->language);

  // Cycle through sub/guide/children pages
  $nids = array();
  foreach ($pages as $item) {
    $nids[] = $item['target_id'];
  }
  foreach (node_load_multiple($nids, array(), TRUE) as $child_node) {
    $alias = $base_alias . '/' . pathauto_create_alias('node', 'return', 'node/' . $child_node->nid, array('node' => $child_node), $child_node->type, $node->language);

    // Create new aliases for all children using $node's alias
    $path = array(
      'alias' => $alias,
      'source' => 'node/' . $node->nid . '/' . $child_node->nid,
      'language' => $node->language,
    );
    path_save($path);
  }
}
