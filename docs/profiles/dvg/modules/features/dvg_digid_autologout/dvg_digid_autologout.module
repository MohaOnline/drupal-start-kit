<?php

/**
 * @file
 * Used to automagically log out a user after a preset time.
 */

include_once 'dvg_digid_autologout.dvg.user_permission.inc';
include_once 'dvg_digid_autologout.features.inc';


define('DVG_DIGID_AUTOLOGOUT_MIN_TIMEOUT', 60);

/**
 * Implements hook_permission().
 */
function dvg_digid_autologout_permission() {
  return array(
    'administer dvg_digid_autologout' => array(
      'title' => t('Administer DigiD Autologout'),
      'description' => t('Administer the DigiD Autologout settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dvg_digid_autologout_menu() {
  $items = array();

  $items['admin/config/services/digid-autologout'] = array(
    'title' => 'DigiD - Auto Logout',
    'description' => 'Administer DigiD Auto Logout settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dvg_digid_autologout_settings'),
    'access arguments' => array('administer dvg_digid_autologout'),
    'file' => 'dvg_digid_autologout.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['dvg_digid_autologout_ahah_logout'] = array(
    'title' => 'JS Logout',
    'page callback' => 'dvg_digid_autologout_ahah_logout',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['dvg_digid_autologout_ahah_set_last'] = array(
    'title' => 'JS Logout AHAH Set Last',
    'page callback' => 'dvg_digid_autologout_ahah_set_last',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'theme callback' => 'ajax_base_page_theme',
    'delivery callback' => 'ajax_deliver',
  );

  $items['dvg_digid_autologout_ajax_get_time_left'] = array(
    'title' => 'JS Logout AJAX Get Time Until Logout',
    'page callback' => 'dvg_digid_autologout_ahah_get_remaining_time',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'theme callback' => 'ajax_base_page_theme',
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function dvg_digid_autologout_block_info() {
  $blocks = array();

  $blocks['info'] = array(
    'info' => t('Automated Logout info'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dvg_digid_autologout_block_view($delta = '') {
  $block = array();

  if (_dvg_digid_autologout_prevent()) {
    // Don't display the block if the user is not going
    // to be logged out on this page.
    return NULL;
  }

  $time_remaining = _dvg_digid_autologout_get_remaining_time();
  if ($time_remaining > 0) {
    $time_remaining = round(($time_remaining % 3600) / 60);
  }
  else {
    $time_remaining = 0;
  }

  $link_text = t('Refresh your session with !time minutes', array('!time' => $time_remaining));
  $link = l($link_text, 'dvg_digid_autologout_ahah_set_last', array(
    'attributes' => array(
      'class' => array('use-ajax'),
    ),
  ));
  $refresh_link = '<span class="refresh hidden">' . $link . '</span>' .
    '<span class="norefresh hidden">' . t("You can't refresh your session") . '</span>';

  $block['subject'] = '';

  if (_dvg_digid_autologout_refresh_only()) {
    $block['content'] = t('Autologout does not apply on the current page, you will be kept logged in whilst this page remains open.');
  }
  else {
    $time = '<span class="timeout">' . $time_remaining . ' ' . format_plural($time_remaining, 'minute', 'minutes') . '</span>';
    $block_msg = '<div class="digid-autologout">';
    $block_msg .= t('Your session will be active for !time.', array('!time' => $time));
    $block_msg .= ' ';
    $block_msg .= $refresh_link;
    $block_msg .= dvg_digid_autologout_create_timer();
    $block_msg .= '</div>';
    $block_msg .= '<noscript>';
    $block_msg .= t('Your session will be active for up to 150 minutes and shall disconnect when the connection is inactive for 15 minutes');
    $block_msg .= '</noscript>';
    $block['content'] = $block_msg;
  }

  $path = drupal_get_path('module', 'dvg_digid_autologout');
  drupal_add_js($path . '/dvg_digid.js');
  if (variable_get('dvg_digid_autologout_use_dvg_digid_style_js', 1)) {
    drupal_add_js($path . '/dvg_digid_style.js');
  }

  return $block;
}

/**
 * Drupal reset timer form on timer block.
 */
function dvg_digid_autologout_create_block_form() {

  $markup = dvg_digid_autologout_create_timer();

  $form['autologout_reset'] = array(
    '#type' => 'button',
    '#value' => t('Reset Timeout'),
    '#weight' => 1,
    '#limit_validation_errors' => FALSE,
    '#executes_submit_callback' => FALSE,
    '#ajax' => array(
      'callback' => 'dvg_digid_autologout_ahah_set_last',
    ),
  );

  $form['timer'] = array(
    '#markup' => $markup,
  );

  return $form;
}

/**
 * Get the timer HTML markup.
 *
 * @return string
 *   HTML to insert a countdown timer.
 */
function dvg_digid_autologout_create_timer() {
  $time_remaining = (int) _dvg_digid_autologout_get_remaining_time();
  $timeformat = '%hours%:%mins%:%secs%';

  return theme('dvg_digid_autologout_block', array(
    'time_remaining' => $time_remaining,
    'timeformat' => $timeformat));
}

/**
 * Implements hook_help().
 */
function dvg_digid_autologout_help($path, $arg) {
  $seconds = _dvg_digid_autologout_get_user_timeout();
  $message = NULL;

  switch ($path) {
    case 'admin/help#autologout':
      $message = '<p>' . t("This module allows you to force site users to be logged out after a given amount of time due to inactivity after first being presented with a confirmation dialog. Your current logout threshold is %seconds seconds.", array('%seconds' => $seconds)) . '</p>';
      break;
  }

  return $message;
}

/**
 * Implements hook_theme().
 */
function dvg_digid_autologout_theme() {
  return array(
    'dvg_digid_autologout_block' => array(
      'variables' => array(
        'time_left' => NULL,
        'time_format' => NULL,
      ),
    ),
  );
}

/**
 * Returns HTML for the autologout block.
 */
function theme_dvg_digid_autologout_block($variables) {
  $time_remaining = $variables['time_remaining'];
  $timeformat = $variables['timeformat'];

  return "<div id='timer'>
    <span class='interval element-hidden'>$time_remaining</span>
    <span class='format_txt element-hidden'>$timeformat</span>
    </div>";
}

/**
 * Checks to see if timeout threshold is outside max/min values.
 *
 * Only done here to centralize and stop repeated code.
 * Hard coded min, configurable max.
 *
 * @param int $timeout
 *   The timeout value in seconds to validate
 * @param int $max_timeout
 *   (optional) A maximum timeout. If not set the current system
 *   default maximum is used.
 */
function dvg_digid_autologout_timeout_validate($timeout, $max_timeout = NULL) {
  if (is_null($max_timeout)) {
    $max_timeout = variable_get('dvg_digid_autologout_max_timeout', '172800');
  }

  if (!is_numeric($timeout) || $timeout < 0 || ($timeout > 0 && $timeout < DVG_DIGID_AUTOLOGOUT_MIN_TIMEOUT) || $timeout > $max_timeout) {
    // Less then DVG_DIGID_AUTOLOGOUT_MIN_TIMEOUT,
    // greater then max_timeout and is numeric.
    // 0 is allowed now as this means no timeout.
    $validate = FALSE;
  }
  else {
    $validate = TRUE;
  }

  return $validate;
}

/**
 * Implements hook_init().
 */
function dvg_digid_autologout_init() {
  global $user;

  if (empty($user->uid)) {
    if (!empty($_GET['dvg_digid_autologout_timeout']) && $_GET['dvg_digid_autologout_timeout'] == 1 && empty($_POST)) {
      _dvg_digid_autologout_inactivity_message();
    }
    return;
  }

  // Check if JS should be included on this request.
  if (_dvg_digid_autologout_prevent()) {
    return;
  }

  // Check if anything wants to be refresh only. This URL would
  // include the javascript but will keep the login alive whilst
  // that page is opened.
  $refresh_only = _dvg_digid_autologout_refresh_only();

  $now = REQUEST_TIME;
  $timeout = _dvg_digid_autologout_get_user_timeout();
  $redirect_url = variable_get('dvg_digid_autologout_redirect_url', 'user/login');
  $redirect_query = drupal_get_destination() + array('dvg_digid_autologout_timeout' => 1);

  $settings = array(
    'timeout' => $refresh_only ? ($timeout * 500) : ($timeout * 1000),
    'can_refresh' => _dvg_digid_autologout_can_refresh(),
    'redirect_url' => url($redirect_url, array('query' => $redirect_query)),
    'refresh_only' => $refresh_only,
  );

  drupal_add_library('system', 'drupal.ajax');
  drupal_add_js(array('autologout' => $settings), 'setting');
  drupal_add_js(drupal_get_path('module', 'dvg_digid_autologout') . "/dvg_digid_autologout.js");

  // We need a backup plan if JS is disabled or if the page was closed.
  if (!$refresh_only && isset($_SESSION['autologout_last'])) {
    // Logout if the user was inactive for longer than the configured timeout.
    if ($now > $_SESSION['autologout_last'] + variable_get('dvg_digid_autologout_timeout', 900)) {
      _dvg_digid_autologout_logout();
      _dvg_digid_autologout_inactivity_message();
    }
    // If there is a negative timeout, the maximum session time was exceeded.
    // Log them out.
    elseif ($timeout < 0) {
      _dvg_digid_autologout_logout();
      _dvg_digid_autologout_inactivity_message();
    }
    else {
      $_SESSION['autologout_last'] = $now;
    }
  }
  else {
    $_SESSION['autologout_last'] = $now;
  }
}

/**
 * Implements hook_autologout_prevent().
 */
function dvg_digid_autologout_dvg_digid_autologout_prevent() {
  global $user;

  // Don't include autologout JS checks on ajax callbacks.
  $paths = array(
    'system',
    'dvg_digid_autologout_ajax_get_time_left',
    'dvg_digid_autologout_ahah_logout',
    'dvg_digid_autologout_ahah_set_last',
  );

  if (in_array(arg(0), $paths)) {
    return TRUE;
  }

  // If user is not a DiGID user don't include autologout.
  if (!_dvg_digid_logged_in($user)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_autologout_refresh_only().
 */
function dvg_digid_autologout_dvg_digid_autologout_refresh_only() {
  // An open admin page will keep login alive.
  if (path_is_admin(current_path())) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_page_build().
 *
 * Add a form element to every page which is used to detect if the page was
 * loaded from browser cache. This happens when the browser's back button is
 * pressed for example. The JS will set the value of the hidden input element
 * to 1 after initial load. If this is 1 on subsequent loads, the page was
 * loaded from cache and an autologout timeout refresh needs to be triggered.
 */
function dvg_digid_autologout_page_build(&$page) {
  if (!_dvg_digid_autologout_prevent()) {
    $page['page_bottom']['autologout'] = array(
      '#markup' => '<form id="autologout-cache-check"><input type="hidden" id="autologout-cache-check-bit" value="0" /></form>',
    );
  }
}

/**
 * AJAX callback that returns the time remaining for this user is logged out.
 */
function dvg_digid_autologout_ahah_get_remaining_time() {
  $time_remaining_ms = _dvg_digid_autologout_get_remaining_time() * 1000;

  // Reset the timer.
  $markup = dvg_digid_autologout_create_timer();
  $commands = array();
  $commands[] = ajax_command_replace('#timer', $markup);
  $commands[] = ajax_command_settings(array(
    'time' => $time_remaining_ms,
    'can_refresh' => _dvg_digid_autologout_can_refresh(),
  ));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback to reset the last access session variable.
 */
function dvg_digid_autologout_ahah_set_last() {
  $_SESSION['autologout_last'] = REQUEST_TIME;

  // Reset the timer.
  $result = dvg_digid_autologout_ahah_get_remaining_time();
  $result['#commands'][] = ajax_command_invoke('.block-dvg-digid-autologout .refresh', 'toggleClass', array(
    'element-invisible', !_dvg_digid_autologout_can_refresh(),
  ));
  $result['#commands'][] = ajax_command_invoke('.block-dvg-digid-autologout .norefresh', 'toggleClass', array(
    'element-invisible', _dvg_digid_autologout_can_refresh(),
  ));

  return $result;
}

/**
 * AJAX callback that performs the actual logout and redirects the user.
 */
function dvg_digid_autologout_ahah_logout() {
  _dvg_digid_autologout_logout();
  drupal_exit();
}

/**
 * Get the time remaining before logout.
 *
 * @return int
 *   Number of seconds remaining.
 */
function _dvg_digid_autologout_get_remaining_time() {
  $timeout = _dvg_digid_autologout_get_user_timeout();
  $time_passed = isset($_SESSION['autologout_last']) ? REQUEST_TIME - $_SESSION['autologout_last'] : 0;

  if ($timeout > $time_passed) {
    return $timeout - $time_passed;
  }

  return -1;
}

/**
 * Get a user's timeout in seconds.
 *
 * @param int $uid
 *   (Optional) Provide a user's uid to get the timeout for.
 *   Default is the logged in user.
 *
 * @return int
 *   The number of seconds the user can be idle for before being
 *   logged out. A value of 0 means no timeout.
 */
function _dvg_digid_autologout_get_user_timeout($uid = NULL) {

  if (is_null($uid)) {
    // If $uid is not provided, use the logged in user.
    global $user;
  }
  else {
    $user = user_load($uid);
  }

  if (_dvg_digid_logged_in($user)) {
    // Only DigiD user gets timeout.
    $timeout = variable_get('dvg_digid_autologout_timeout', 900);
    $max_timeout = variable_get('dvg_digid_autologout_max_session_time', '7200');
    if ($max_timeout > 0) {
      $session_max_end = $_SESSION['autologout_start'] + $max_timeout;
      if ($session_max_end >= REQUEST_TIME) {
        $time_remaining = $session_max_end - REQUEST_TIME;
        // If the next interval exceeds the max session time,
        // use the remainder as timeout.
        if ($timeout > $time_remaining) {
          return $time_remaining;
        }
      }
      else {
        return -1;
      }
    }
    return $timeout;
  }
  else {
    return 0;
  }

}

/**
 * Helper that determines if the session can be refreshed or not.
 */
function _dvg_digid_autologout_can_refresh() {
  global $user;
  if (_dvg_digid_logged_in($user)) {
    // Timeout can be refreshed if the remaining session time
    // is bigger than the standard timeout.
    $timeout = variable_get('dvg_digid_autologout_timeout', 900);
    $user_timeout = _dvg_digid_autologout_get_user_timeout();
    if ($timeout <= $user_timeout) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Helper to perform the actual logout.
 */
function _dvg_digid_autologout_logout() {
  global $user;

  if (variable_get('dvg_digid_autologout_use_watchdog', FALSE)) {
    watchdog('dvg_digid_autologout', 'Session automatically closed for %name by dvg_digid_autologout.', array('%name' => $user->name));
  }

  // Destroy the current session.
  module_invoke_all('user_logout', $user);
  session_destroy();

  // Load the anonymous user.
  $user = drupal_anonymous_user();
}

/**
 * Display the inactivity message if required.
 */
function _dvg_digid_autologout_inactivity_message() {
  $message = variable_get('dvg_digid_autologout_inactivity_message', '');
  if (!empty($message)) {
    drupal_set_message($message);
  }
  else {
    drupal_set_message(t('You have been logged out due to inactivity.'));
  }
}

/**
 * Determine if autologout should be prevented.
 *
 * @return bool
 *   TRUE if there is a reason not to autologout
 *   the current user on the current page.
 */
function _dvg_digid_autologout_prevent() {
  foreach (module_invoke_all('dvg_digid_autologout_prevent') as $prevent) {
    if (!empty($prevent)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Determine if connection should be refreshed.
 *
 * @return bool
 *   TRUE if something about the current context
 *   should keep the connection open. FALSE and
 *   the standard countdown to autologout applies.
 */
function _dvg_digid_autologout_refresh_only() {
  foreach (module_invoke_all('dvg_digid_autologout_refresh_only') as $module_refresh_only) {
    if (!empty($module_refresh_only)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_user_login().
 *
 * Delete stale sessions for the user on login. This stops
 * session_limit module thinking the user has reached their
 * session limit.
 */
function dvg_digid_autologout_user_login(&$edit, $account) {
  $_SESSION['autologout_start'] = REQUEST_TIME;

  // Cleanup old sessions.
  $timeout = _dvg_digid_autologout_get_user_timeout($account->uid);

  if ($timeout === 0) {
    // Users that don't get logged have their sessions left.
    return;
  }

  $timestamp = REQUEST_TIME - ($timeout);

  // Find all stale sessions.
  db_delete('sessions')
    ->condition('uid', $account->uid)
    ->condition('timestamp', $timestamp, '<')
    ->execute();
}
