<?php
/**
 * @file
 * Code for the Menu page Content Type feature.
 */

include_once 'dvg_ct_menu_page.features.inc';
include_once 'dvg_ct_menu_page.dvg.user_permission.inc';

/**
 * Implements hook_implements_alter().
 *
 * Makes sure the form_alters are run last.
 */
function dvg_ct_menu_page_module_implements_alter(&$implementations, $hook) {
  _dvg_global_module_implements_last('dvg_ct_menu_page', array('form_alter', 'form_node_form_alter'), $implementations, $hook);
}

/**
 * Implements hook_permission().
 *
 * Adds a custom permission that gives access to the menu.
 */
function dvg_ct_menu_page_permission() {
  $permissions = array();
  $menus = menu_get_menus();
  foreach ($menus as $menu_name => $menu_label) {
    $permissions['dvg administer ' . $menu_name] = array(
      'title' => t('Administer @menu', array('@menu' => $menu_label)),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu_alter().
 *
 * Changes the permissions of the menu admin pages.
 */
function dvg_ct_menu_page_menu_alter(&$items) {
  $override_uris = array(
    'admin/structure/menu/manage/%menu',
    'admin/structure/menu/manage/%menu/add',
    'admin/structure/menu/item/%menu_link/edit',
    // reset?
    'admin/structure/menu/item/%menu_link/delete',
  );

  foreach ($override_uris as $override_uri) {
    $items[$override_uri]['access callback'] = '_dvg_ct_menu_page_user_has_permissions_dvg_menu';
    // 4 = menu or menu-item.
    array_unshift($items[$override_uri]['access arguments'], 4);
  }

  $items['admin/structure/menus'] = array(
    'title' => 'Menus',
    'access callback' => 'user_access',
    'access arguments' => array('access administration pages'),
  );
  $items['admin/structure/menus/list'] = array(
    'title' => 'List',
    'access callback' => 'user_access',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // For the editors, add a dummy menu item that redirects to the correct menu page.
  $menus = menu_get_menus();
  $protected_menus = variable_get('dvg_protected_menus', array('devel', 'management', 'navigation'));
  foreach ($menus as $menu_name => $menu_label) {
    if (!in_array($menu_name, $protected_menus)) {
      $items['admin/structure/menus/menu-' . $menu_name] = array(
        'title' => $menu_label,
        'page callback' => 'drupal_goto',
        'page arguments' => array('admin/structure/menu/manage/' . $menu_name),
        'access callback' => 'dvg_ct_menu_page_menu_access',
        'access arguments' => array('dvg administer ' . $menu_name),
      );
    }
  }
}

/**
 * Custom menu access callback to prevent duplicate menu items for administrators.
 */
function dvg_ct_menu_page_menu_access($permission) {
  if (user_access('administer menu')) {
    return FALSE;
  }

  return user_access($permission);
}

/**
 * Access callback that checks for any permission.
 */
function _dvg_ct_menu_page_user_has_permissions_dvg_menu() {
  $permissions = func_get_args();
  $menu = array_shift($permissions);

  if (user_access('dvg administer ' . $menu['menu_name'])) {
    return TRUE;
  }

  return user_access('administer menu');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Activates the menu option by default.
 * Removes some fields for the editor.
 */
function dvg_ct_menu_page_form_node_form_alter(&$form, &$form_state) {
  global $user;

  if (isset($form['menu'])) {
    if (isset($form['field_menu_description'])) {
      // Remove menu options from additional settings
      unset($form['menu']['#group']);

      $form['menu']['#access'] = user_access('administer menu');
      if (!$form['menu']['#access']) {
        // Check for more specific permissions for the menus available to this node type.
        $node_menus = variable_get('menu_options_' . $form['#bundle']);

        foreach ($node_menus as $menu_name) {
          $form['menu']['#access'] = $form['menu']['#access'] || user_access('dvg administer ' . $menu_name);
        }
      }

      if ($form['#group_children']) {
        // Place menu options in same group as field_menu_description
        $form['#group_children']['menu'] = $form['#group_children']['field_menu_description'];
      }

      // Make menu options user-friendly
      if (user_access('administer menu') === FALSE) {
        $form['menu']['#type'] = 'container';
        $form['menu']['link']['parent']['#required'] = TRUE;
      }

      // Re-arrange fields
      $form['menu']['#weight'] = $form['field_menu_description']['#weight'] - 0.2;

      if (isset($form['field_menu_image'])) {
        $form['field_menu_image']['#weight'] = $form['field_menu_description']['#weight'] - 0.1;
      }
    }

    if (empty($form['#node']->nid)) {
      $form['menu']['enabled']['#default_value'] = 1;
    }

    $access = user_access('administer menu');

    // Hide menu options if super editor has disabled menu
    if (!in_array('super editor', $user->roles)) {
      $form['menu']['enabled']['#access'] = $access;
      if ($form['menu']['enabled']['#default_value'] == 0) {
        $form['menu']['#access'] = $access;
        $form['field_menu_description']['#access'] = $access;
        $form['field_menu_image']['#access'] = $access;
      }
    }

    $form['menu']['link']['link_title']['#access'] = $access;
    $form['menu']['link']['description']['#access'] = $access;
    $form['menu']['link']['weight']['#access'] = $access;

    $form['#process'][] = '_dvg_ct_menu_page_process_node_form';
  }
}

/**
 * Form process callback that sets required and/or states for the menu fields.
 */
function _dvg_ct_menu_page_process_node_form($form, $form_state) {
  if (!empty($form['menu'])) {
    $is_required = !empty($form_state['input']['menu']['enabled']);

    $form['field_menu_description'][LANGUAGE_NONE][0]['value']['#required'] = $is_required;

    $form['field_menu_description']['#states'] = array(
      'invisible' => array(
        'input[name="menu[enabled]"]' => array('checked' => FALSE),
      ),
      'required' => array(
        'input[name="menu[enabled]"]' => array('checked' => TRUE),
      ),
    );
    if (isset($form['field_menu_image'])) {
      $form['field_menu_image']['#states'] = array(
        'invisible' => array(
          'input[name="menu[enabled]"]' => array('checked' => FALSE),
        ),
      );
    }
  }

  return $form;
}

/**
 * Implements hook_node_submit().
 *
 * Always save the link_title with the value of title
 */
function dvg_ct_menu_page_node_submit($node, $form, &$form_state) {
  if (user_access('administer menu') === FALSE && isset($node->menu)) {
    $node->menu['link_title'] = $form_state['values']['title'];
    $node->menu['description'] = ''; // Must be set for menu_node_save()
  }
}

/**
 * Implements hook_theme().
 *
 * Defines a theme which overwrites a menu-link in the menu_block with id 1.
 * (Only theme-functions defined a theme are automatically found...)
 */
function dvg_ct_menu_page_theme() {
  $menu_function = array(
    'function' => 'dvg_ct_menu_page_menu_link__menu_block__dvg',
    'render element' => 'element',
  );

  return array(
    'menu_link__menu_block__menu_about' => $menu_function,
    'menu_link__menu_block__menu_organization' => $menu_function,
    'menu_link__menu_block__menu_tasks' => $menu_function,
    'menu_link__menu_block__menu_town_council' => $menu_function,
  );
}

/**
 * Theme function that renders a menu item, with a description.
 *
 * @see theme_menu_link().
 */
function dvg_ct_menu_page_menu_link__menu_block__dvg($variables) {
  $element = $variables['element'];
  $sub_menu = '';

  if (!empty($element['#below'])) {
    $sub_menu = drupal_render($element['#below']);
  }

  $link = l($element['#title'], $element['#href'], $element['#localized_options']);
  $menu_names = array('menu-about', 'menu-organization', 'menu-town-council');
  drupal_alter('dvg_ct_menu_page_heading_fix_menu_names', $menu_names);
  if (in_array($element['#original_link']['menu_name'], $menu_names) && $element['#original_link']['depth'] == 1) {
    $output = '<h3>' . $link . '</h3>';
  }
  else {
    $output = '<h2>' . $link . '</h2>';
  }

  $description = $image = '';
  if (isset($element['#href'])) {
    $node = menu_get_object('node', 1, $element['#href']);
    if ($node) {
      if (!empty($node->field_menu_description)) {
        $field = field_view_value('node', $node, 'field_menu_description', $node->field_menu_description[LANGUAGE_NONE][0]);
        if ($field) {
          $description = '<p class="description">' . render($field) . '</p>';
        }
      }

      // Show field_menu_image before field_menu_description if item is not in menu-tasks
      if ($element['#original_link']['menu_name'] != 'menu-tasks' && !empty($node->field_menu_image)) {
        $field = field_view_value('node', $node, 'field_menu_image', $node->field_menu_image[LANGUAGE_NONE][0], array(
          'settings' => array('image_style' => 'menu_image')
        ));
        if ($field) {
          $image = '<span class="photo">' . render($field) . '</span>';
        }
      }
    }
  }
  return '<li' . drupal_attributes($element['#attributes']) . '>' . $image . $output . $description . $sub_menu . "</li>\n";
}

/**
 * Implements hook_js_alter().
 *
 * Disable menu summary notices in additional_settings tab
 */
function dvg_ct_menu_page_js_alter(&$javascript) {
  if (user_access('administer menu') === FALSE) {
    unset($javascript[drupal_get_path('module', 'menu') . '/menu.js']);
  }
}
