<?php
/**
 * @file
 * Code for the Drupal voor gemeenten | Webform feature.
 */

include_once 'dvg_ct_webform.features.inc';
include_once 'dvg_ct_webform.dvg.user_permission.inc';

/**
 * Implements hook_module_implements_alter().
 */
function dvg_ct_webform_module_implements_alter(&$implementations, $hook) {
  _dvg_global_module_implements_last('dvg_ct_webform', array('form_alter', 'form_webform_component_edit_form_alter'), $implementations, $hook);
}

/**
 * Implements hook_permission().
 */
function dvg_ct_webform_permission() {
  return array(
    'view encrypted files' =>  array(
      'title' => t('View encrypted files'),
      'restrict access' => TRUE,
    ),
    'view own encrypted files' =>  array(
      'title' => t('View own encrypted files'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function dvg_ct_webform_menu_alter(&$items) {
  if (isset($items['system/' . ENCRYPTED_FILES_DIRECTORY])) {
    $items['system/' . ENCRYPTED_FILES_DIRECTORY]['access callback'] = 'dvg_ct_webform_file_access';
  }
}

/**
 * File access callback.
 */
function dvg_ct_webform_file_access($uri = NULL) {
  global $user;

  // Try to find the file uri by loading the request path.
  if (empty($uri)) {
    module_load_include('inc', 'encrypted_files', 'includes/encrypted_files.file');
    $path = request_path();
    $file = encrypted_files_load_file_by_uri($path);
    if (!$file) {
      return FALSE;
    }
    $uri = $file->uri;
  }

  // Grab the file-wrapper through the uri-scheme.
  $scheme = file_uri_scheme($uri);
  $wrapper = file_entity_get_stream_wrapper($scheme);
  if ($wrapper['class'] == 'EncryptedStreamWrapper') {
    if (user_access('view encrypted files')) {
      return TRUE;
    }

    module_load_include('inc', 'encrypted_files', 'includes/encrypted_files.file');
    $file = encrypted_files_load_file_by_uri($uri);
    if (!empty($user->uid) && $file && $file->uid == $user->uid && user_access('view own encrypted files')) {
      return TRUE;
    }

    // If anonymous and the fid is in it's current session, grant access to the file.
    // Makes it possible to preview the file before submitting an webform.
    if (user_is_anonymous() && $file && $file->uid == 0 && user_access('view own encrypted files')) {
      // In current session uploaded?
      if ( isset($_SESSION['webform_files']) && in_array($file->fid, $_SESSION['webform_files'])) {
        return TRUE;
      }
    }

    // Returning false for file_entity_access to not ignore this.
    return FALSE;
  }
}

/**
 * Implements hook_file_entity_access().
 *
 * @see dvg_ct_webform_file_access
 */
function dvg_ct_webform_file_entity_access($op, $file, $account) {
  if (module_exists('encrypted_files') && in_array($op, array('download', 'view')) && is_object($file)) {
    $file_access = dvg_ct_webform_file_access($file->uri);
    if ($file_access === TRUE) {
      return FILE_ENTITY_ACCESS_ALLOW;
    }
    elseif ($file_access === FALSE) {
      // Allow temporary access if the current request is a webform submit.
      if ($_SERVER['REQUEST_METHOD'] == 'POST') {
        $node = menu_get_object();
        if ($node && $node->type == 'webform') {
          if (isset($_POST['submitted'])) {
            foreach ($_POST['submitted'] as $field) {
              if (isset($field['fid']) and $field['fid'] == $file->fid) {
                return FILE_ENTITY_ACCESS_ALLOW;
              }
            }
          }
        }
      }
      return FILE_ENTITY_ACCESS_DENY;
    }
  }

  return FILE_ENTITY_ACCESS_IGNORE;
}

/**
 * Implements hook_mail_alter().
 *
 * Loads the decrypted file so that mimemail won't send the encrypted one.
 */
function dvg_ct_webform_mail_alter(&$message) {
  if ($message['module'] == 'webform' && $message['key'] == 'submission' && !empty($message['params']['attachments'])) {
    foreach ($message['params']['attachments'] as &$attachment) {
      // Older method with encrypt hash at files
      if (!empty($attachment['encrypted_files_hash'])) {
        $attachment['filecontent'] = file_get_contents($attachment['uri']);
        unset($attachment['uri'], $attachment['filepath']);
        // Newer method purely looking at the uri scheme
      }
      // Newer method purely looking at the uri scheme
      elseif (!empty($attachment['uri']) && substr($attachment['uri'], 0, 5) === "ef://") {
        $attachment['filecontent'] = file_get_contents($attachment['uri']);
        unset($attachment['uri'], $attachment['filepath']);
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function dvg_ct_webform_cron() {
  $expired = REQUEST_TIME - (variable_get('dvg_webform_expire_submission_days', 30) * 86400);
  $submissions = db_select('webform_submissions', 'ws')
    ->fields('ws', array('sid', 'nid'))
    ->condition('submitted', $expired, '<=')
    ->orderBy('submitted')
    ->execute();

  foreach ($submissions as $submission) {
    try {
      $webform = node_load($submission->nid);
      if ($webform) {
        $submission = webform_menu_submission_load($submission->sid, $webform->nid);
        if ($submission && dvg_ct_webform_submission_is_deletable($submission)) {
          webform_submission_delete($webform, $submission);
        }
      }
    }
    catch (Exception $e) {
      $msg = $e->getMessage();
      if ($msg == t('Decryption failed because the HMAC could not be validated.')) {
        watchdog('encrypt', 'The submission @sid of node @nid could not be loaded due to HMAC error.', array(
          '@nid' => $submission->nid,
          '@sid' => $submission->sid,
        ), WATCHDOG_CRITICAL);
      }
      else {
        throw $e;
      }
    }
  }
}

/**
 * Helper function to check if a submission can be safely deleted.
 *
 * Appointments with an appointment date in the future should never be deleted.
 *
 * @param object $submission
 *   The webform submission object.
 *
 * @return bool
 *   Returns whether the submissions can be safely deleted.
 */
function dvg_ct_webform_submission_is_deletable($submission) {
  if ($node = node_load($submission->nid)) {
    foreach ($node->webform['components'] as $cid => $component) {
      if ($component['type'] == 'wa_date_time') {
        // If the appointment date is in the future, prevent deletion.
        $appointment_datetime = $submission->data[$cid][0];
        if ($appointment_datetime > REQUEST_TIME) {
          return FALSE;
        }
      }
    }
  }
  return TRUE;
}

/**
 * Implements template_preprocess_webform_confirmation.
 *
 * Displays the custom Task confirmation text referenced through field_webform in CT Task.
 */
function dvg_ct_webform_preprocess_webform_confirmation(&$vars) {
  $node = isset($vars['node']) ? $vars['node'] : FALSE;

  // @todo: move to task feature
  $confirm_text = FALSE;
  if ($node && $task = _dvg_ct_webform_get_referenced_task_by_webform($node)) {
    $field_confirm_webform = field_get_items('node', $task, 'field_confirm_webform', $task->language);
    if (!empty($field_confirm_webform) && $field_confirm_webform[0]['value'] != '') {
      $confirm_text = check_markup($field_confirm_webform[0]['value'], $field_confirm_webform[0]['format']);
    }
  }

  if ($confirm_text) {
    $vars['confirm_text'] = $confirm_text;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function dvg_ct_webform_preprocess_page(&$variables) {
  if(isset($variables['node'])) {
    $node = $variables['node'];

    if ($node->type == 'webform') {
      $login = url('user/login', array('query' => drupal_get_destination()));
      $message = t('You must <a href="!login">login</a> to view this form.', array('!login' => $login));

      _dvg_global_remove_session_message($message, 'warning');
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Change the order of the Next page / Previous page buttons for better positioning.
 */
function dvg_ct_webform_form_alter(&$form, &$form_state, $form_id) {
  $node = isset($form['#node']) ? $form['#node'] : FALSE;
  if ($node && $node->type == 'webform') {

    // Add page number as form class for analytics on multi step forms.
    $page_num = 1;
    if (isset($form_state['webform']) && isset($form_state['webform']['page_num'])) {
      $page_num = $form_state['webform']['page_num'];
    }
    $step = 'step-' . $page_num;
    if (isset($node->nid)) {
      $nid = $node->nid;
      $form['#attributes']['class'][] = 'webform-' . $step;
      $form['#attributes']['class'][] = 'webform-nid-' . $nid . '-' . $step;
    }

    if (isset($form['actions']['previous'])) {
      $form['actions']['previous']['#weight'] = 15;
    }

    // Overwrite the default next button label.
    if (strpos($form_id, 'webform_client_form_') === 0) {
      $page_count = $form_state['webform']['page_count'];
      $page_num = $form_state['webform']['page_num'];

      if ($page_count > 1 && $page_num < $page_count) {
        foreach ($form_state['webform']['component_tree']['children'] as $cid => $component) {
          if ($component['type'] == 'pagebreak' && empty($component['extra']['next_page_label']) && $page_num == $component['page_num'] - 1) {
            $form['actions']['next']['#value'] = t('Next Page');
          }
        }
      }
    }

    // Hide empty preview fields.
    if (isset($node->webform['exclude_empty_preview']) &&
        $node->webform['exclude_empty_preview'] &&
        isset($form['preview']) &&
        isset($form['submitted'])
    ) {
      // Use values|submitted since we need values from all submitted pages.
      // Map them to component keys instead of cid to make the removal easier.
      $values = $form_state['values']['submitted'];
      $component_value_map = array();
      foreach ($node->webform['components'] as $cid => $component) {
        if (isset($values[$cid])) {
          $component_value_map[$component['form_key']] = $values[$cid];
        }
      }
      _dvg_ct_webform_remove_empty_preview_fields($form['preview'], $component_value_map);
    }

    if ($form_id == 'webform_email_edit_form') {
      // Remove 'send e-mail as HTML' checkbox
      unset($form['template']['html']);

      // Set default to TRUE: Send webform files as attachment
      if (!isset($form['eid']['#value'])) {
        $form['template']['attachments']['#default_value'] = 1;
      }
    }
  }
}

/**
 * Recursive function to remove all empty preview fields.
 *
 * @param $form_preview
 *    Webform components on the preview page or a child fieldset of components if recursion.
 * @param $component_value_map
 *    Array mapping the component keys to its value, only contains keys with a value.
 *
 * @return bool
 *    TRUE: Is empty, there are no children present with values.
 *    FALSE: Is not empty, there are children present with values.
 */
function _dvg_ct_webform_remove_empty_preview_fields(&$form_preview, $component_value_map) {
  foreach (element_children($form_preview) as $key) {
    if (
      // If component without value.
      (
        empty($component_value_map[$key]) ||
        (
          // Or array component without value.
          is_array($component_value_map[$key]) &&
          empty(array_filter($component_value_map[$key]))
        )
      ) &&
      // And it is not a fieldset or an empty fieldset.
      (
        !isset($form_preview[$key]['#type']) ||
        $form_preview[$key]['#type'] != 'fieldset' ||
        _dvg_ct_webform_remove_empty_preview_fields($form_preview[$key], $component_value_map)
      )
    ) {
      unset($form_preview[$key]);
    }
  }

  // Return if left over fields, to discover empty fieldsets.
  return count(element_children($form_preview)) == 0;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_ct_webform_form_webform_email_edit_form_alter(&$form, &$form_state) {
  if (empty($form['eid']['#value'])) {
    $form['template']['attachments']['#default_value'] = 1;

    $file_components = array();
    foreach ($form['#node']->webform['components'] as $cid => $component) {
      if ($component['type'] == 'file') {
        $file_components[] = $cid;
      }
    }

    if (!empty($file_components)) {
      $default_components = $form['template']['components']['#default_value'];
      $form['template']['components']['#default_value'] = array_diff($default_components, $file_components);
    }
  }

  // Wysiwyg editor is optional.
  if (variable_get('dvg_webform_templates_wysiwyg', 1) === 1) {
    // Add wysiwyg support for email templates.
    $form['template']['template']['#wysiwyg'] = TRUE;
    $form['template']['template']['#type'] = 'text_format';
    // We have a dedicated text format and ckeditor profile for HTML email.
    $form['template']['template']['#format'] = 'email_html';
    // Turn of the template switcher which does not work in wysiwyg mode.
    $form['template']['template_option']['#access'] = FALSE;
    // Unset default token browser which does not work with wysiwyg,
    // We use token insert.
    $form['template']['template']['#description'] = '';
    // Added submit handler in order to submit the correct value.
    $new_submit = array("dvg_ct_webform_wysiwyg_email_edit_form_submit");
    $form["#submit"] = array_merge($new_submit, $form["#submit"]);
  }
}

/**
 * Submit handler to fix our wysiwyg submit value.
 */
function dvg_ct_webform_wysiwyg_email_edit_form_submit($form, &$form_state) {
  $form_state['values']['template'] = $form_state['values']['template']['value'];
}

/**
 * Implements hook_node_presave().
 */
function dvg_ct_webform_node_presave($node) {
  if (isset($node->webform)) {
    $node->webform['submit_notice'] = 0;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Encrypt the component by default, if possible.
 * Set the hourformat default to 24-hour.
 */
function dvg_ct_webform_form_webform_component_edit_form_alter(&$form, &$form_state) {
  if (!empty($form['encryption']['encrypt'])) {
    $form['encryption']['encrypt']['#default_value'] = 1;
    $form['#validate'][] = 'dvg_ct_webform_webform_component_edit_form_validate';
  }
  if (!empty($form['display']['hourformat'])) {
    $form['display']['hourformat']['#default_value'] = '24-hour';
  }
  if (!empty($form['extra']['scheme'])) {
    if (empty($form['cid']['#value']) || empty($form['#node']->webform['components'][$form['cid']['#value']]['extra']['scheme'])) {
      $form['extra']['scheme']['#default_value'] = 'private';
      if (module_exists('encrypted_files')) {
        $form['extra']['scheme']['#default_value'] = 'ef';
      }
    }
  }
}

/**
 * Implements dvg_ct_webform_webform_component_edit_form_validate().
 */
function dvg_ct_webform_webform_component_edit_form_validate(&$form, &$form_state) {
  if (!empty($form['encryption']['encrypt'])) {
    $form_state['values']['encryption']['encrypt'] = 1;
  }
}

/**
 * Implements hook_dvg_requirements().
 */
function dvg_ct_webform_dvg_requirements() {
  $requirements = array();

  $config = encrypt_get_default_config();
  $encrypt_key = encrypt_get_key_from_key_provider($config['provider'], $config['provider_settings']);

  $requirements['dvg_webform_encrypt_key'] = array(
    'title' => t('Webform encrypt key'),
  );
  if (!empty($encrypt_key)) {
    $requirements['dvg_webform_encrypt_key']['value'] = t('Ok');
    $requirements['dvg_webform_encrypt_key']['severity'] = REQUIREMENT_OK;
  }
  else {
    $requirements['dvg_webform_encrypt_key']['value'] = l(t('Configure encrypt settings.'), 'admin/config/system/encrypt');
    $requirements['dvg_webform_encrypt_key']['severity'] = REQUIREMENT_ERROR;
  }

  return $requirements;
}

/**
 * Helper function to get the task referencing the current webform.
 *
 * @todo: move to task feature
 */
function _dvg_ct_webform_get_referenced_task_by_webform($webform) {
  if (!module_exists('dvg_ct_task')) {
    return;
  }

  $cache = &drupal_static(__FUNCTION__);
  if (isset($cache[$webform->nid])) {
    return $cache[$webform->nid];
  }

  // Check if the webform exists and is published.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'task')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_webform', 'target_id', $webform->nid)
    ->propertyOrderBy('created', 'ASC')
    ->range(0, 1);
  $result = $query->execute();
  if (isset($result['node'])) {
    $task_nid = key($result['node']);
    $task = node_load($task_nid);
    if ($cache[$webform->nid] = $task) {
      return $cache[$webform->nid];
    }
  }

  return FALSE;
}

/**
 * Implements hook_file_validate().
 *
 * Rename encrypted files with a unique id.
 */
function dvg_ct_webform_file_validate($file) {
  if (isset($file->destination) && strpos($file->destination, 'ef://') === 0) {
    $file_parts = explode('.', $file->filename);
    $ext = (sizeof($file_parts) > 1) ? '.' . $file_parts[sizeof($file_parts) - 1] : '';

    $file->filename = uniqid('attachment-', TRUE) . $ext;
    $file->destination = 'ef://' . $file->filename;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_ct_webform_form_webform_configure_form_alter(&$form, &$form_state, $form_id) {
  $node = &$form['#node'];

  // Add weights to the advanced form elements.
  $weight = 0;
  foreach (element_children($form['advanced']) as $child) {
    $form['advanced'][$child]['#weight'] = $weight++;
  }

  $form['advanced']['hide_back_to_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide \'@title\' link', array('@title' => t('Go back to the form'))),
    '#description' => t('Hide the link on the confirmation page.'),
    '#default_value' => $node->webform['hide_back_to_form'],
    '#weight' => $form['advanced']['submit_text']['#weight'] - 0.1,
  );

  $form['preview']['exclude_empty_items_preview'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude empty fields in preview'),
    '#description' => t('Hide empty fields on preview page'),
    '#default_value' => $node->webform['exclude_empty_preview'],
  );

  array_unshift($form['#submit'], 'dvg_ct_webform_webform_configure_form_submit');
}

/**
 * Submit handler for webform_configure_form().
 */
function dvg_ct_webform_webform_configure_form_submit(&$form, &$form_state) {
  $node = $form['#node'];
  $node->webform['hide_back_to_form'] = (int) $form_state['values']['hide_back_to_form'];
  $node->webform['exclude_empty_preview'] = (int) $form_state['values']['exclude_empty_items_preview'];
}

/**
 * Implements template_preprocess_webform_confirmation.
 *
 * Hide 'back to form' url.
 */
function dvg_preprocess_webform_confirmation(&$vars) {
  if (isset($vars['node']->webform['hide_back_to_form'])) {
    $vars['hide_back_to_form'] = (bool) $vars['node']->webform['hide_back_to_form'];
  }
}
