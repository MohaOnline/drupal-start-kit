<?php
/**
 * @file
 * Code for the Global feature.
 */

include_once 'dvg_global.features.inc';
include_once 'dvg_global.helpers.inc';
include_once 'dvg_global.block.inc';
include_once 'dvg_global.form.inc';
include_once 'dvg_global.token.inc';
include_once 'dvg_global.entity.inc';
include_once 'dvg_global.admin.inc';
include_once 'dvg_global.requirements.inc';
include_once 'dvg_global.dvg.user_permission.inc';

/**
 * Implements hook_admin_paths().
 */
function dvg_global_admin_paths() {
  $paths = array(
    'node/*/revisions' => TRUE,
    'taxonomy/term/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_menu().
 */
function dvg_global_menu() {
  $items['admin/config/content/texts'] = array(
    'title' => 'Texts',
    'description' => 'Manage default texts.',
    'access arguments' => array('dvg_global administer texts'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dvg_global.admin.inc',
    'file path' => drupal_get_path('module', 'dvg_global'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dvg_global_texts'),
  );

  $items['admin/reports/dvg-status'] = array(
    'title' => 'DVG status report',
    'description' => 'Get a status report about your DVG installation and any detected problems',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dvg_global.admin.inc',
    'file path' => drupal_get_path('module', 'dvg_global'),
    'page callback' => 'dvg_global_status_report',
    'weight' => -59,
  );

  $items['admin/config/content/testdata'] = array(
    'title' => 'Testdata',
    'description' => 'Manage testdata.',
    'access callback' => 'dvg_global_access_testdata',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dvg_global.admin.inc',
    'file path' => drupal_get_path('module', 'dvg_global'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dvg_global_testdata'),
  );

  $items['503-page'] = array(
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page callback' => 'dvg_global_503_page',
  );

  return $items;
}

function dvg_global_access_testdata() {
  if (count(dvg_global_testdata_items()) > 0 && user_access('dvg_global administer texts')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function dvg_global_menu_alter(&$items) {
  $items['taxonomy/term/%taxonomy_term']['access callback'] = 'dvg_global_disable_term_page_node_listing';
  $items['taxonomy/term/%taxonomy_term']['access arguments'] = array(2);
  unset($items['taxonomy/term/%taxonomy_term/feed']);

  // Separate user settings from administer users.
  foreach (array(
   'admin/config/people/accounts/fields',
   'admin/config/people/accounts/display',
   'admin/config/people/accounts',
   'admin/people/permissions',
   'admin/people/permissions/roles',
  ) as $path) {
    $items[$path]['access callback'] = 'user_access';
    $items[$path]['access arguments'] = array('administer site configuration');
  }

  // Hide redirect settings for the super editor.
  $items['admin/config/search/redirect/settings']['access arguments'] = array('administer site configuration');

  // Prevent editing root and other administrators by the super editor.
  $items['user/%user/edit']['access callback'] = 'dvg_global_user_edit_access';
  $items['user/%user/cancel']['access callback'] = 'dvg_global_user_cancel_access';
}

/**
 * Implements hook_menu_block_blocks().
 *
 * Provide menu blocks for the DvG menus.
 */
function dvg_global_menu_block_blocks() {
  $blocks = array(
    MENU_TREE__CURRENT_PAGE_MENU => array(
      'menu_name'      => MENU_TREE__CURRENT_PAGE_MENU,
      'parent_mlid'    => 0,
      'parent'         => '_active:0',
      'title_link'     => FALSE,
      'admin_title'    => 'Active menu',
      'level'          => 2,
      'depth'          => variable_get('dvg_global_active_menu_depth', 2),
      'depth_relative' => 1,
      'follow'         => 1,
    ),
  );

  // Additional menus.
  $menu_names = array(
    'menu-tasks',
    'menu-about',
    'menu-organization',
  );
  drupal_alter('dvg_global_menu_block_menu_names', $menu_names);

  // Add menu blocks.
  $menus = menu_get_menus();
  foreach ($menu_names as $menu_name) {
    $blocks[$menu_name] = array(
      'menu_name'   => $menu_name,
      'parent_mlid' => 0,
      'title_link'  => FALSE,
      'admin_title' => $menus[$menu_name],
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 1,
      'expanded'    => FALSE,
      'sort'        => FALSE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_language_negotiation_info().
 */
function dvg_global_language_negotiation_info() {
  return array(
    'dvg_global_root_language' => array(
      'name' => t('Root always English'),
      'description' => t('The root user will always have the English language. All other users get the next negotiation option.'),
      'callbacks' => array(
        'language' => 'dvg_global_root_language_provider_callback',
      ),
      'file' => drupal_get_path('module', 'dvg_global') . '/dvg_global.module',
      'weight' => -10,
      'types' => array('language'),
    ),
  );
}

/**
 * Language negotiation callback for dvg_global_root_language.
 */
function dvg_global_root_language_provider_callback($languages) {
  global $user;

  if ($user->uid == 1) {
    return 'en';
  }

  return FALSE;
}

/**
 * Implements hook_token_info().
 */
function dvg_global_token_info() {
  return array(
    'types' => array(
      'dvg' => array(
        'name' => t('Drupal voor Gemeenten'),
        'description' => t('All custom DvG tokens.'),
      ),
    ),
  );
}

/**
 * Taxonomy term access callback.
 */
function dvg_global_disable_term_page_node_listing($term) {
  $permission = 'view term page in ' . $term->vocabulary_machine_name;

  return user_access($permission);
}

/**
 * Implements hook_permission().
 */
function dvg_global_permission() {
  $permissions = array();

  // Taxonomy permissions.
  foreach (taxonomy_get_vocabularies() as $vocabulary) {
    $permissions['view term page in ' . $vocabulary->machine_name] = array(
      'title' => t('View term pages in %vocabulary', array('%vocabulary' => $vocabulary->name)),
    );
  }

  // Administration permissions.
  $permissions['dvg_global administer testdata'] = array('title' => t('Administer testdata'));
  $permissions['dvg_global administer texts'] = array('title' => t('Administer texts'));
  $permissions['dvg_global administer functional content'] = array('title' => t('Administer functional content'));

  return $permissions;
}

/**
 * Implements hook_element_info_alter().
 */
function dvg_global_element_info_alter(&$types) {
  foreach (linkit_get_allowed_field_elements() as $element) {
    if (isset($types[$element])) {
      $types[$element]['#process'][] = 'dvg_global_linkit_process_field_element';
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function dvg_global_preprocess_html(&$variables) {
  $node = menu_get_object('node');
  if ($node) {
    // Allow modules to fetch the menu information of the node.
    module_invoke_all('node_prepare', $node);

    if ($node->menu['mlid'] && !empty($node->menu['menu_name'])) {
      $variables['classes_array'][] = drupal_clean_css_identifier('body-' . $node->menu['menu_name']);
    }
  }
}

/**
 * Translates taxonomy vocabulary labels.
 */
function _dvg_global_taxonomy_vocabulary_label($term, $entity_type) {
  return t($term->name);
}

/**
 * Implements hook_date_format_types().
 */
function dvg_global_date_format_types() {
  // Define the core date format types.
  return array(
    'dvg_short_date' => t('DVG Short Date'),
    'dvg_short_date_time' => t('DVG Short Date Time'),
    'dvg_long_date' => t('DVG Long Date'),
  );
}

/**
 * Implements hook_date_format_types_alter().
 */
function dvg_global_date_format_types_alter(&$types) {
  $types['dvg_short_date']['locked'] = 1;
  $types['dvg_short_date_time']['locked'] = 1;
  $types['dvg_long_date']['locked'] = 1;
}

/**
 * Implements hook_date_formats().
 */
function dvg_global_date_formats() {
  return array(
    array(
      'type' => 'dvg_short_date',
      'format' => 'j M Y',
      'locales' => array('nl'),
    ),
    array(
      'type' => 'dvg_short_date_time',
      'format' => 'j M Y - H:i',
      'locales' => array('nl'),
    ),
    array(
      'type' => 'dvg_long_date',
      'format' => 'j F Y',
      'locales' => array('nl'),
    ),
    array(
      'type' => 'short',
      'format' => 'd-m-Y - H:i',
      'locales' => array('nl'),
    ),
    array(
      'type' => 'medium',
      'format' => 'D, d-m-Y - H:i',
      'locales' => array('nl'),
    ),
    array(
      'type' => 'long',
      'format' => 'l, j. F Y - G:i',
      'locales' => array('nl'),
    ),
  );
}

/**
 * Implements hook_strongarm_export_value_alter().
 */
function dvg_global_strongarm_export_value_alter(&$value, $name) {
  foreach (array_keys(node_type_get_types()) as $content_type) {
    if ($name == 'node_options_' . $content_type && !module_exists('dvg_revisioning')) {

      // @Todo: this always adds the revision_moderation option, instead of checking the possible override in the feature.
      if (($index = array_search('revision_moderation', $value)) === FALSE) {
        $value[] = 'revision_moderation';
      }
    }
  }
}

/**
 * Implements hook_strongarm_import_value_alter().
 */
function dvg_global_strongarm_import_value_alter(&$value, $name) {
  foreach (array_keys(node_type_get_types()) as $content_type) {
    if ($name == 'node_options_' . $content_type && !module_exists('dvg_revisioning') && ($index = array_search('revision_moderation', $value)) !== FALSE) {
      unset($value[$index]);
      $value = array_values($value);
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function dvg_global_module_implements_alter(&$implementations, $hook) {
  _dvg_global_module_implements_last('dvg_global', array('element_info', 'element_info_alter'), $implementations, $hook);
}

/**
 * Implements hook_process_field_element().
 *
 * Make the Linkit Search buttons translatable.
 * @see linkit_process_field_element()
 */
function dvg_global_linkit_process_field_element($element, &$form_state, &$complete_form) {
  // Only proceed if the field is attached to an entity.
  if (!isset($element['#entity_type'])) {
    return $element;
  }

  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  if (isset($element['#field_suffix']) && isset($instance['settings']['linkit']['enable']) && $instance['settings']['linkit']['enable']) {
    $matches = array();
    if (preg_match('/>([^<]+)</', $element['#field_suffix'], $matches)) {
      $element['#field_suffix'] = str_replace($matches[1], t($matches[1]), $element['#field_suffix']);
    }
  }

  return $element;
}

/**
 * Implements hook_functional_content().
 */
function dvg_global_functional_content() {
  return array(
    '#group' => array(
      'label' => t('Front page'),
    ),
    'dvg_global__front_about__nid' => array(
      'label' => t('About introduction page'),
      'description' => t('Enter the related node ID of the page.') . '<br>' . t('This page will be placed above the %menu menu.', array('%menu' => t('About'))),
    ),
    'dvg_global__front_organization__nid' => array(
      'label' => t('Organization introduction page'),
      'description' => t('Enter the related node ID of the page.') . '<br>' . t('This page will be placed above the %menu menu.', array('%menu' => t('Organization'))),
    ),
  );
}

/**
 * Access override for editing users.
 *
 * See user_edit_access()
 */
function dvg_global_user_edit_access($account) {
  global $user;

  // Root user has all access.
  if ($user->uid == 1) {
    return TRUE;
  }

  // Only admins can edit admins.
  elseif ($account->uid == 1 || (in_array('administrator', $account->roles) && !in_array('administrator', $user->roles))) {
    return FALSE;
  }

  // Fallback to default behavior.
  return user_edit_access($account);
}

/**
 * Access override for cancelling users.
 *
 * See user_cancel_access()
 */
function dvg_global_user_cancel_access($account) {
  global $user;

  // Root user has all access.
  if ($user->uid == 1) {
    return TRUE;
  }

  // Only admins can edit admins.
  elseif ($account->uid == 1 || (in_array('administrator', $account->roles) && !in_array('administrator', $user->roles))) {
    return FALSE;
  }

  // Fallback to default behavior.
  return user_cancel_access($account);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dvg_global_preprocess_image(&$variables) {
  if (is_null($variables['alt'])) {
    $variables['alt'] = '';
  }
}

/**
 * Implements hook_mail_alter().
 *
 * Adds a tab character before every line-ending inside a plain text message
 * because MS Outlook 2012 and lower can't render line breaks without it.
 *
 * @see http://stackoverflow.com/a/1638608
 */
function dvg_global_mail_alter(&$message) {
  if (variable_get('dvg_global_mail_alternative_line_endings', FALSE) && isset($message['params']['plaintext'])) {
    $message['params']['plaintext'] = str_replace(PHP_EOL, "\t" . PHP_EOL, $message['params']['plaintext']);
  }
}

/**
 * Implements hook_page_build().
 */
function dvg_global_page_build(&$page) {
  global $theme_key;

  if ($theme_key == 'adminimal') {
    drupal_add_css(drupal_get_path('module', 'dvg_global') . '/css/adminimal_theme_fix.css', array(
      'group' => CSS_THEME,
      'media' => 'all',
      'weight' => 2,
    ));
  }
}

/**
 * Implementation of hook_html_head_alter().
 *
 * Remove RSS link from HEAD on taxonomy term pages.
 */
function dvg_global_html_head_alter(&$head_elements) {
  if (drupal_match_path(current_path(), 'taxonomy/term/*')) {
    foreach ($head_elements as $key => $element) {
      if (isset($element['#attributes']['rel']) && $element['#attributes']['rel'] == 'alternate') {
        unset($head_elements[$key]);
      }
    }
  }
  // Removing version number from meta tag and header (audit requirement).
  $generator = 'Drupal';
  $head_elements['system_meta_generator']['#attributes']['content'] = $generator;
  $head_elements['system_meta_generator']['#attached']['drupal_add_http_header'][0][1] = $generator;
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function dvg_global_theme_registry_alter(&$theme_registry) {
  $theme_registry['feed_icon']['function'] = 'dvg_global_theme_feed_icon';
}

/**
 * Overriding theme_feed_icon().
 *
 * Remove the icon from the taxonomy term pages.
 */
function dvg_global_theme_feed_icon($variables) {
  if (drupal_match_path(current_path(), 'taxonomy/term/*')) {
    return '';
  }

  return theme_feed_icon($variables);
}

/**
 * Implements hook_pathauto_alias_alter().
 *
 * Force all aliases to be saved as language neutral.
 */
function dvg_global_pathauto_alias_alter(&$alias, array &$context) {
  // If the site is multi-lingual, this should not be forced.
  if (!module_exists('i18n_menu')) {
    $context['language'] = LANGUAGE_NONE;
  }
}

/**
 * Implements hook_custom_theme().
 *
 * @see https://yoast.com/http-503-site-maintenance-seo/
 */
function dvg_global_custom_theme() {
  if (array_filter(module_invoke_all('dvg_global_plain_theme'))) {

    // Suppress the admin menu on 503-pages.
    if (module_exists('admin_menu')) {
      admin_menu_suppress();
    }

    // Set the custom theme.
    return variable_get('dvg_global_plain_theme', 'dvg_plain_theme');
  }
}

/**
 * Implements hook_dvg_global_plain_theme().
 */
function dvg_global_dvg_global_plain_theme() {
  if (current_path() == '503-page') {
    return TRUE;
  }
}

/**
 * Custom page to deliver the custom 503 content.
 */
function dvg_global_503_page() {
  $noindex_meta_tag = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'robots',
      'content' => 'noindex, nofollow',
    ),
  );
  drupal_add_html_head($noindex_meta_tag, 'dvg_global_503_page');

  drupal_set_title(variable_get('dvg_global_503_page_title', '503 Service Temporary unavailable'));
  if ($content = variable_get('dvg_global_503_page_body', FALSE)) {
    return check_markup($content['value'], $content['format']);
  }

  return '';
}
/**
 * Implements hook_variable_group_info().
 */
function dvg_global_variable_group_info() {
  $groups['texts'] = array(
    'title' => t('Texts'),
    'access' => 'dvg_global administer texts',
    'path' => array('admin/config/content/texts'),
  );

  return $groups;
}

/**
 * Implements hook_variable_info().
 */
function dvg_global_variable_info($options) {

  $variables = array();

  // Add the footer texts.
  $variables['dvg_custom__footer_texts'] = array(
    'type' => 'string',
    'title' => t('Footer texts', array(), $options),
    'default' => '',
    'description' => t('Texts shown in the site footer.', array(), $options),
    'localize' => TRUE,
    'group' => 'texts',
  );

  return $variables;
}
