<?php
/**
 * @file
 * Code for the Media Types feature.
 */

include_once 'dvg_media_file_types.features.inc';
include_once 'dvg_media_file_types.dvg.user_permission.inc';

/**
 * Implements hook_permission().
 *
 * Adds a custom permission that gives access to admin/files/thumbnails.
 */
function dvg_media_file_types_permission() {
  $permissions = array(
    'administer files thumbnails' => array(
      'title' => t('Administer files thumbnails'),
    ),
    'use media browser library' => array(
      'title' => t('Use media browser library'),
    ),
    'use media browser my library' => array(
      'title' => t('Use media browser my library'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu_alter().
 *
 * Removes the 'thumbnails'-overview of files.
 */
function dvg_media_file_types_menu_alter(&$items) {
  $items['admin/content/file/thumbnails']['access arguments'] = array('administer files thumbnails');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the file type description after the file type name.
 */
function dvg_media_file_types_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id) {
  if ($form['#step'] == 2 && isset($form['type']['#options'])) {
    foreach ($form['type']['#options'] as $key => $value) {
      $type = file_type_load($key);

      $form['type']['#options'][$key] = check_plain(t($value));
      $form['type'][$key]['#description'] = check_plain(t($type->description));
    }
  }
}

/**
 * Implements hook_file_download_headers_alter().
 *
 * Change Content-Disposition 'attachment' to 'inline',
 * forcing the browser to decide on how to open the file.
 */
function dvg_media_file_types_file_download_headers_alter(&$headers, $file) {
  $headers['Content-Disposition'] = 'inline; filename="' . rawurlencode($file->filename) . '"';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Provides integration with the File Entity 'IMAGE' by adding the
 * crop functionality to the file edit form.
 * Place a better description for image replacement.
 */
function dvg_media_file_types_form_file_entity_edit_alter(&$form, &$form_state) {
  if (isset($form['replace_upload']) && $form['#bundle'] == 'dvg_image') {
    $form['replace_upload']['#description'] = t('Make sure that the replaced image file has the same or bigger dimensions as the original image. After replacement, re-apply all croppings.');
  }
}

/**
 * Implements hook_field_display_ENTITY_TYPE_alter().
 */
function dvg_media_file_types_preprocess_field(&$variables) {
  $element = $variables['element'];

  if ($element['#field_name'] == 'field_file_url') {
    $file = $element['#object'];
    $field = field_get_items('file', $file, 'field_file_url');

    if ($field[0]['title'] == $field[0]['url']) {
      $variables['label_hidden'] = TRUE;
      $variables['items'][0]['#element']['title'] = $variables['label'];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_media_file_types_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#bundle']) && $form['#bundle'] == 'image_license') {
    $form['description']['#access'] = FALSE;
    $form['relations']['#access'] = FALSE;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function dvg_media_file_types_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['file_link'])) {
    $theme_registry['file_link']['function'] = '_dvg_media_file_types_file_link';
  }
  if (isset($theme_registry['file_entity_download_link'])) {
    $theme_registry['file_entity_download_link']['function'] = '_dvg_media_file_types_file_entity_download_link';
  }
  if (isset($theme_registry['webform_display_file'])) {
    $theme_registry['webform_display_file']['function'] = '_dvg_media_file_types_webform_display_file';
  }
}

/**
 * Implements theme_file_link().
 */
function _dvg_media_file_types_file_link($variables) {
  $file = $variables['file'];
  $url = file_create_url($file->uri);

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
    ),
  );

  // Add class to encrypted files.
  if (file_uri_scheme($file->uri) == 'ef') {
    $options['attributes']['class'][] = 'encrypted-file';
  }
  else {
    $options['attributes']['class'][] = 'link-file';
  }

  // Open in new tab, unless dvg_open_files_new_tab is set to FALSE.
  if (variable_get("dvg_open_files_new_tab", TRUE)) {
    $options['attributes']['target'] = array('_blank');
  }

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }

  // Add span with filetype inside link for theming
  // instead of pseudo for greater
  // browser support.
  $file_parts = pathinfo($url);
  if (!empty($file_parts['extension'])) {
    $options['html'] = TRUE;
    $extension = $file_parts['extension'];
    $link_text = '<span class="file type-' . $extension . '">' . $extension . ' </span>' . $link_text;
  }

  return l($link_text, $url, $options);
}

/**
 * Implements theme_file_entity_download_link().
 *
 * Removed icon (prefix) and file size (suffix) from original and added classes.
 */
function _dvg_media_file_types_file_entity_download_link($variables) {
  $file = $variables['file'];
  $uri = file_entity_download_uri($file);

  // Provide the default link text.
  if (!isset($variables['text'])) {
    $variables['text'] = t('[file:name] ([file:type], [file:size])');
  }

  // Perform unsanitized token replacement if $uri['options']['html'] is empty
  // since then l() will escape the link text.
  $variables['text'] = token_replace($variables['text'], array('file' => $file), array(
    'clear' => TRUE,
    'sanitize' => !empty($uri['options']['html']),
  ));

  $uri['options']['attributes']['class'] = array('link-file');
  $uri['options']['html'] = TRUE;
  // Open in new tab, unless dvg_open_files_new_tab is set to FALSE.
  if (variable_get("dvg_open_files_new_tab", TRUE)) {
    $uri['options']['attributes']['target'] = array('_blank');
  }

  // If the editor changes the text via the WYSIWYG editor, don't override it.
  if (!empty($file->filename) && strpos($file->filename, 'type-pdf') !== FALSE) {
    $output = '<span class="file">' . l($file->filename, $uri['path'], $uri['options']) . '</span>';
  }
  else {
    $fileinfo = pathinfo($file->uri);
    $icon = '<strong class="file file-ext-' . drupal_clean_css_identifier($fileinfo['extension']) . ' type-' . drupal_clean_css_identifier($file->type) . '">' . $fileinfo['extension'] . '</strong> ';
    $info = ' (' . strtoupper($fileinfo['extension']) . ', ' . format_size($file->filesize) . ')';
    $output = '<span class="file">' . l($icon . $variables['text'] . $info, $uri['path'], $uri['options']) . '</span>';
  }

  return $output;
}

/**
 * Format the output of text data for this component.
 */
function _dvg_media_file_types_webform_display_file($variables) {
  $element = $variables['element'];

  $file = $element['#value'];
  if (!empty($file)) {
    $options = array(
      'attributes' => array(
        'type' => $file->filemime . '; length=' . $file->filesize,
      ),
    );
    // Add class to encrypted files.
    if ($element['#webform_component']['extra']['scheme'] == 'ef') {
      $options['attributes']['class'][] = 'encrypted-file';
    }
    else {
      $options['attributes']['class'][] = 'link-file';
    }
    // Open in new tab, unless dvg_open_files_new_tab is set to FALSE.
    if (variable_get("dvg_open_files_new_tab", TRUE)) {
      $options['attributes']['target'] = array('_blank');
    }
    $url = !empty($file) ? webform_file_url($file->uri) : t('no upload');
    return $element['#format'] == 'text' ? $url : l($file->filename, $url, $options);
  }
  else {
    return ' ';
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function dvg_media_file_types_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes'] += array(
    'custom_crop' => array(
      'label' => t('Custom crop'),
      'custom settings' => TRUE,
    ),
  );
}
