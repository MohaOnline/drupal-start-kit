<?php

/**
 * @todo:
 * - strtotime>timestamp>strtotime>etc
 * - date is niet nodig: is date van start time
 * - helper tabel verwijderen? -> data in submission?
 * - encryptie
 * - verplichte volgorde velden, page-breaks, etc
 * - verwijderen velden verhinderen voor de afspraak-forms
 * - configureerbare middag/avond tijden
 * - product/email componenten niet emailen/tonen/selecteerbaar in preview/submission/etc
 * - appointment submission niet editten
 */

define('DVG_APPOINTMENTS_ERRORCODE_UNKNOWN', 1);
define('DVG_APPOINTMENTS_ERRORCODE_DATE_TIME', 2);
define('DVG_APPOINTMENTS_ERRORCODE_MESSAGE', 3);

/**
 * Implements hook_menu().
 */
function dvg_appointments_menu() {
  $items = array();

  $items['admin/config/services/dvg_appointments'] = array(
    'title' => 'DvG Appointments',
    'description' => 'Configure the back-end for the appointment module',
    'access arguments' => array('administer site config'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dvg_appointments_admin_form'),
    'file' => 'dvg_appointments.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 */
function dvg_appointments_module_implements_alter(&$implementations, $hook) {
  _dvg_global_module_implements_first('dvg_appointments', array('webform_submission_presave', 'webform_submission_load'), $implementations, $hook);
  _dvg_global_module_implements_first('webform_encrypt', array('webform_submission_load'), $implementations, $hook);
  _dvg_global_module_implements_last('dvg_appointments', array('form_alter'), $implementations, $hook);
}

/**
 * Factory method that asks sub-modules for an api client object.
 *
 * @return AppointmentsClientApi
 */
function dvg_appointments_get_client_api() {
  $api_client = dvg_appointments_get_client_class();

  if (!$api_client) {
    throw new Exception('No appointment API client found.');
  }

  return new $api_client();
}

/**
 * Return the class name of the current api client.
 *
 * @return AppointmentsClientApi|NULL
 *   Class name only.
 */
function dvg_appointments_get_client_class() {
  $client_class = NULL;

  $modules = module_invoke_all('dvg_appointments_api_client');
  $api_client = variable_get('dvg_appointments_api_client', FALSE);
  if ($api_client && isset($modules[$api_client])) {
    /** @var AppointmentsClientApi $client_api */
    $client_class = $modules[$api_client]['class'];
  }

  return $client_class;
}

/**
 * Implements hook_functional_content().
 */
function dvg_appointments_functional_content() {
  return array(
    '#group' => array(
      'label' => t('DvG Appointments'),
    ),
    'dvg_appointments_create' => array(
      'label' => t('Create appointment'),
      'description' => t('The webform to create an appointment'),
    ),
    'dvg_appointments_cancel' => array(
      'label' => t('Cancel appointment'),
      'description' => t('The webform to cancel an appointment'),
    ),
  );
}

/**
 * Implements hook_dvg_requirements().
 */
function dvg_appointments_dvg_requirements() {
  $requirements = array();

  $requirements['dvg_appointments_client_api'] = array(
    'title' => t('Appointments Client API'),
  );
  $modules = module_invoke_all('dvg_appointments_api_client');
  $api_client = variable_get('dvg_appointments_api_client', FALSE);
  if (!$api_client || !isset($modules[$api_client])) {
    $requirements['dvg_appointments_client_api']['value'] = t('There is no Appointment Client API set.');
    $requirements['dvg_appointments_client_api']['severity'] = REQUIREMENT_ERROR;
  }
  else {
    $requirements['dvg_appointments_client_api']['value'] = $modules[$api_client]['name'];
    $requirements['dvg_appointments_client_api']['severity'] = REQUIREMENT_OK;
  }


  $fc_forms = array(
    'dvg_appointments_create' => array(
      'label' => t('Create appointment'),
      'has_mapping' => TRUE,
      'req_components' => array(
        'wa_product',
        'wa_date_time',
      ),
    ),
    'dvg_appointments_cancel' => array(
      'label' => t('Cancel appointment'),
      'has_mapping' => FALSE,
      'req_components' => array(
        'wa_appointment',
      ),
    ),
  );

  foreach ($fc_forms as $fc_key => $fc_info) {
    $requirements['dvg_appointments_' . $fc_key] = array(
      'title' => $fc_info['label'],
      'value' => t('Ok'),
      'severity' => REQUIREMENT_OK,
    );

    $nid = functional_content_nid($fc_key);
    if (empty($nid)) {
      $requirements['dvg_appointments_' . $fc_key]['value'] = t('No webform node found. !create_link and !fc_link.', array(
        '!create_link' => l(t('Create a webform'), 'node/add/webform'),
        '!fc_link' => l(t('configure functional content'), 'admin/config/content/functional-content'),
      ));
      $requirements['dvg_appointments_' . $fc_key]['severity'] = REQUIREMENT_ERROR;
    }
    else {
      if (count($fc_info['req_components'])) {
        $node = node_load($nid);
        $components = array();
        foreach ($node->webform['components'] as $component) {
          $components[] = $component['type'];
        }
        $not_included_components = array_diff($fc_info['req_components'], $components);
        if (!empty($not_included_components)) {
          $requirements['dvg_appointments_' . $fc_key]['value'] = t('No appointment components configured in the !configure_link.', array(
            '!configure_link' => l(t('webform'), 'node/' . $nid . '/webform'),
          ));
          $requirements['dvg_appointments_' . $fc_key]['severity'] = REQUIREMENT_ERROR;
        }
        elseif ($fc_info['has_mapping'] && (empty($node->webform['appointment_enabled']) || empty($node->webform['appointment_mapping']))) {
          $requirements['dvg_appointments_' . $fc_key]['value'] = t('No field mapping configured in the !configure_link.', array(
            '!configure_link' => l(t('webform'), 'node/' . $nid . '/webform/configure'),
          ));
          $requirements['dvg_appointments_' . $fc_key]['severity'] = REQUIREMENT_ERROR;
        }
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_webform_component_info().
 */
function dvg_appointments_webform_component_info() {
  $components = array();

  $components['wa_product'] = array(
    'label' => t('Appointment product'),
    'description' => t('Appointment product selection.'),
    'features' => array(
      'required' => TRUE,
    ),
  );
  $components['wa_location'] = array(
    'label' => t('Appointment location'),
    'description' => t('Appointment location.'),
    'file' => 'components/wa_location.inc',
    'features' => array(
      'required' => TRUE,
    ),
  );
  $components['wa_date_time'] = array(
    'label' => t('Appointment date/time'),
    'description' => t('Appointment date/time selection.'),
    'features' => array(
      'required' => TRUE,
    ),
  );
  $components['wa_appointment'] = array(
    'label' => t('Appointment'),
    'description' => t('Loads an appointment.'),
    'features' => array(
      'required' => TRUE,
    ),
  );
  $components['wa_email'] = array(
    'label' => t('Appointment email'),
    'description' => t('Loads an email address from an appointment.'),
    'features' => array(
      'email_address' => TRUE,
      'required' => TRUE,
    ),
  );

  return $components;
}

/**
 * Implements hook_wfm_compatible_components().
 *
 * Replaces all other compatible components with just the wa_product component.
 */
function dvg_appointments_wfm_compatible_components_alter(&$types) {
  $types = array('wa_product');
}

/**
 * Implements _webform_defaults_COMPONENT().
 */
function _webform_defaults_wa_product() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'required' => 0,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'options' => '',
      'questions' => '',
      'optrand' => 0,
      'qrand' => 0,
      'description' => '',
      'private' => FALSE,
      'analysis' => TRUE,
    ),
  );
}

/**
 * Implements _webform_defaults_COMPONENT().
 */
function _webform_defaults_wa_date_time() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'required' => 0,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'options' => '',
      'questions' => '',
      'optrand' => 0,
      'qrand' => 0,
      'description' => '',
      'private' => FALSE,
      'analysis' => TRUE,
    ),
  );
}

/**
 * Implements _webform_edit_COMPONENT().
 */
function _webform_defaults_wa_appointment() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'required' => 0,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'options' => '',
      'questions' => '',
      'optrand' => 0,
      'qrand' => 0,
      'description' => '',
      'private' => FALSE,
      'analysis' => TRUE,
    ),
  );
}

/**
 * Implements _webform_edit_COMPONENT().
 */
function _webform_edit_wa_product($component) {
  $form = array();

  // Disabling the description if not wanted.
  $form['extra']['description'] = array();

  return $form;
}

/**
 * Implements _webform_edit_COMPONENT().
 */
function _webform_edit_wa_date_time($component) {
  return array('extra' => array());
}

/**
 * Implements _webform_edit_COMPONENT().
 */
function _webform_edit_wa_appointment($component) {
  return array('extra' => array());
}

/**
 * Implements _webform_edit_COMPONENT().
 */
function _webform_edit_wa_email($component) {
  return array('extra' => array());
}

/**
 * Implements _webform_submit_COMPONENT().
 */
function _webform_submit_wa_product($component, $value) {
  if (!module_exists('wfm') || !_wfm_is_multiple($component)) {
    $value = array($value);
  }

  return $value;
}

/**
 * Implements _webform_submit_COMPONENT().
 */
function _webform_submit_wa_date_time($component, $value) {
  return $value['wa_date_time'];
}

/**
 * Implements _webform_submit_COMPONENT().
 */
function _webform_submit_wa_appointment($component, $value) {
  return $value['wa_appointment'];
}

/**
 * Implements _webform_display_COMPONENT().
 */
function _webform_display_wa_product($component, $values, $format = 'html') {
  if (isset($values['product'])) {
    $values = array($values);
  }

  $client = dvg_appointments_get_client_api();
  $products = $client->get_filtered_available_products();
  $display = array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#required' => $component['required'],
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
  );

  foreach ($values as $value) {
    $product = $products[$value['product']];
    if ($format == 'html') {
      $display_value = theme('table', array(
        'rows' => array(
          array(t('Product'), $product['name']),
          array(t('Number of persons'), $value['count']),
        ),
      ));
    }
    else {
      $display_value = t('Product') . ' = ' . $product['name'] . "\n" . t('Number of persons') . ' = ' . $value['count'];
    }

    $display[] = array(
      '#format' => $format,
      '#markup' => $display_value,
      '#parents' => array(FALSE),
      '#value' => $value,
    );
  }

  return $display;
}

/**
 * Implements _webform_display_COMPONENT().
 */
function _webform_display_wa_date_time($component, $value, $format = 'html') {
  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#required' => $component['required'],
    '#theme' => 'webform_display_textfield',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => isset($value[0]) ? dvg_appointments_format_date($value[0], 'day_date_time') : '',
  );
}

/**
 * Implements _webform_display_COMPONENT().
 */
function _webform_display_wa_appointment($component, $value, $format = 'html') {
  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#required' => $component['required'],
    '#theme' => 'dvg_appointments',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => $value,
  );
}

/**
 * Implements _webform_display_COMPONENT().
 */
function _webform_display_wa_email($component, $value, $format = 'html') {
  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#required' => $component['required'],
    '#theme' => 'webform_display_textfield',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => isset($value[0]) ? $value[0] : '',
  );
}

/**
 * Implements _webform_render_COMPONENT().
 */
function _webform_render_wa_product($component, $value = NULL, $filter = TRUE) {
  $form_item = array(
    '#type' => 'wa_product',
    '#title' => $filter ? webform_filter_xss($component['name']) : $component['name'],
    '#required' => $component['required'],
    '#weight' => $component['weight'],
    '#description'   => $filter ? webform_filter_descriptions($component['extra']['description']) : $component['extra']['description'],
    '#default_value' => $filter ? webform_replace_tokens($component['value']) : $component['value'],
    '#prefix' => '<div class="webform-component-textfield" id="webform-component-' . $component['form_key'] . '">',
    '#suffix' => '</div>',
  );

  if (!empty($value)) {
    $form_item['#default_value'] = $value;
  }

  return $form_item;
}

/**
 * Implements _webform_render_COMPONENT().
 */
function _webform_render_wa_date_time($component, $value = NULL, $filter = TRUE) {
  $form_item['wa_date_time'] = array(
    '#type' => 'wa_date_time',
    '#title' => $filter ? webform_filter_xss($component['name']) : $component['name'],
    '#required' => $component['required'],
    '#weight' => $component['weight'],
    '#description'   => $filter ? webform_filter_descriptions($component['extra']['description']) : $component['extra']['description'],
    '#default_value' => $filter ? webform_replace_tokens($component['value']) : $component['value'],
    '#prefix' => '<div class="webform-component-textfield" id="webform-component-' . $component['form_key'] . '">',
    '#suffix' => '</div>',
  );

  if (isset($value) && !empty($value[0])) {
    $form_item['wa_date_time']['#default_value'] = $value[0];
  }

  return $form_item;
}

/**
 * Implements _webform_render_COMPONENT().
 */
function _webform_render_wa_appointment($component, $value = NULL, $filter = TRUE) {
  $form_item['wa_appointment'] = array(
    '#type' => 'wa_appointment',
    '#title' => $filter ? webform_filter_xss($component['name']) : $component['name'],
    '#required' => $component['required'],
    '#weight' => $component['weight'],
    '#description'   => $filter ? webform_filter_descriptions($component['extra']['description']) : $component['extra']['description'],
    '#default_value' => $filter ? webform_replace_tokens($component['value']) : $component['value'],
    '#prefix' => '<div class="webform-component-textfield" id="webform-component-' . $component['form_key'] . '">',
    '#suffix' => '</div>',
  );

  if (isset($value)) {
    $form_item['wa_appointment']['#default_value'] = $value;
  }

  return $form_item;
}

/**
 * Implements _webform_render_COMPONENT().
 */
function _webform_render_wa_email($component, $value = NULL, $filter = TRUE) {
  return array('#type' => 'value');
}

/**
 * Implements hook_webform_submission_presave().
 *
 * Serializes the data of the wa_product component.
 */
function dvg_appointments_webform_submission_presave($node, &$submission) {
  $wa_product = dvg_appointments_get_cid($node, 'wa_product');
  $wa_appointment = dvg_appointments_get_cid($node, 'wa_appointment');
  $wa_email = dvg_appointments_get_cid($node, 'wa_email');

  if ($wa_product) {

    // Move the appointment data out of the submission data to prevent errors on the submission display.
    $submission->dvg_appointments = $submission->data[$wa_product]['appointments'];
    unset($submission->data[$wa_product]['appointments']);

    foreach ($submission->data[$wa_product] as $dcid => $data) {
      $submission->data[$wa_product][$dcid] = serialize($data);
    }
  }
  if ($wa_appointment && $wa_email) {
    $submission->data[$wa_email][0] = $submission->data[$wa_appointment]['email'];
  }
}

/**
 * Tie the appointment to a webform submission.
 *
 * Implements hook_webform_submission_insert().
 */
function dvg_appointments_webform_submission_insert($node, $submission) {
  if ($wa_product = dvg_appointments_get_cid($node, 'wa_product')) {
    $data = $submission->dvg_appointments;
    /** @var DvGAppointment $appointment */
    $appointment = $data['appointment'];
    $appointment->setNodeId($submission->nid);
    $appointment->setSubmissionId($submission->sid);
    dvg_appointments_store_appointment($appointment);
  }
}

/**
 * Save an appointment.
 *
 * Updates the appointment when it has a local id, inserts otherwise.
 *
 * @param \DvgAppointment $appointment
 *   The appointment.
 */
function dvg_appointments_store_appointment(DvgAppointment $appointment) {
  $UTC = new DateTimeZone('UTC');

  $start = clone $appointment->getStart();
  $end = clone $appointment->getEnd();

  $record = (object) array(
    'nid' => $appointment->getNodeId(),
    'sid' => $appointment->getSubmissionId(),
    'id' => $appointment->getId(),
    'appointment_start' => $start->setTimezone($UTC)->format('Y-m-d H:i:s'),
    'appointment_end' => $end->setTimezone($UTC)->format('Y-m-d H:i:s'),
  );

  $keys = array();
  if ($appointment->getId()) {
    $keys = array('id');
  }

  if (drupal_write_record('dvg_appointments_appointments', $record, $keys) == SAVED_NEW) {
    $appointment->setId($record->id);
  }
  elseif (count($keys)) {
    db_delete('dvg_appointments_products')
      ->condition('local_id', $appointment->getId())
      ->execute();
    db_delete('dvg_appointments_remote_ids')
      ->condition('local_id', $appointment->getId())
      ->execute();
  }

  foreach ($appointment->getRemoteAppointmentIds() as $remote_id) {
    $record = (object) array(
      'local_id' => $appointment->getId(),
      'remote_id' => $remote_id,
    );
    drupal_write_record('dvg_appointments_remote_ids', $record);
  }

  foreach ($appointment->getProductIds() as $product_id) {
    $record = (object) array(
      'local_id' => $appointment->getId(),
      'product' => $product_id,
      'count' => $appointment->getProductCount($product_id),
      'duration' => $appointment->getProductDuration($product_id),
      'additional_customer_duration' => $appointment->getProductAdditionalCustomerDuration($product_id),
    );
    drupal_write_record('dvg_appointments_products', $record);
  }
}

/**
 * Load an appointment.
 *
 * @param int $id
 *   Local id of the appointment to load.
 *
 * @return bool|\DvgAppointment
 *   FALSE if not found a DvgAppointment otherwise.
 */
function dvg_appointments_load_appointment($id) {
  $appointment = FALSE;
  $result = db_query('SELECT id, nid, sid, appointment_start, appointment_end FROM {dvg_appointments_appointments} WHERE id = :id', array(':id' => $id))
    ->fetch();
  if ($result) {
    $appointment = new DvgAppointment();

    $appointment->setId($result->id);
    $appointment->setNodeId($result->nid);
    $appointment->setSubmissionId($result->sid);

    $UTC = new DateTimeZone('UTC');
    $appointment->setStart(DateTime::createFromFormat('Y-m-d?H:i:s', $result->appointment_start, $UTC));
    $appointment->setEnd(DateTime::createFromFormat('Y-m-d?H:i:s', $result->appointment_end, $UTC));
    // Add remotes.
    $remotes = db_query('SELECT remote_id FROM {dvg_appointments_remote_ids} WHERE local_id = :id', array(
      ':id' => $id,
    ));
    foreach ($remotes as $remote) {
      $appointment->addRemoteAppointmentId($remote->remote_id);
    }
    // Add products.
    $products = db_query('SELECT product, count, duration, additional_customer_duration FROM {dvg_appointments_products} WHERE local_id = :id', array(
      ':id' => $id,
    ));
    foreach ($products as $product) {
      $appointment->addProduct($product->product, $product->count, $product->duration, $product->additional_customer_duration);
    }
  }
  return $appointment;
}

/**
 * Delete a local appointment.
 *
 * @param int $id
 *   The local appointment id.
 */
function dvg_appointments_delete_appointment($id) {
  db_delete('dvg_appointments_products')
    ->condition('local_id', $id)
    ->execute();
  db_delete('dvg_appointments_remote_ids')
    ->condition('local_id', $id)
    ->execute();
  db_delete('dvg_appointments_appointments')
    ->condition('id', $id)
    ->execute();
}


/**
 * Implements hook_webform_submission_load().
 *
 * Unserializes the data of the wa_product component.
 */
function dvg_appointments_webform_submission_load(&$submissions) {
  foreach ($submissions as $submission) {
    $node = node_load($submission->nid);
    if (!$node) {
      continue;
    }

    foreach ($node->webform['components'] as $cid => $component) {
      if ($component['type'] == 'wa_product' && !empty($submission->data[$cid])) {
        foreach ($submission->data[$cid] as $dcid => $data) {
          $submission->data[$cid][$dcid] = unserialize($data);
        }
      }
      if ($component['type'] == 'wa_appointment' && !empty($submission->data[$cid])) {
        $submission->data[$cid]['appointment'] = unserialize($submission->data[$cid]['appointment']);
      }
    }
  }
}

/**
 * Implements hook_field_info().
 */
function dvg_appointments_field_info() {
  return array(
    'wa_product' => array(
      'label' => 'Appointment product',
      'description' => 'add todo', // todo description
      'default_widget' => 'wa_product',
      'default_formatter' => 'wa_product', // todo
      'default_token_formatter' => 'wa_product', // todo
    ),
    'wa_date_time' => array(
      'label' => 'Appointment date/time',
      'description' => 'add todo', // todo description
      'default_widget' => 'wa_date_time',
      'default_formatter' => 'wa_date_time', // todo
      'default_token_formatter' => 'wa_date_time', // todo
    ),
    'wa_appointment' => array(
      'label' => 'Appointment date/time',
      'description' => 'add todo', // todo description
      'default_widget' => 'wa_appointment',
      'default_formatter' => 'wa_appointment', // todo
      'default_token_formatter' => 'wa_appointment', // todo
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function dvg_appointments_field_widget_info() {
  return array(
    'wa_product' => array(
      'label' =>  t('Appointment product'),
      'field types' => array('wa_product'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    'wa_location' => array(
      'label' =>  t('Appointment location'),
      'field types' => array('wa_location'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    'wa_date_time' => array(
      'label' =>  t('Appointment date/time'),
      'field types' => array('wa_date_time'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    'wa_appointment' => array(
      'label' =>  t('Appointment'),
      'field types' => array('wa_appointment'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function dvg_appointments_element_info() {
  return array(
    'wa_product' => array(
      '#input' => TRUE,
      '#delta' => 0,
      '#columns' => array('product', 'count'),
      '#process' => array('dvg_appointments_product_element_process'),
      '#element_validate' => array('dvg_appointments_product_element_validate'),
      '#theme_wrappers' => array('dvg_appointments_product'),
    ),
    'wa_location' => array(
      '#input' => TRUE,
      '#delta' => 0,
      '#process' => array('dvg_appointments_location_element_process'),
      '#element_validate' => array('dvg_appointments_location_element_validate'),
      '#theme_wrappers' => array('dvg_appointments_location'),
    ),
    'wa_date_time' => array(
      '#input' => TRUE,
      '#delta' => 0,
      '#process' => array('dvg_appointments_date_time_element_process'),
      '#element_validate' => array('dvg_appointments_date_time_element_validate'),
      '#theme_wrappers' => array('dvg_appointments_date_time'),
    ),
    'wa_appointment' => array(
      '#input' => TRUE,
      '#delta' => 0,
      '#process' => array('dvg_appointments_load_element_process'),
      '#element_validate' => array('dvg_appointments_load_element_validate'),
    ),
  );
}

/**
 * Element process callback for the wa_product elements.
 */
function dvg_appointments_product_element_process($element, &$form_state, $form) {
  $client = dvg_appointments_get_client_api();
  $product_options = array('' => t('Select a product'));
  $invisible_values = array(array('value' => ''));

  $available_products = $client->get_filtered_available_products();
  // Let other modules lookup the appointment.
  drupal_alter('dvg_appointments_available_products', $available_products, $element, $form_state, $form);

  foreach ($available_products as $product) {
    $product_options[$product['id']] = $product['name'];

    if (isset($product['max_persons']) && $product['max_persons'] == 1) {
      $invisible_values[] = array('value' => strval($product['id']));
    }
  }

  $element['product'] = array(
    '#type' => 'select',
    '#title' => t('Product'),
    '#required' => TRUE,
    '#options' => $product_options,
    '#attributes' => array('class' => array('wa-product-product')),
  );

  if (!empty($element['#default_value']['product'])) {
    $element['product']['#default_value'] = $element['#default_value']['product'];
  }
  elseif (isset($_GET['product_code']) && isset($product_options[$_GET['product_code']])) {
    $element['product']['#default_value'] = $_GET['product_code'];
  }

  $element['count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of persons'),
    '#required' => TRUE,
    '#size' => 4,
    '#maxlength' => 4,
    '#default_value' => !empty($element['#default_value']['count']) ? $element['#default_value']['count'] : 1,
    '#element_validate' => array('element_validate_integer_positive'),
    '#attributes' => array('class' => array('wa-product-count')),
  );

  if (count($invisible_values) > 1) {
    $element['count']['#states']['invisible'] = array(
      ':input[name="' . $element['#name'] . '[product]"]' => $invisible_values,
    );

    $element['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'dvg_appointments' => array(
          $element['#name'] . '[count]' => TRUE,
        ),
      ),
    );

  }

  $element['#element_validate'][] = '_dvg_appointments_element_validate_person_count';

  return $element;
}

/**
 * Form element validation handler for a maximum person count.
 */
function _dvg_appointments_element_validate_person_count($element, &$form_state) {
  $client = dvg_appointments_get_client_api();
  $max_persons = $client->get_max_persons();
  $count = $element['count']['#value'];
  $product_id = $element['product']['#value'];
  if ($count !== '' && is_numeric($count)) {
    $products = $client->get_available_products();
    if (isset($products[$product_id]) && isset($products[$product_id]['max_persons'])) {
      $max_persons = (int)$products[$product_id]['max_persons'];
    }
    if ((int)$count > $max_persons) {
      form_error($element['count'], t('%name has a maximum of %max_persons.', array('%name' => $element['count']['#title'], '%max_persons' => $max_persons)));
    }
  }
}

/**
 * Helper for formatting dates and times in the Appointments module.
 */
function dvg_appointments_format_date($time, $type, $format = '') {
  $api_client = dvg_appointments_get_client_api();

  switch ($type) {
    case 'time':
      $date_formatted = format_date($time, 'custom', 'H:i', $api_client->get_timezone());
      break;
    case 'date':
      $date_formatted = format_date($time, 'custom', 'd-m-Y', $api_client->get_timezone());
      break;
    case 'day_date':
      $date_formatted = format_date($time, 'custom', 'l, j F Y', $api_client->get_timezone());
      break;
    case 'day_date_time':
      $date_formatted = format_date($time, 'custom', 'l, j F Y H:i', $api_client->get_timezone());
      break;
    case 'year':
      $date_formatted = format_date($time, 'custom', 'Y', $api_client->get_timezone());
      break;
    default:
      $date_formatted = format_date($time, $type, $format, $api_client->get_timezone());
      break;
  }

  return $date_formatted;
}

/**
 * Helper function that fetches the selected products from the form_state.
 */
function dvg_appointments_get_selected_products($form_state, $form) {
  $client_api = dvg_appointments_get_client_api();
  $products = array();

  $cid = dvg_appointments_get_cid($form['#node'], 'wa_product');
  if ($cid && !empty($form_state['storage']['submitted'][$cid])) {
    $available_products = $client_api->get_available_products();
    foreach ($form_state['storage']['submitted'][$cid] as $value) {
      if (isset($value['product']) && !empty($value['product'])) {
        $products[] = $available_products[$value['product']] + array('count' => $value['count']);
      }
    }
    return $products;
  }

  return array();
}

/**
 * Helper function that fetches the selected location from the form_state.
 */
function dvg_appointments_get_selected_location($form_state, $form) {
  $location = FALSE;

  $cid = dvg_appointments_get_cid($form['#node'], 'wa_location');
  if ($cid && !empty($form_state['storage']['submitted'][$cid][0])) {
    $location = $form_state['storage']['submitted'][$cid][0];
  }

  return $location;
}

/**
 * Helper function that fetches the selected products from the form_state.
 */
function dvg_appointments_get_selected_slot($form_state, $form) {
  $cid = dvg_appointments_get_cid($form['#node'], 'wa_date_time');
  if ($cid && !empty($form_state['storage']['submitted'][$cid][0])) {
    return $form_state['storage']['submitted'][$cid][0];
  }

  return FALSE;
}

/**
 * Element process callback for the wa_date_time elements.
 */
function dvg_appointments_date_time_element_process($element, &$form_state, $form) {
  $client_api = dvg_appointments_get_client_api();
  $selected_products = dvg_appointments_get_selected_products($form_state, $form);
  $selected_location = dvg_appointments_get_selected_location($form_state, $form);
  $product_link_ids = $product_names = $products_durations = $persons = array();
  foreach ($selected_products as $selected_product) {
    $product_id = $selected_product['id'];

    $product_link_ids[] = $product_id;
    $product_names[] = '<strong>' . check_plain($selected_product['name']) . '</strong>';
    $persons[$product_id] = $selected_product['count'];
    if (isset($selected_product['additional_customer_duration']) && $selected_product['count'] > 1) {
      $total_product_duration = $selected_product['duration'] + $selected_product['additional_customer_duration'] * ($selected_product['count'] - 1);
    }
    else {
      $total_product_duration = $selected_product['duration'] * $selected_product['count'];
    }
    $products_durations[$product_id] = $total_product_duration;

    $rows[] = array(
      'product_name' => $selected_product['name'],
      'duration' => $total_product_duration,
    );
  }

  $last_product = array_pop($product_names);
  $product_text = $product_names ? implode(', ', $product_names) . ' ' . t('and') . ' ' . $last_product : $last_product;
  $total_duration = array_sum($products_durations);

  $output_info = '<div class="duration"><p>' . t('You are booking an appointment for !product_text. This appointment takes about <strong>@total_duration minutes</strong>.', array(
      '!product_text' => $product_text,
      '@total_duration' => $total_duration,
    )) . '</p></div>';

  $element['header'] = array(
    '#markup' => '<h2>' . t("Choose a date and time") . '</h2>' . $output_info,
  );

  drupal_alter('dvg_appointments_date_time', $client_api, $form_state);

  $dates_all = _dvg_appointments_load_date_time_dates($element, $form_state, $product_link_ids, $products_durations, $persons, $selected_location);
  $dates = array();
  foreach ($dates_all as $unic_id => $date_array) {
    if ($unic_id == 0 || $date_array[0]['date'] != $dates_all[$unic_id - 1][0]['date']) {
      $dates[$date_array[0]['date']] = array();
    }
    $dates[$date_array[0]['date']][$unic_id] = $date_array[0]['time'];
  }
  ksort($dates);
  $full_date = $element['slots'] = array();
  $timezone = new DateTimeZone($client_api->get_timezone() ? $client_api->get_timezone() : drupal_get_user_timezone());

  $afternoon_start_hour = variable_get('dvg_appointments_afternoon_start_hour', '12');
  $evening_start_hour = variable_get('dvg_appointments_evening_start_hour', '18');

  foreach ($dates as $date => $time_array) {
    $unix_date = strtotime($date);
    $morning_time = array();
    $midday_time = array();
    $evening_time = array();
    $full_time = array();

    $options = array('' => t('-- Select time --'));

    foreach ($time_array as $time) {

      if (strpos($time, 'T') === FALSE) {
        $unix_time = strtotime(dvg_appointments_format_date($unix_date, 'custom', 'Y-m-d') . 'T' . $time);
      } else {
        $unix_time = date("U", strtotime($time));
        $parts = explode('T', $time);
        $time = $parts[1];
      }

      $datetime = new DateTime($time, $timezone);
      $hour = (int) $datetime->format('H');

      $index = $unix_time;
      if ($hour < $afternoon_start_hour) {
        $morning_time[$index] = dvg_appointments_format_date($unix_time, 'time');
      }
      elseif ($hour < $evening_start_hour) {
        $midday_time[$index] = dvg_appointments_format_date($unix_time, 'time');
      }
      else {
        $evening_time[$index] = dvg_appointments_format_date($unix_time, 'time');
      }

      if (!empty($morning_time)) {
        $full_time['morning'] = TRUE;
        $options[t('Morning')] = $morning_time;
      }
      if (!empty($midday_time)) {
        $full_time['midday'] = TRUE;
        $options[t('Midday')] = $midday_time;
      }
      if (!empty($evening_time)) {
        $full_time['evening'] = TRUE;
        $options[t('Evening')] = $evening_time;
      }
    }

    $element['slots'][] = array(
      '#title' => t('Time'),
      '#title_display' => 'invisible',
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $element['#default_value'],
    );

    $full_date[] = array(
      'date' => $unix_date,
      'date_time' => $full_time,
    );
  }

  $element['appointments_full_date'] = array(
    '#type' => 'value',
    '#value' => $full_date,
  );

  return $element;
}

/**
 * Helper for loading the dates used for filling the wa_date_time webform component.
 */
function _dvg_appointments_load_date_time_dates($element, $form_state, $product_ids, $products_durations, $persons, $location = FALSE) {
  $client_api = dvg_appointments_get_client_api();
  $overrides = module_invoke_all('appointment_date_overrides');

  // Location has been set and the location should be used in the client.
  if ($location) {
    $client_api->set_location($location);
  }

  // Default dates.
  $dates = $client_api->get_dates_times($product_ids, $products_durations, $persons);
  if (!empty($overrides) && is_array($overrides)) {
    // Loop through all overrides and if the form has a date value ask the available times for that date from the API.
    foreach ($overrides as $possible_value) {
      if (isset($form_state['input'][$possible_value])
        && !empty($form_state['input'][$possible_value])
        && dvg_appointment_validate_date($form_state['input'][$possible_value])) {
        $date = new DateTime($form_state['input'][$possible_value], new DateTimeZone(drupal_get_user_timezone()));
        // Adding 12 hours because DvG appointments doesn't handle ISO timezones well.
        $time = $date->format('U') + 60 * 60 * 12;
        $date = date('c', $time);
        $new_date = $client_api->get_times_by_date($product_ids, $products_durations, $persons, $date);
        $dates = array_merge_recursive($dates, $new_date);
      }
    }
  }
  $slots_element = $form_state['values'];
  foreach ($element['#parents'] as $form_key) {
    if (!isset($slots_element[$form_key])) {
      $slots_element = NULL;
      break;
    }
    $slots_element = $slots_element[$form_key];
  }
  if (isset($slots_element)) {
    if (!empty($slots_element) && !is_array($slots_element)) {
      $date = date('c', $slots_element);
      // Strip the time of date.
      // Otherwise its unique in the array of dates.
      $date = substr($date, 0, strpos($date, 'T')) . 'T00:00:00Z';
      $submitted_date = $client_api->get_times_by_date($product_ids, $products_durations, $persons, $date);
      $dates = array_merge_recursive($dates, $submitted_date);
    }
  }

  return $dates;
}

/**
 * Validate $date is a date and has the correct format.
 *
 * @param string $date
 *   The possible date.
 * @param string $format
 *   The date format.
 *
 * @return bool
 *   If the date exists and is valid.
 */
function dvg_appointment_validate_date($date, $format = 'Y-m-d') {
  $d = DateTime::createFromFormat($format, $date);
  return $d && $d->format($format) == $date;
}

/**
 * Element process callback for the wa_appointment elements.
 */
function dvg_appointments_load_element_process($element, &$form_state, $form) {
  $element['appointment_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Appointment id'),
    '#required' => TRUE,
    '#default_value' => isset($element['#default_value']['appointment_id']) ? $element['#default_value']['appointment_id'] : '',
  );

  $element['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#required' => TRUE,
    '#default_value' => isset($element['#default_value']['email']) ? $element['#default_value']['email'] : '',
  );

  return $element;
}

/**
 * Element validate callback for the wa_product elements.
 */
function dvg_appointments_product_element_validate($element, &$form_state) {
  $clash_found = FALSE;
  $products = array();
  $form_key = $element['#webform_component']['form_key'];

  if (module_exists('wfm') && _wfm_is_multiple($element['#webform_component']) && !empty($form_state['values']['submitted'][$form_key])) {
    foreach ($form_state['values']['submitted'][$form_key] as $index => $product) {
      if (isset($product['product']) && !empty($product['product'])) {
        if (isset($products[$product['product']])) {
          $clash_found = TRUE;
        }
        $products[$product['product']] = $product;
      }
    }
    if ($clash_found) {
      form_error($element['product'], t('Product must be unique'));
    }
  }
}

/**
 * Helper to set the error state on all slots.
 */
function _dvg_appointments_date_time_error(&$element, $message, $ignore_value = TRUE) {
  form_set_error('wa_date_time', $message);

  foreach (element_children($element['slots']) as $child) {
    $slot = $element['slots'][$child];

    if (!empty($slot['#value']) || $ignore_value) {
      form_error($element['slots'][$child]);
    }
  }
}

/**
 * Element validate callback for the wa_date_time elements.
 */
function dvg_appointments_date_time_element_validate($element, &$form_state) {
  if (end($form_state['clicked_button']['#parents']) == 'previous') {
    return;
  }

  $slots = array();
  $slots_element = $form_state['values'];
  foreach ($element['#parents'] as $form_key) {
    if (!isset($slots_element[$form_key])) {
      $slots_element = NULL;
      break;
    }
    $slots_element = $slots_element[$form_key];
  }
  if (isset($slots_element) && is_array($slots_element['slots'])) {
    $submitted_slots = $slots_element['slots'];
    foreach ($submitted_slots as $index => $value) {
      if (!empty($value) && is_numeric($value)) {
        $slots[$index] = $value;
      }
    }
  }

  // Validate, and set errors.
  $slot_count = count($slots);
  if (!$slot_count) {
    _dvg_appointments_date_time_error($element, t('No time selected.'));
  }
  elseif ($slot_count > 1) {
    _dvg_appointments_date_time_error($element, t('Only one selection possible.'), FALSE);
  }

  // Set the selected values as element value.
  drupal_array_set_nested_value($form_state['values'], $element['#array_parents'], array_values($slots));
}

function dvg_appointments_load_element_validate($element, &$form_state) {
  if (!valid_email_address($element['email']['#value'])) {
    form_error($element['email'], t('Invalid e-mail address.'));
  }

  // Flood control.
  $threshold = variable_get('dvg_appointments_flood_threshold', FALSE);
  $timeout = variable_get('dvg_appointments_flood_timeout', 15) * 60;
  if ($threshold) {
    if (!flood_is_allowed('dvg_appointments_cancel', $threshold, $timeout)) {
      form_error($element['appointment_id'], t('Too many failed attempts. Please try again later.'));
      return;
    }
  }

  // Don't check the appointment if there are already errors present.
  if (form_get_errors()) {
    return;
  }

  $appointment = dvg_appointments_load_appointment($element['appointment_id']['#value']);

  // Let other modules lookup the appointment.
  drupal_alter('dvg_appointments_cancel_appointment', $appointment, $element['appointment_id']['#value']);

  $client_api = dvg_appointments_get_client_api();

  $remote_appointment = FALSE;

  if ($appointment) {
    $remote_ids = $appointment->getRemoteAppointmentIds();
    $remote_id = current($remote_ids);

    // Validate email in one of the remote appointments.
    $remote_appointment = $client_api->get_customer_appointments(array(
      'email' => $element['email']['#value'],
      'appointment_id' => $remote_id,
      'appointment' => $appointment,
    ));
  }

  if (!$remote_appointment) {
    form_error($element['appointment_id'], t('There is no appointment with this ID or the entered email is not correct.'));

    // Flood control.
    if ($threshold) {
      flood_register_event('dvg_appointments_cancel', $timeout);
    }
  }
  else {
    // Let other modules process the appointment after we've queried the client api.
    drupal_alter('dvg_appointments_cancel_appointment_after_remote', $appointment, $remote_appointment);

    drupal_array_set_nested_value($form_state['values'], $element['#array_parents'], array(
      'appointment_id' => $element['appointment_id']['#value'],
      'email' => $element['email']['#value'],
      'appointment' => serialize($appointment),
    ));
  }
}

/**
 * Implements hook_theme().
 */
function dvg_appointments_theme() {
  return array(
    'dvg_appointments_product' => array(
      'render element' => 'element',
    ),
    'dvg_appointments_location' => array(
      'render element' => 'element',
      'file' => 'components/wa_location.inc',
    ),
    'dvg_appointments_date_time' => array(
      'render element' => 'element',
    ),
    'dvg_appointments' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Returns HTML for the product/count fields on form.
 */
function theme_dvg_appointments_product($variables) {
  $element = $variables['element'];

  // Group start/end items together in fieldset.
  $fieldset = array(
    '#title' => t($element['#title']) . ' ' . ($element['#delta'] > 0 ? intval($element['#delta'] + 1) : ''),
    '#value' => '',
    '#description' => !empty($element['#fieldset_description']) ? $element['#fieldset_description'] : '',
    '#attributes' => array(),
    '#children' => $element['#children'],
  );

  // Add marker to required date fields.
  if ($element['#required']) {
    $fieldset['#title'] .= ' ' . theme('form_required_marker');
  }

  return theme('fieldset', array('element' => $fieldset));
}

/**
 * Returns HTML for a start/end date combination on form.
 */
function theme_dvg_appointments_date_time($variables) {
  $output = render($variables['element']['header']);
  $slots = $variables['element']['slots'];
  $appointments_full_date = $variables['element']['appointments_full_date'];

  $day_parts = array(
    'morning' => t('Morning'),
    'midday' => t('Midday'),
    'evening' => t('Evening'),
  );

  if (isset($appointments_full_date['#value']) && !empty($appointments_full_date['#value'])) {
    $table_data = array(
      'header' => array(
        t('Date'),
        $day_parts['morning'],
        $day_parts['midday'],
        $day_parts['evening'],
        t('Time'),
      ),
      'rows' => array(),
      'attributes' => array(
        'class' => array('dvg-appointments-date-selection'),
      ),
      'sticky' => FALSE,
    );

    $count = 0;
    // First show this amount of date/times (before the more dates button).
    $limit = variable_get('dvg_appointments_datetime_limit', FALSE);
    $use_show_more_button = variable_get('dvg_appointments_default_show_more_dates', TRUE);
    foreach ($appointments_full_date['#value'] as $index => $date) {

      $table_cells = array();

      $table_cells[] = array(
        'data' => drupal_ucfirst(dvg_appointments_format_date($date['date'], 'day_date')),
        'header' => TRUE,
      );

      foreach ($day_parts as $day_part_key => $day_part_label) {
        $available = isset($date['date_time'][$day_part_key]);
        $table_cells[] = array(
          'data' => t('!day_part !available', array(
            '!day_part' => '<span class="day-part-label">' . $day_part_label . '</span>',
            '!available' => '<span class="availability">' . ($available ? t('available') : t('unavailable')) . '</span>',
          )),
          'class' => array(
            $day_part_key,
            $available ? 'available' : 'unavailable',
          ),
          'title' => array(
            $available ? t('available') : t('unavailable'),
          ),
        );
      }

      $table_cells[] = array(
        'data' => render($slots[$index]),
        'class' => array(
          'time-selector-appointments',
        ),

      );
      $table_data['rows'][$count]['data'] = $table_cells;
      if ($limit && $count > ($limit - 1) && $use_show_more_button) {
        $table_data['rows'][$count]['class'] = array('element-invisible');
      }
      $count++;
    }

    $output .= theme('table', $table_data);

    if ($limit && $use_show_more_button && $count > $limit) {
      $output .= '<input type="button" class="appointments-show-more-dates" id="dvg-show-more-dates" value="' . t('Show more dates') . '">';
    }
  }
  else {
    $markup = array(
      '#markup' => t('No suitable date and time for this request. Please register appointments separately.'),
      '#prefix' => '<div class="error">',
      '#suffix' => '</div>',
      '#weight' => 4,
    );
    $output .= render($markup);
  }

  return $output;
}

/**
 * Theming function for info table.
 */
function theme_dvg_appointments($variables) {
  $appointment = $variables['element']['#value']['appointment'];
  if (is_string($appointment)) {
    $appointment = unserialize($appointment);
  }
  return _dvg_appointments_table($appointment);
}

/**
 * Helper function for loading the Task node by product code.
 */
function _dvg_appointments_get_task_by_product_code($product_code) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'task')
    ->propertyCondition('status', 1)
    ->propertyOrderBy('created', 'ASC')
    ->fieldCondition('field_product_code_appointment', 'value', $product_code)
    ->range(0, 1);
  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    return node_load(reset($nids));
  }

  return FALSE;
}

/**
 * Helper function that generates a table of an appointment.
 */
function _dvg_appointments_table(DvgAppointment $appointment, $table = TRUE) {
  $start_time = $appointment->getStart()->format('U');
  $end_time = $appointment->getEnd()->format('U');

  $product_rows = array();

  $count = 0;
  $product_ids = $appointment->getProductIds();
  foreach ($product_ids as $product_id) {
    $count++;
    if ($count == 1) {
      $product_rows[] = array(
        array(
          'rowspan' => count($product_ids),
          'class' => array('info-label'),
          'data' => $count == 1 ? t('Subject') : '',
        ),
        $appointment->getProductCount($product_id) . 'x ' . check_plain(dvg_appointments_get_product_name($product_id)),
      );
    }
    else {
      $product_rows[] = array(
        $appointment->getProductCount($product_id) . 'x ' . check_plain(dvg_appointments_get_product_name($product_id)),
      );
    }
  }

  $additional_rows = array(
    array(
      array('class' => array('info-label'), 'data' => t('Date')),
      drupal_ucfirst(dvg_appointments_format_date($start_time, 'day_date')),
    ),
    array(
      array('class' => array('info-label', 'time'), 'data' => t('Time')),
      t('@start till @end', array(
        '@start' => dvg_appointments_format_date($start_time, 'time'),
        '@end' => dvg_appointments_format_date($end_time, 'time'),
      )),
    ),
  );

  $rows = array_merge($product_rows, $additional_rows);

  if ($location = $appointment->getLocation()) {
    $location_row = array(
      array(
        array('class' => array('info-label'), 'data' => t('Location')),
        $location,
      ),
    );
    $rows = array_merge($rows, $location_row);
  }

  if ($appointment->getId()) {
    $rows[] = array(
      array('class' => array('info-label'), 'data' => t('Appointment id')),
      check_plain($appointment->getId()),
    );
  }

  // Let other modules alter the rows if needed.
  drupal_alter('dvg_appointments_table_rows', $rows, $appointment);

  if ($table) {
    return theme('table', array('rows' => $rows, 'attributes' => array('class' => array('appointments-info-table'))));
  }
  else {
    $output = array();
    foreach ($rows as $row) {
      if (isset($row[1])) {
        $output[] = t('!label: !value', array(
          '!label' => is_array($row[0]) ? $row[0]['data'] : $row[0],
          '!value' => is_array($row[1]) ? $row[1]['data'] : $row[1],
        ));
      }
      else {
        $output[count($output) - 1] .= ', ' . $row[0];
      }
    }
    return implode("\n", $output) . "\n&nbsp;";
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_appointments_form_webform_client_form_alter(&$form, &$form_state) {
  $node = $form['#node'];

  $preview_enabled = $node->webform['preview'];
  $last_page = $form_state['webform']['page_num'] == $form_state['webform']['page_count'];

  if (isset($node->webform['appointment_enabled']) && $node->webform['appointment_enabled']) {
    $form['#attributes']['class'][] = 'appointment-webform';

    $wa_products = dvg_appointments_get_selected_products($form_state, $form);

    if ($wa_products && $last_page) {
      $form['#validate'][] = 'dvg_appointments_book_appointment';
    }

    $wa_product = dvg_appointments_get_cid($node, 'wa_product');
    $wa_location_cid = dvg_appointments_get_cid($node, 'wa_location');
    if ($wa_product && $form_state['webform']['page_num'] == $node->webform['components'][$wa_product]['page_num']) {
      if (!$wa_location_cid) {
        $form['#validate'][] = 'dvg_appointments_validate_available_date_time';
      }
      else {
        $form['#validate'][] = 'dvg_appointments_validate_available_date_time_location';
      }
    }

    if ($wa_products && $preview_enabled && $last_page) {
      $start_time = dvg_appointments_get_selected_slot($form_state, $form);
      $product_tables = array();
      $fake_appointment = new DvgAppointment();
      $fake_appointment->setStart(DateTime::createfromformat('U', $start_time));
      foreach ($wa_products as $product) {
        $additional_customer_duration = isset($product['additional_customer_duration']) ? $product['additional_customer_duration'] : $product['duration'];
        $fake_appointment->addProduct($product['id'], $product['count'], $product['duration'] * 60, $additional_customer_duration * 60);
      }
      $duration = $fake_appointment->getAppointmentDurationEstimate();
      $fake_appointment->setEnd(DateTime::createfromformat('U', $start_time + $duration));
      // Get the location.
      if ($location_id = dvg_appointments_get_selected_location($form_state, $form)) {
        $wa_location_id = dvg_appointments_get_location_information($location_id);
        $fake_appointment->setLocation($wa_location_id);
      }

      $product_tables[] = _dvg_appointments_table($fake_appointment);

      $form['wa_product'] = array(
        '#weight' => -10,
        '#markup' => '<h2>' . t('Check and confirm your appointment(s)') . '</h2>' . implode("\n", $product_tables),
      );
      unset($form['preview_message']);

      $rows = array();
      foreach (element_children($form['preview']) as $preview) {
        if (!isset($form['preview'][$preview]['#title'])) {
          continue;
        }
        $title = $form['preview'][$preview]['#title'];
        $form['preview'][$preview]['#title'] = '';
        $form['preview'][$preview]['#theme_wrappers'] = array();
        $value = render($form['preview'][$preview]);
        if (trim(strip_tags($value)) != '') {
          $rows[] = array(
            array('class' => 'info-label', 'data' => check_plain($title)),
            $value,
          );
        }
      }

      if (!empty($rows)) {
        $form['wa_preview_values'] = array(
          '#markup' => '<h2>' . t('Your information') . '</h2>' . theme('table', array('rows' => $rows, 'attributes' => array('class' => array('appointments-info-table')))),
        );
      }
    }
  }
  elseif ($node->nid == functional_content_nid('dvg_appointments_cancel')) {
    $form['#attributes']['class'][] = 'appointment-webform';

    $wa_appointment = dvg_appointments_get_cid($node, 'wa_appointment');
    if ($wa_appointment && $last_page) {
      $form['#validate'][] = 'dvg_appointments_cancel_appointment';
      $form['#submit'][] = 'dvg_appointments_webform_cancel_submit';
      if ($preview_enabled) {
        unset($form['preview_message']);
      }
    }
  }
}

/**
 * Validation handler that checks available times for the selected product(s).
 */
function dvg_appointments_validate_available_date_time(&$form, &$form_state) {
  // Only validate when the next-button is pressed.
  if ($form['actions']['next']['#value'] != $form_state['triggering_element']['#value']) {
    return;
  }

  if (!form_get_errors()) {
    $client_api = dvg_appointments_get_client_api();

    $cid = dvg_appointments_get_cid($form['#node'], 'wa_product');
    $form_key = $form['#node']->webform['components'][$cid]['form_key'];
    $products = array();
    if (isset($form_state['values'])) {
      if (_wfm_is_multiple($form['submitted'][$form_key]['#webform_component'])) {
        // Parsing components that can have multiple values.
        foreach ($form_state['values']['submitted'][$form_key] as $key => $value) {
          if (is_numeric($key) && is_array($value)) {
            $products[] = $value;
          }
        }
      }
      else {
        // Parsing components that can have a single value.
        if (is_array($form_state['values']['submitted'][$form_key])) {
          $products[] = $form_state['values']['submitted'][$form_key];
        }
      }
    }

    $form_state['storage']['submitted'][$cid] = $products;
    $selected_products = dvg_appointments_get_selected_products($form_state, $form);

    $product_link_ids = $products_durations = $persons = array();
    foreach ($selected_products as $selected_product) {
      $product_id = $selected_product['id'];

      $product_link_ids[] = $product_id;
      $persons[$product_id] = $selected_product['count'];
      if (isset($selected_product['additional_customer_duration']) && $selected_product['count'] > 1) {
        $total_product_duration = $selected_product['duration'] + $selected_product['additional_customer_duration'] * ($selected_product['count'] - 1);
      }
      else {
        $total_product_duration = $selected_product['duration'] * $selected_product['count'];
      }
      $products_durations[$product_id] = $total_product_duration;
    }
    $dates_all = $client_api->get_dates_times($product_link_ids, $products_durations, $persons);
    if (empty($dates_all)) {
      form_set_error('wa_product', t('No suitable date and time for this request. Please register appointments separately.'));
    }
  }
}

/**
 * Validation handler that checks available times for the selected product(s).
 */
function dvg_appointments_validate_available_date_time_location(&$form, &$form_state) {
  // Only validate when the next-button is pressed.
  if ($form['actions']['next']['#value'] != $form_state['triggering_element']['#value']) {
    return;
  }

  if (!form_get_errors()) {
    $client_api = dvg_appointments_get_client_api();

    $cid = dvg_appointments_get_cid($form['#node'], 'wa_product');
    $form_key = $form['#node']->webform['components'][$cid]['form_key'];
    $products = array();
    if (isset($form_state['values'])) {
      if (_wfm_is_multiple($form['submitted'][$form_key]['#webform_component'])) {
        // Parsing components that can have multiple values.
        foreach ($form_state['values']['submitted'][$form_key] as $key => $value) {
          if (is_numeric($key) && is_array($value)) {
            $products[] = $value;
          }
        }
      }
      else {
        // Parsing components that can have a single value.
        if (is_array($form_state['values']['submitted'][$form_key])) {
          $products[] = $form_state['values']['submitted'][$form_key];
        }
      }
    }

    $form_state['storage']['submitted'][$cid] = $products;
    $selected_products = dvg_appointments_get_selected_products($form_state, $form);

    $product_link_ids = $products_durations = $persons = array();
    foreach ($selected_products as $selected_product) {
      $product_id = $selected_product['id'];

      $product_link_ids[] = $product_id;
      $persons[$product_id] = $selected_product['count'];
      if (isset($selected_product['additional_customer_duration']) && $selected_product['count'] > 1) {
        $total_product_duration = $selected_product['duration'] + $selected_product['additional_customer_duration'] * ($selected_product['count'] - 1);
      }
      else {
        $total_product_duration = $selected_product['duration'] * $selected_product['count'];
      }
      $products_durations[$product_id] = $total_product_duration;
    }

    $dates_available = FALSE;
    $available_locations = $client_api->get_filtered_locations($selected_products);

    foreach ($available_locations as $key => $available_location) {
      $client_api->set_location($available_location['id']);
      if ($client_api->get_dates_times($product_link_ids, $products_durations, $persons)) {
        $dates_available = TRUE;
      }
    }

    if (!$dates_available) {
      form_set_error('wa_product', t('No suitable date and time for this request. Please register appointments separately.'));
    }
  }
}

/**
 * Validation handler for webforms.
 */
function dvg_appointments_book_appointment(&$form, &$form_state) {
  $node = $form['#node'];
  $client_api = dvg_appointments_get_client_api();
  $mapping = unserialize($node->webform['appointment_mapping']);
  $products = dvg_appointments_get_selected_products($form_state, $form);
  $start_time = dvg_appointments_get_selected_slot($form_state, $form);
  $wa_product = dvg_appointments_get_cid($node, 'wa_product');

  $book_data = array();
  foreach ($mapping as $field => $cid) {
    $book_data[$field] = '';
    if (isset($form_state['storage']['submitted'][$cid])) {
      $book_data[$field] = $client_api->set_booking_value($field, $form_state['storage']['submitted'][$cid]);
    }
  }

  foreach ($products as $idx => $product) {
    $products[$idx]['confirm_text'] = _dvg_appointments_get_task_confirm_text_by_product_code($product['id']);
  }

  $app_data = array(
    'datetime' => $start_time,
    'products' => $products,
  );

  $location = dvg_appointments_get_selected_location($form_state, $form);
  // Location has been set and the location should be used in the client.
  if ($location) {
    $client_api->set_location($location);
  }

  try {
    $booked_appointment = $client_api->book_appointment($app_data, $book_data);

    // Store the appointment to make sure it already has a local id
    // in the webform submission data. dvg_appointments_submission_insert
    // will update nid and sid.
    dvg_appointments_store_appointment($booked_appointment);

    $apps = array(
      'app_data' => $app_data,
      'book_data' => $book_data,
      'appointment' => $booked_appointment,
    );

    $form_state['storage']['submitted'][$wa_product]['appointments'] = $apps;
  } catch (Exception $e) {
    switch ($e->getCode()) {
      case DVG_APPOINTMENTS_ERRORCODE_DATE_TIME:
        drupal_set_message(t('The selected time slot isn\'t available anymore. Please select an other date or time.'), 'error');

        // Redirect the user to the page with the wa_date_time component.
        $cid = dvg_appointments_get_cid($node, 'wa_date_time');
        unset($form_state['storage']['submitted'][$cid]);
        $form_state['storage']['page_num'] = $node->webform['components'][$cid]['page_num'];

        // Rebuild the form.
        $form_state['rebuild'] = TRUE;
        break;

      case DVG_APPOINTMENTS_ERRORCODE_MESSAGE:
        form_set_error('appointments', $e->getMessage());
        break;

      default:
        form_set_error('appointments', t('An unknown error occurred while booking your appointment. Please try again later.'));
    }

  }
}

/**
 * Validation handler for webforms.
 */
function dvg_appointments_cancel_appointment(&$form, &$form_state) {
  $cid = dvg_appointments_get_cid($form['#node'], 'wa_appointment');

  $appointment = unserialize($form_state['storage']['submitted'][$cid]['appointment']);

  $client_api = dvg_appointments_get_client_api();

  if (!$client_api->delete_appointment($appointment)) {
    form_set_error('wa_appointment', t('Unable to cancel the appointment, please try again later.'));
  }

  $form_state['values']['appointment'] = $appointment;
}

/**
 * Submit handler for canceling appointments.
 */
function dvg_appointments_webform_cancel_submit(&$form, &$form_state) {
  if (isset($form_state['values']['appointment'])) {
    $appointment = $form_state['values']['appointment'];
    // Delete the submission tied to the appointment. This will also delete
    // the local appointment.
    if ($appointment) {
      $node = node_load($appointment->getNodeId());
      $submission = webform_get_submission($appointment->getNodeId(), $appointment->getSubmissionId());
      if ($submission) {
        webform_submission_delete($node, $submission);
      }
    }
  }
}

/**
 * Implements hook_webform_submission_delete().
 */
function dvg_appointments_webform_submission_delete($node, $submission) {
  if ($appointment = dvg_appointments_get_appointments($node->nid, $submission->sid)) {
    dvg_appointments_delete_appointment($appointment->getId());
  }
}

/**
 * Helper function that gets the component id of a component type.
 */
function dvg_appointments_get_cid($node, $component_type) {
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['type'] == $component_type) {
      return $cid;
    }
  }

  return FALSE;
}

/**
 * Helper function that gets the submission appointments from db.
 */
function dvg_appointments_get_appointments($nid, $sid) {
  $appointment = FALSE;

  $id = db_query("SELECT id FROM {dvg_appointments_appointments} WHERE nid = :nid AND sid = :sid", array(
    ':nid' => $nid,
    ':sid' => $sid,
  ))->fetchField();

  if ($id) {
    $appointment = dvg_appointments_load_appointment($id);
  }
  return $appointment;
}

/**
 * Helper function that gets the location desc.
 */
function dvg_appointments_get_location_information($location_id){
  $client_api = dvg_appointments_get_client_api();
  $details = $client_api->get_location_details($location_id);
  if ($details) {
    return $details['detail']->locationDesc;
  }
  return FALSE;
}

/**
 * Helper function that renders additional confirmation text for the products.
 */
function _dvg_appointments_get_task_confirm_text_by_product_code($product_code) {
  if (variable_get('dvg_appointments_get_productinfo_from_webservice', FALSE)) {
    $client_api = dvg_appointments_get_client_api();
    $details = $client_api->get_product_details($product_code);
    $markup = array(
      '#markup' => check_markup($details, 'filtered_html'),
      '#prefix' => '<div class="appointments-confirmation-text">',
      '#suffix' => '</div>',
    );
    return render($markup);
  }

  if ($task = _dvg_appointments_get_task_by_product_code($product_code)) {
    $field_confirm_appointment = field_get_items('node', $task, 'field_confirm_appointment', $task->language);
    if (!empty($field_confirm_appointment)) {
      $markup = array(
        '#markup' => check_markup($field_confirm_appointment[0]['value'], $field_confirm_appointment[0]['format']),
        '#prefix' => '<div class="appointments-confirmation-text">',
        '#suffix' => '</div>',
      );
      return render($markup);
    }
  }

  return '';
}


/**
 * @param DvgAppointment $appointment
 *   The appointment.
 * @param bool $html
 *   Whether to generate HTML (TRUE) or text (FALSE).
 *
 * @return string
 *   Rendered output.
 */
function _dvg_appointments_create_info($appointment, $html = TRUE) {
  if ($appointment) {
    $confirm_text = $appointment_tables = $output = array();
    $markup = array(
      '#markup' => _dvg_appointments_table($appointment, $html),
      '#prefix' => '<div class="appointments-info-table-container">',
      '#suffix' => '</div>',
    );
    $output[] = render($markup);


    foreach ($appointment->getProductIds() as $product_id) {
      $confirm_text[] = _dvg_appointments_get_task_confirm_text_by_product_code($product_id);
    }

    $output[] = implode('<br />', $confirm_text);
    $output = implode("\n", $output);

    return ($html) ? $output : drupal_html_to_text($output);
  }
  else {
    watchdog('dvg_appointments', 'An appointment confirmation page was loaded, but there is no appointment. Maybe it is already canceled in another window?');
    drupal_goto('node/' . variable_get('functional_content_nid__dvg_appointments_create'));
  }
}

/**
 * Implements template_preprocess_webform_confirmation().
 *
 * Add the appointment info to the confirmation message.
 */
function dvg_appointments_preprocess_webform_confirmation(&$vars) {
  $node = $vars['node'];

  // Appointment created.
  if (isset($node->webform['appointment_enabled']) && $node->webform['appointment_enabled']) {
    $vars['confirmation_message'] .= _dvg_appointments_create_info(dvg_appointments_get_appointments($node->nid, $vars['sid']));
  }

  // Appointment canceled.
  elseif ($node->nid == functional_content_nid('dvg_appointments_cancel')) {
    $wa_appointment_cid = dvg_appointments_get_cid($node, 'wa_appointment');
    if ($wa_appointment_cid) {
      $submission = webform_get_submission($node->nid, $vars['sid']);
      $appointment = $submission->data[$wa_appointment_cid]['appointment'];
      // Add Location to the appointment.
      if ($wa_location = dvg_appointments_get_cid($node, 'wa_location')) {
        $location_id = $submission->data[$wa_location][0];
        if ($location = dvg_appointments_get_location_information($location_id)) {
          $appointment->setLocation($location);
        }
      }
      $markup = array(
        '#markup' => _dvg_appointments_table($appointment),
      );
      $vars['confirmation_message'] .= render($markup);
    }
  }
}

/**
 *  Implements hook_form_alter().
 */
function dvg_appointments_form_webform_component_edit_form_alter(&$form, &$form_state) {
  $components = dvg_appointments_webform_component_info();
  if (isset($components[$form['type']['#value']]) && isset($form['encryption']) && module_exists('webform_encrypt')) {
    $form['encryption']['#access'] = FALSE;
    $form['encryption']['encrypt']['#default_value'] = 0;
  }
}

/**
 *  Implements hook_form_alter().
 */
function dvg_appointments_form_webform_component_delete_form_alter(&$form, &$form_state) {
  $node = $form['node']['#value'];
  $component = $form['component']['#value'];
  if (isset($node->webform['appointment_enabled']) && $node->webform['appointment_enabled']) {
    $mapping = !empty($node->webform['appointment_mapping']) ? unserialize($node->webform['appointment_mapping']) : array();
    $cid = $component['cid'];
    if (in_array($cid, array_values($mapping))) {
      $question = t('Delete the %name component?', array('%name' => $node->webform ['components'][$cid]['name']));
      $description = t('You are not allowed to delete the %name component from the %webform webform. This component is used in the appointments mapping.', array('%name' => $node->webform ['components'][$cid]['name'], '%webform' => $node->title));
      $form = confirm_form($form, $question, 'node/' . $node->nid . '/webform/components', $description, t('Ok'));
      $form['#action'] = url('node/' . $node->nid . '/webform/components');
      unset($form['actions']['cancel']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_appointments_form_webform_configure_form_alter(&$form, &$form_state) {
  $node = &$form['#node'];

  $form['dvg_appointments'] = array(
    '#type' => 'fieldset',
    '#title' => t('Appointment'),
    '#collapsible' => TRUE,
    '#collapsed' => !$node->webform['appointment_enabled'],
  );
  $form['dvg_appointments']['appointment_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable appointment'),
    '#default_value' => $node->webform['appointment_enabled'],
    '#id' => 'webform-appointment-enabled',
  );
  $form['dvg_appointments']['mapping'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#states' => array(
      'visible' => array(
        '#webform-appointment-enabled' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );

  $mapping = !empty($node->webform['appointment_mapping']) ? unserialize($node->webform['appointment_mapping']) : array();
  try {
    $book_fields = array();

    $modules = module_invoke_all('dvg_appointments_api_client');
    $appointment_client = variable_get('dvg_appointments_api_client', FALSE);
    if ($appointment_client && isset($modules[$appointment_client])) {
      /** @var AppointmentsClientApi $client_api */
      $client_class = $modules[$appointment_client]['class'];
      $book_fields = $client_class::get_book_fields();
    }

    $components = array(
      '' => t('Select a component'),
    );
    $component_type_blacklist = array('wa_product', 'wa_date_time', 'wa_appointment', 'wa_location', 'pagebreak', 'markup', 'fieldset');
    foreach ($node->webform['components'] as $cid => $component) {
      if (!in_array($component['type'], $component_type_blacklist)) {
        $components[$cid] = $component['name'];
      }
    }

    foreach ($book_fields as $field => $label) {
      $form['dvg_appointments']['mapping'][$field] = array(
        '#type' => 'select',
        '#title' => $label,
        '#options' => $components,
        '#default_value' => isset($mapping[$field]) ? $mapping[$field] : '',
      );
    }

    array_unshift($form['#submit'], 'dvg_appointments_webform_configure_form_submit');
  }
  catch (Exception $e) {
    drupal_set_message(t('Unable to load the Webform Appointment API: %message', array( // @todo: add link to config page.
      '%message' => $e->getMessage(),
    )), 'error');
  }
}

/**
 * Submit handler for webform_configure_form().
 */
function dvg_appointments_webform_configure_form_submit(&$form, &$form_state) {
  $node = &$form['#node'];
  $node->webform['appointment_enabled'] = (int) $form_state['values']['appointment_enabled'];
  if ($node->webform['appointment_enabled']) {
    $node->webform['appointment_mapping'] = serialize($form_state['values']['mapping']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dvg_appointments_form_dvg_global_texts_alter(&$form, &$form_state) {
  if (!empty($form['dvg_custom__contact_information'])) {
    $create_nid = functional_content_nid('dvg_appointments_create');
    $cancel_nid = functional_content_nid('dvg_appointments_cancel');

    $form['dvg_custom__contact_information']['button_1']['#default_value']['url'] = 'node/' . $create_nid;
    $form['dvg_custom__contact_information']['button_2']['#default_value']['url'] = 'node/' . $cancel_nid;

    $form['dvg_custom__contact_information']['button_1']['#after_build'][] =
    $form['dvg_custom__contact_information']['button_2']['#after_build'][] = 'dvg_appointments_contact_buttons_remove_url';

    $form['dvg_custom__contact_information']['button_1']['#element_validate'][] =
    $form['dvg_custom__contact_information']['button_2']['#element_validate'][] = 'dvg_appointments_contact_buttons_validate';
  }
}

/**
 * After_build callback that hides the url-field of a link-field.
 */
function dvg_appointments_contact_buttons_remove_url(&$element) {
  $element['url']['#access'] = FALSE;
  return $element;
}

/**
 * Validation handler that fixes the contact-buttons url value.
 */
function dvg_appointments_contact_buttons_validate(&$element, &$form_state) {
  $element['#value'] += $element['#default_value'];
  form_set_value($element, $element['#value'], $form_state);
}

/**
 * Implements hook_token_info().
 */
function dvg_appointments_token_info() {
  $info['tokens']['submission']['dvg_appointments_info'] = array(
    'name' => t('Appointment info'),
    'description' => t('Information about the loaded appointment'),
  );
  $info['tokens']['submission']['dvg_appointments_create_info'] = array(
    'name' => t('Appointment confirmation info'),
    'description' => t('Information about the booked appointments'),
  );
  $info['tokens']['submission']['dvg_appointments_create_products'] = array(
    'name' => t('Appointment confirmation products'),
    'description' => t('Information about the booked appointment products'),
  );
  $info['tokens']['submission']['dvg_appointments_date'] = array(
    'name' => t('Appointment confirmation date'),
    'description' => t('The date of the appointment'),
  );
  $info['tokens']['submission']['dvg_appointments_location'] = array(
    'name' => t('Appointment Location'),
    'description' => t('The location information'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function dvg_appointments_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'submission' && !empty($data['webform-submission'])) {
    $submission = $data['webform-submission'];
    $node = node_load($submission->nid);

    // Detect e-mail HTML support.
    $html = FALSE;
    if (variable_get('mimemail_format') != 'plain_text' && variable_get('mimemail_textonly') === 0) {
      $html = TRUE;
    }

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'dvg_appointments_info':
          $cid = dvg_appointments_get_cid($node, 'wa_appointment');
          if ($cid) {
            $appointment = $submission->data[$cid]['appointment'];
            // Add Location to the appointment.
            if ($wa_location = dvg_appointments_get_cid($node, 'wa_location')) {
              if ($wa_location) {
                $location_id = $submission->data[$wa_location][0];
                if ($location = dvg_appointments_get_location_information($location_id)) {
                  $appointment->setLocation($location);
                }
              }
            }
            if ($html) {
              $replacements[$original] = _dvg_appointments_table($appointment, TRUE);
            }
            else {
              $replacements[$original] = drupal_html_to_text(_dvg_appointments_table($appointment, FALSE));
            }
          }
          break;

        case 'dvg_appointments_create_info':
          $appointments = dvg_appointments_get_appointments($submission->nid, $submission->sid);
          $replacements[$original] = _dvg_appointments_create_info($appointments, $html);
          break;

        case 'dvg_appointments_create_products':
          $appointment = dvg_appointments_get_appointments($submission->nid, $submission->sid);

          $product_names = dvg_appointments_get_products_names($appointment->getProductIds());

          $end = array_pop($product_names);

          if (!empty($product_names)) {
            $replacements[$original] = implode(', ', $product_names) . t(' and ') . $end;
          }
          else {
            $replacements[$original] = $end;
          }
          break;

        case 'dvg_appointments_date':
          if ($wa_appointment = dvg_appointments_get_cid($node, 'wa_appointment')) {
            $appointment = $submission->data[$wa_appointment]['appointment'];
          }
          else {
            $appointment = dvg_appointments_get_appointments($submission->nid, $submission->sid);
          }
          $timestamp = $appointment->getStart()->format('U');

          $replacements[$original] = dvg_appointments_format_date($timestamp, 'date');
          break;

        case 'dvg_appointments_location':
          if ($wa_location = dvg_appointments_get_cid($node, 'wa_location')) {
            $location_id = $submission->data[$wa_location][0];
            $location = dvg_appointments_get_location_information($location_id);
          }
          // Check for location.
          if ($location) {
            $replacements[$original] = $location;
          }
          else {
            $replacements[$original] = t("Location is not available.");
          }
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove the IFE general message for the 'wa_date_time' component.
 *
 * @see ife_form_validator().
 */
function dvg_appointments_preprocess_page(&$variables) {
  $errors = form_get_errors();
  if (!empty($errors) && array_key_exists('wa_date_time', $errors)) {
    $message = filter_xss_admin(variable_get('ife_general_message', 'Please correct all highlighted errors and try again.'));
    _dvg_global_remove_session_message(t($message), 'error');
  }
}

/**
 * Implements hook_dvg_appointments_api_client().
 */
function dvg_appointments_dvg_appointments_api_client() {
  return array(
    'gplan' => array(
      'name' => t('JCC G-Plan / G-Bos'),
      'class' => 'AppointmentsGplanClient',
    ),
    'gplan_multiple' => array(
      'name' => t('JCC G-Plan / G-Bos multiple products per appointment'),
      'class' => 'AppointmentsGplanMultipleClient',
    ),
    'orchestra' => array(
      'name' => t('Orchestra'),
      'class' => 'AppointmentsOrchestraClient',
    ),
  );
}

/**
 * Get a product name for a given product code.
 *
 * @param string $product_id
 *   Product code.
 *
 * @return string
 *   The product name, or an empty string if not found.
 *
 * @throws \Exception
 */
function dvg_appointments_get_product_name($product_id) {
  static $products;

  if (!isset($products)) {
    $client = dvg_appointments_get_client_api();
    $products = $client->get_available_products();
  }

  if (isset($products[$product_id])) {
    return $products[$product_id]['name'];
  }

  return '';
}

/**
 * Get names for an array of product ids.
 *
 * @param array $product_ids
 *   An array of product ids.
 *
 * @return array
 *   An array of names, keyed by product id.
 */
function dvg_appointments_get_products_names($product_ids) {
  $names = array();
  foreach ($product_ids as $product_id) {
    $name = dvg_appointments_get_product_name($product_id);
    if ($name !== '') {
      $names[$product_id] = $name;
    }
  }
  return $names;
}
