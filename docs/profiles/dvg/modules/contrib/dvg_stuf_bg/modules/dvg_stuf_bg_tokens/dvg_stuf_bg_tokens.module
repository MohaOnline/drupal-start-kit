<?php

/**
 * @file
 * Several hooks for token registration and handling.
 */

/**
 * Implements hook_token_info().
 */
function dvg_stuf_bg_tokens_token_info() {
  // Subtokens verblijfsadres.
  $info['types']['verblijfsadres'] = array(
    'name' => t('Residential address'),
    'description' => t('Tokens related to Residential address'),
    'needs-data' => 'verblijfsadres',
  );
  $info['tokens']['verblijfsadres']['aoa.identificatie'] = array(
    'name' => t('Identification code address (BAG)'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['aoa.identificatie.gemeente'] = array(
    'name' => t('Identification code council (BAG)'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['wpl.identificatie'] = array(
    'name' => t('Place of residence (BAG)'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['wpl.woonplaatsNaam'] = array(
    'name' => t('Place of residence'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['gor.openbareRuimteNaam'] = array(
    'name' => t('Street (BAG)'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['gor.straatnaam'] = array(
    'name' => t('Street'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['aoa.postcode'] = array(
    'name' => t('Postal code'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['aoa.huisnummer'] = array(
    'name' => t('House number'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['aoa.huisletter'] = array(
    'name' => t('House letter'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['aoa.huisnummertoevoeging'] = array(
    'name' => t('House number addition'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['inp.locatiebeschrijving'] = array(
    'name' => t('Indication at house number'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['naamAdresWoonplaats'] = array(
    'name' => t('Name and full address'),
    'description' => '',
    'type' => 'naamAdresWoonplaats',
  );
  // Subtokens naamAdresWoonplaats.
  $info['types']['naamAdresWoonplaats'] = array(
    'name' => t('Name and full address'),
    'description' => t('Tokens related to Name and full address'),
    'needs-data' => 'naamAdresWoonplaats',
  );
  $info['tokens']['naamAdresWoonplaats']['value'] = array(
    'name' => t('Name and full address (single line)'),
    'description' => '',
  );
  $info['tokens']['verblijfsadres']['volledigAdres'] = array(
    'name' => t('Full address'),
    'description' => '',
    'type' => 'volledigAdres',
  );
  // Subtokens volledigAdres.
  $info['types']['volledigAdres'] = array(
    'name' => t('Full address'),
    'description' => t('Tokens related to Full address'),
    'needs-data' => 'volledigAdres',
  );
  $info['tokens']['volledigAdres']['value'] = array(
    'name' => t('Full address (single line)'),
    'description' => '',
  );
  // Subtokens correspondentieAdres.
  $info['types']['correspondentieAdres'] = array(
    'name' => t('Correspondence address'),
    'description' => t('Tokens related to Correspondence address'),
    'needs-data' => 'correspondentieAdres',
  );
  $info['tokens']['correspondentieAdres']['aoa.identificatie'] = array(
    'name' => t('Identification code address (BAG)'),
    'description' => '',
  );
  $info['tokens']['correspondentieAdres']['wpl.woonplaatsNaam'] = array(
    'name' => t('Place of residence'),
    'description' => '',
  );
  $info['tokens']['correspondentieAdres']['gor.openbareRuimteNaam'] = array(
    'name' => t('Street (BAG)'),
    'description' => '',
  );
  $info['tokens']['correspondentieAdres']['postcode'] = array(
    'name' => t('Postal code'),
    'description' => '',
  );
  $info['tokens']['correspondentieAdres']['aoa.huisnummer'] = array(
    'name' => t('House number'),
    'description' => '',
  );
  $info['tokens']['correspondentieAdres']['aoa.huisletter'] = array(
    'name' => t('House letter'),
    'description' => '',
  );
  $info['tokens']['correspondentieAdres']['aoa.huisnummertoevoeging'] = array(
    'name' => t('House number addition'),
    'description' => '',
  );
  // Subtokens verblijfsOfCorrespondentieadres.
  $info['types']['verblijfsOfCorrespondentieadres'] = array(
    'name' => t('Residential or correspondence address'),
    'description' => t('Tokens related to Residential or correspondence address'),
    'needs-data' => 'verblijfsOfCorrespondentieadres',
  );
  $info['tokens']['verblijfsOfCorrespondentieadres']['aoa.identificatie'] = array(
    'name' => t('Identification code address (BAG)'),
    'description' => '',
  );
  $info['tokens']['verblijfsOfCorrespondentieadres']['wpl.woonplaatsNaam'] = array(
    'name' => t('Place of residence'),
    'description' => '',
  );
  $info['tokens']['verblijfsOfCorrespondentieadres']['gor.openbareRuimteNaam'] = array(
    'name' => t('Street (BAG)'),
    'description' => '',
  );
  $info['tokens']['verblijfsOfCorrespondentieadres']['aoa.postcode'] = array(
    'name' => t('Postal code'),
    'description' => '',
  );
  $info['tokens']['verblijfsOfCorrespondentieadres']['aoa.huisnummer'] = array(
    'name' => t('House number'),
    'description' => '',
  );
  $info['tokens']['verblijfsOfCorrespondentieadres']['aoa.huisletter'] = array(
    'name' => t('House letter'),
    'description' => '',
  );
  $info['tokens']['verblijfsOfCorrespondentieadres']['aoa.huisnummertoevoeging'] = array(
    'name' => t('House number addition'),
    'description' => '',
  );
  if (dvg_stuf_bg_natuurlijkpersoon_enabled() || dvg_stuf_bg_gezinssituatieopadresaanvrager_enabled()) {
    $info['types']['dvg_personen'] = array(
      'name' => t('Drupal voor Gemeenten - Persoon'),
      'description' => t('Drupal voor Gemeenten personen namespace, used for prefilling'),
    );
    if (dvg_stuf_bg_natuurlijkpersoon_enabled()) {
      // Tokens for the text format token type.
      $info['tokens']['dvg_personen']['inp.bsn'] = array(
        'name' => t('Social security number'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['geslachtsnaam'] = array(
        'name' => t('Last name'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['voorvoegselGeslachtsnaam'] = array(
        'name' => t('Last name prefix'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['voorletters'] = array(
        'name' => t('Initials'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['voornamen'] = array(
        'name' => t('First names'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['geslachtsnaamVolgensAanduidingNaamgebruik'] = array(
        'name' => t('Lastname (Prefered usage)'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['aanduidingNaamgebruik'] = array(
        'name' => t('Identifier last name usage'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['geslachtsnaamPartner'] = array(
        'name' => t('Partner last name'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['voorvoegselGeslachtsnaamPartner'] = array(
        'name' => t('Partner last name prefix'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['geslachtsaanduiding'] = array(
        'name' => t('Gender'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['inp.geboorteplaats'] = array(
        'name' => t('Birth place'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['inp.geboorteLand'] = array(
        'name' => t('Birth country'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['geboortedatum'] = array(
        'name' => t('Birth date'),
        'description' => '',
        'type' => 'date',
      );
      $info['tokens']['dvg_personen']['sub.telefoonnummer'] = array(
        'name' => t('Phone number'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['sub.emailadres'] = array(
        'name' => t('E-mail address'),
        'description' => '',
      );
      $info['tokens']['dvg_personen']['verblijfsadres'] = array(
        'name' => t('Residential address'),
        'description' => '',
        'type' => 'verblijfsadres',
      );
      $info['tokens']['dvg_personen']['correspondentieAdres'] = array(
        'name' => t('Correspondence address'),
        'description' => '',
        'type' => 'correspondentieAdres',
      );
      $info['tokens']['dvg_personen']['verblijfsOfCorrespondentieadres'] = array(
        'name' => t('Residential or correspondence address'),
        'description' => '',
        'type' => 'verblijfsOfCorrespondentieadres',
      );
    }
    if (dvg_stuf_bg_gezinssituatieopadresaanvrager_enabled()) {
      $info['tokens']['dvg_personen']['familieledenOpAdres'] = array(
        'name' => t('Family members on the same address'),
        'description' => '',
      );
    }
    if (dvg_stuf_bg_natuurlijkpersoon_gemeentevaninschrijving_enabled()) {
      $info['tokens']['dvg_personen']['inp.gemeenteVanInschrijving'] = array(
        'name' => t('Municipality identification code (BAG)'),
        'description' => '',
      );
    }
    if (dvg_stuf_bg_vestiging_enabled()) {
      $info['types']['dvg_vestiging'] = array(
        'name' => t('Drupal voor Gemeenten - Vestiging'),
        'description' => t('Drupal voor Gemeenten vestiging namespace, used for prefilling'),
      );
      // Tokens for the text format token type.
      $info['tokens']['dvg_vestiging']['vestigingsNummer'] = array(
        'name' => t('Location number'),
        'description' => '',
      );
      $info['tokens']['dvg_vestiging']['handelsnaam'] = array(
        'name' => t('Brand Name'),
        'description' => '',
      );
      $info['tokens']['dvg_vestiging']['handelsnaamVerkort'] = array(
        'name' => t('Brand Name (shortened)'),
        'description' => '',
      );
      $info['tokens']['dvg_vestiging']['verblijfsadres'] = array(
        'name' => t('Residential address'),
        'description' => '',
        'type' => 'verblijfsadres',
      );
    }
    return $info;
  }
}


/**
 * Implements hook_tokens().
 */
function dvg_stuf_bg_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  if ($type == 'dvg_personen') {
    foreach ($tokens as $name => $original) {
      $replacements = _dvg_stuf_bg_tokens_replace_natuurlijk_persoon($name, $original, $replacements, $sanitize, $options);
    }
  }
  if ($type == 'dvg_vestiging') {
    foreach ($tokens as $name => $original) {
      $replacements = _dvg_stuf_bg_tokens_replace_vestiging($name, $original, $replacements, $sanitize, $options);
    }
  }

  // Return the replacements.
  return $replacements;
}

/**
 * Token callback for the 'natuurlijk_persoon' tokens.
 */
function _dvg_stuf_bg_tokens_replace_natuurlijk_persoon($name, $original, $replacements, $sanitize, $options) {
  $value = '';
  $vraag_antwoord_tokens = array('inp.gemeenteVanInschrijving');
  $method = dvg_stuf_bg_natuurlijkpersoon_api_method();
  if ($method === 'prsVraagAntwoord') {
    if (in_array($name, $vraag_antwoord_tokens, TRUE)) {
      $method = 'vraagAntwoord';
    }
    else {
      $method = 'prs';
    }
  }
	// Fallback to naamAdresWoonplaats token for general tokens.
	$fallback_tokens = [
		'verblijfsadres',
		'correspondentieAdres',
		'verblijfsOfCorrespondentieadres',
	];
	if (in_array($name, $fallback_tokens, TRUE)) {
		$name .= ':naamAdresWoonplaats';
	}
  // Check if prefill works.
  if ($prefill = dvg_stuf_bg_natuurlijk_persoon($method)) {

    // Check if token contains sub-parts.
    $parts = explode(':', $name, 2);
    if (count($parts) == 2) {
      $category = $parts[0];
      $key = $parts[1];
      // Convert correspondentieAdres to sub.correspondentieAdres.
      if ($category === 'correspondentieAdres') {
        $category = 'sub.correspondentieAdres';
      }
      // Fallback construction verblijfsOfCorrespondentieadres.
      if ($category === 'verblijfsOfCorrespondentieadres') {
        if (isset($prefill->{'verblijfsadres'}->{'gor.straatnaam'}) && !empty($prefill->{'verblijfsadres'}->{'gor.straatnaam'})) {
          $category = 'verblijfsadres';
        }
        else {
          $category = 'sub.correspondentieAdres';
          if ($key === 'aoa.postcode') {
            $key = 'postcode';
          }
        }
      }
      // Check if the token needs a special handling.
      if (in_array($category, array('verblijfsadres', 'sub.correspondentieAdres'))) {
        switch ($key) {

          case 'naamAdresWoonplaats':
            $value = '';
            $firstnames = $prefill->{'voornamen'}->_;
            if ($firstnames) {
              $value .= $firstnames;
            }
            $value = trim($value . ' ' . _dvg_stuf_bg_tokens_webform_favorable_lastname($prefill)) . '<br/>';
            $value .= _dvg_stuf_bg_tokens_webform_address($prefill, $category);
            break;

          case 'naamAdresWoonplaats:value':
            $value = '';
            $firstnames = $prefill->{'voornamen'}->_;
            if ($firstnames) {
              $value .= $firstnames;
            }
            $value = trim($value . ' ' . _dvg_stuf_bg_tokens_webform_favorable_lastname($prefill)) . ', ';
            $value .= _dvg_stuf_bg_tokens_webform_address($prefill, $category, ', ');
            break;

          case 'volledigAdres':
            $value = _dvg_stuf_bg_tokens_webform_address($prefill, $category);
            break;

          case 'volledigAdres:value':
            $value = _dvg_stuf_bg_tokens_webform_address($prefill, $category, ', ');
            break;

          case 'aoa.identificatie.gemeente':
            $key = 'aoa.identificatie';
            if (!empty($prefill->{$category}->{$key})) {
              $value = substr($prefill->{$category}->{$key}->_, 0, 4);
            }
            elseif ($category == 'verblijfsadres' && !empty($prefill->{'inp.verblijftIn'}->{'gerelateerde'}->{'gem.gemeenteCode'})) {
              $value = str_pad($prefill->{'inp.verblijftIn'}->{'gerelateerde'}->{'gem.gemeenteCode'}->_, 4, "0", STR_PAD_LEFT);
            }
            break;

          default:
            if (!empty($prefill->{$category}->{$key})) {
              $value = $prefill->{$category}->{$key}->_;
            }
        }
      }
      elseif (!empty($prefill->{$category}->{$key})) {
        $value = $prefill->{$category}->{$key}->_;
      }

    }
    else {

      // Check if the token needs a special handling.
      switch ($name) {

        case 'familieledenOpAdres':
          $value = '';
          $familymembers = dvg_stuf_bg_familymembers();
          $len = count($familymembers);
          $i = 0;
          foreach ($familymembers as $key => $member) {
            $value .= $member['voornamen'] . ' ' . trim($member['voorvoegselGeslachtsnaam'] . ' ' . $member['geslachtsnaam']) . ' (' . $key . ');';
            if ($i < $len - 1) {
              $value .= '<br/>';
            }
            $i += 1;
          }
          break;

        case 'geslachtsnaamVolgensAanduidingNaamgebruik':
          $value = _dvg_stuf_bg_tokens_webform_favorable_lastname($prefill);
          break;

        case 'inp.bsn':
          if (!empty($prefill->{$name})) {
            str_pad($value = $prefill->{$name}->_, 9, '0', STR_PAD_LEFT);
          }
          break;

        default:
          // Default prefill token call, with no special treatment.
          if (!empty($prefill->{$name})) {
            $value = $prefill->{$name}->_;
          }
      }
    }

    // Post value processing for specific cases.
    if (in_array($name, array('geboortedatum'))) {
      if (!empty($value)) {
        $date = date_create_from_format('Ymd', $value);
        $value = $date->getTimestamp();
        $replacements[$original] = date('d-m-Y', $value);
      }
    }
    else {
      // Regular token value handling.
      $replacements[$original] = $sanitize ? check_plain($value) : $value;
    }
  }
  return $replacements;
}

/**
 * Token callback for the 'vestiging' tokens.
 */
function _dvg_stuf_bg_tokens_replace_vestiging($name, $original, $replacements, $sanitize, $options) {
  $value = '';
  // Fallback to naamAdresWoonplaats token for general tokens.
  $fallback_tokens = [
    'verblijfsadres',
  ];
  if (in_array($name, $fallback_tokens, TRUE)) {
    $name .= ':naamAdresWoonplaats';
  }
  // Check if prefill works.
  if ($prefill = dvg_stuf_bg_vestiging()) {
    // Check if token contains sub-parts.
    $parts = explode(':', $name, 2);
    if (count($parts) == 2) {
      $category = $parts[0];
      $key = $parts[1];
      // Check if the token needs a special handling.
      if ($category == 'verblijfsadres') {
        switch ($key) {

          case 'naamAdresWoonplaats':
            $value = '';
            $brand_name = $prefill->{'handelsnaam'}->_;
            if ($brand_name) {
              $value .= $brand_name . '<br/>';
            }
            $value .= _dvg_stuf_bg_tokens_webform_address($prefill);
            break;

          case 'naamAdresWoonplaats:value':
            $value = '';
            $brand_name = $prefill->{'handelsnaam'}->_;
            if ($brand_name) {
              $value .= $brand_name . ', ';
            }
            $value .= _dvg_stuf_bg_tokens_webform_address($prefill, 'verblijfsadres', ', ');
            break;

          case 'volledigAdres':
            $value = _dvg_stuf_bg_tokens_webform_address($prefill);
            break;

          case 'volledigAdres:value':
            $value = _dvg_stuf_bg_tokens_webform_address($prefill, 'verblijfsadres', ', ');
            break;

          default:
            if (!empty($prefill->{$category}->{$key})) {
              $value = $prefill->{$category}->{$key}->_;
            }
        }
      }
      elseif (!empty($prefill->{$category}->{$key})) {
        $value = $prefill->{$category}->{$key}->_;
      }

    }
    else {
      // Default prefill token call, with no special treatment.
      if (!empty($prefill->{$name})) {
        $value = $prefill->{$name}->_;
      }
    }

    // Regular token value handling.
    $replacements[$original] = $sanitize ? check_plain($value) : $value;
  }
  return $replacements;
}

/**
 * Helper function to return the address value from the prefill.
 */
function _dvg_stuf_bg_tokens_webform_address($prefill, $address_type = 'verblijfsadres', $separator = '<br/>') {
  $value = '';
  if (!isset($prefill->{$address_type})) {
    return $value;
  }
  $street_field = ($address_type === 'verblijfsadres') ? 'gor.straatnaam' : 'gor.openbareRuimteNaam';
  $street = $prefill->{$address_type}->{$street_field}->_;
  if ($street) {
    $value = trim($street);
  }
  $housenumber = $prefill->{$address_type}->{'aoa.huisnummer'}->_;
  if ($housenumber) {
    $value = trim($value . ' ' . $housenumber);
  }
  if (!empty($prefill->{$address_type}->{'aoa.huisletter'}->_)) {
    $value = trim($value . $prefill->{$address_type}->{'aoa.huisletter'}->_);
  }
  if (!empty($prefill->{$address_type}->{'aoa.huisnummertoevoeging'}->_)) {
    $value = trim($value . $prefill->{$address_type}->{'aoa.huisnummertoevoeging'}->_);
  }
  $value .= $separator;
  $zipcode_field = ($address_type === 'verblijfsadres') ? 'aoa.postcode' : 'postcode';
  $zipcode = $prefill->{$address_type}->{$zipcode_field}->_;
  if ($zipcode) {
    $value .= trim($zipcode);
  }
  $city = $prefill->{$address_type}->{'wpl.woonplaatsNaam'}->_;
  if ($city) {
    $value = trim($value . ' ' . $city);
  }
  return $value;
}

/**
 * Helper function to get favorable lastname.
 */
function _dvg_stuf_bg_tokens_webform_favorable_lastname($prefill) {
  $own_last_name = $prefill->{'geslachtsnaam'}->_;
  if (isset($prefill->{'voorvoegselGeslachtsnaam'}->_)) {
    $own_last_name = $prefill->{'voorvoegselGeslachtsnaam'}->_ . ' ' . $own_last_name;
  }
  if (isset($prefill->{'geslachtsnaamPartner'}->_)) {
    $partner_last_name = $prefill->{'geslachtsnaamPartner'}->_;
  }
  if (isset($prefill->{'voorvoegselGeslachtsnaamPartner'}->_)) {
    $partner_last_name_prefix = $prefill->{'voorvoegselGeslachtsnaamPartner'}->_;
  }
  if (isset($partner_last_name, $partner_last_name_prefix)) {
    $partner_last_name = $partner_last_name_prefix . ' ' . $partner_last_name;
  }

  // Default to own last name if 'aanduidingNaamgebruik' is not set or
  // partner_last_name is not available.
  $favorable_last_name_usage_code = 'E';
  if (!empty($partner_last_name)) {
    if (isset($prefill->{'aanduidingNaamgebruik'}->_)) {
      $favorable_last_name_usage_code = $prefill->{'aanduidingNaamgebruik'}->_;
    }
    // Debug function. override the $favorable_last_name_usage_code.
    $debug_usage_code = variable_get('dvg_stuf_bg_tokens_debug_lastname_usage_code', '');
    if (!empty($debug_usage_code)) {
      $favorable_last_name_usage_code = $debug_usage_code;
    }
  }

  switch ($favorable_last_name_usage_code) {

    case 'N':
      // Own last name first, then partner last name.
      $value = $own_last_name . '-'
        . $partner_last_name;
      break;

    case 'P':
      // Last name from partner.
      $value = $partner_last_name;
      break;

    case 'V':
      // Last name partner first, then own last name.
      $value = $partner_last_name . '-'
        . $own_last_name;
      break;

    case 'E':
    default:
      // Own last name only.
      $value = $own_last_name;
      break;
  }
  return $value;
}

/**
 * Implements hook_webform_select_options_info().
 */
function dvg_stuf_bg_tokens_webform_select_options_info() {
  $items = array();
  if (dvg_stuf_bg_gezinssituatieopadresaanvrager_enabled()) {
    $items['familymembers'] = array(
      'title' => t('Familymembers of current user'),
      'options callback' => 'dvg_stuf_bg_tokens_options_familymembers',
    );
  }
  return $items;
}

/**
 * Build an family member options list for use by webforms.
 */
function dvg_stuf_bg_tokens_options_familymembers() {
  $options = array();
  $family = dvg_stuf_bg_familymembers();
  $display_birthday = variable_get('dvg_stuf_bg_tokens_show_family_birthday', FALSE);
  $display_bsn = variable_get('dvg_stuf_bg_tokens_show_family_bsn', FALSE);
  foreach ($family as $key => $value) {
    $member_name = $value['voornamen'] . ' ' . trim($value['voorvoegselGeslachtsnaam'] . ' ' . $value['geslachtsnaam']);
    if ($display_birthday) {
      $birthday = $value['geboortedatum'];
      $member_name .= ' (' . format_date(strtotime($birthday), 'custom', 'd-m-Y') . ')';
    }
    if ($display_bsn) {
      $bsn_display = 'BSN: ' . $key;
      // Wrap in parentheses if no birthday is displayed.
      $member_name .= $display_birthday ? " $bsn_display" : " ($bsn_display)";
    }
    $options[$key] = $member_name;
  }
  return $options;
}

/**
 * Implements hook_global_testdata().
 */
function dvg_stuf_bg_tokens_dvg_global_testdata() {
  $form = array();
  if (dvg_stuf_bg_debug_mode()) {
    $form['stuf_bg_tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('StUF-BG-Tokens'),
    );
    $form['stuf_bg_tokens']['dvg_stuf_bg_tokens_debug_lastname_usage_code'] = array(
      '#type' => 'textfield',
      '#title' => t('Debug last name usage token.'),
      '#default_value' => variable_get('dvg_stuf_bg_tokens_debug_lastname_usage_code', ''),
      '#description' => t('Leave empty for prefill value, else fill in N, E, P or V.'),
    );
  }
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @inheritdoc
 */
function dvg_stuf_bg_tokens_form_dvg_stuf_bg_admin_form_alter(&$form, &$form_state, $form_id) {
  $bsn_description = t('Shown in the values of the pre-built option list for family members.') . '<br>' .
    '<span class="warning">' . t('Note: the legality of this setting is disputable!') . '</span>';
  $form['stuf_bg']['display_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    'dvg_stuf_bg_tokens_show_family_birthday' => array(
      '#type' => 'checkbox',
      '#title' => t('Show birthday after family member names'),
      '#description' => t('Shown in the values of the pre-built option list for family members.'),
      '#default_value' => variable_get('dvg_stuf_bg_tokens_show_family_birthday', FALSE),
    ),
    'dvg_stuf_bg_tokens_show_family_bsn' => array(
      '#type' => 'checkbox',
      '#title' => t('Show BSN after family member names'),
      '#description' => $bsn_description,
      '#default_value' => variable_get('dvg_stuf_bg_tokens_show_family_bsn', FALSE),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Checking if there are any familymembers to choose from, else show a message.
 */
function dvg_stuf_bg_tokens_form_alter(&$form, &$form_state, $form_id) {
  // Check if it's a webform.
  if (isset($form['#node']) && $form['#node']->type == 'webform' && isset($form_state['webform'])) {
    $components = $form['#node']->webform['components'];
    $preview_enabled = $form['#node']->webform['preview'];
    $last_page = $form_state['webform']['page_num'] == $form_state['webform']['page_count'];

    if (module_exists('dvg_authentication_tmp_mapping') && !($last_page && $preview_enabled)) {
      // Don't set the message on an ajax request, preventing double messages
      // on form submit after ajax calls are triggered on the form.
      if (empty($_SERVER['HTTP_X_REQUESTED_WITH']) || strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) != 'xmlhttprequest') {
        global $user;
        $user_role_digid = dvg_authentication_external_logged_in($user, ['digid']);

        if ($user_role_digid) {
          foreach ($components as $key => $component) {

            if ($component['type'] == 'select') {
              if ($component['extra']['options_source'] == 'familymembers') {
                $form_keys = webform_component_parent_keys($form['#node'], $component);

                if (empty(drupal_array_get_nested_value($form['submitted'], $form_keys)['#options'])) {
                  // Only show this message on the page the component is shown.
                  $component_page_num = $component['page_num'];

                  if (isset($form['progressbar']['#page_num']) &&
                    $form['progressbar']['#page_num'] == $component_page_num
                  ) {
                    drupal_set_message(t('There are no other registered people found on the current address.'), 'status');
                  }
                }
              }
            }
          }
        }
      }
    }
    else {
      // This is added because the hook_form_alter gets
      // called multiple times on preview page.
      // It removes the message on the preview page.
      _dvg_global_remove_session_message(t('There are no other registered people found on the current address.'), 'status');
    }
  }
}

/**
 * Add debug messages to screen and watchdog.
 */
function _dvg_stuf_bg_soap_debug_message($soap, $method, $status) {
  $xml_last_request = new DOMDocument();
  $xml_last_request->formatOutput = TRUE;
  $is_xml = $xml_last_request->loadXML($soap->__getLastRequest());
  if ($is_xml) {
    $last_request = $xml_last_request->saveXML();
  }
  else {
    $last_request = var_export($soap->__getLastRequest(), TRUE);
  }
  $xml_last_response = new DOMDocument();
  $xml_last_response->formatOutput = TRUE;
  $is_xml = $xml_last_response->loadXML($soap->__getLastResponse());
  if ($is_xml) {
    $last_response = $xml_last_response->saveXML();
  }
  else {
    $last_response = var_export($soap->__getLastResponse(), TRUE);
  }
  global $user;
  if (
    variable_get('dvg_stuf_bg_debug_mode', 0) &&
    (
      dvg_authentication_external_logged_in($user, ['digid', 'eherkenning'], TRUE) ||
      $user->uid == 1
    )
  ) {
    if ($status == 'error') {
      $drupal_message_type = 'error';
    }
    else {
      $drupal_message_type = 'status';
    }
    drupal_set_message(t('Soap Request') .
      '<p class="inline-info">Method: ' . $method . '</p>' .
      '<p class="inline-info">Status: ' . $status . '</p>' .
      '<p class="inline-info">LastRequest:<pre>' . check_plain($last_request) . '</pre></p>' .
      '<p class="inline-info">LastRequestHeaders:<pre>' . check_plain(var_export($soap->__getLastRequestHeaders(), TRUE)) . '</pre></p>' .
      '<p class="inline-info">LastResponse:<pre>' . check_plain($last_response) . '</pre></p>', $drupal_message_type);
  }
  if ($status == 'error') {
    $watchdog = WATCHDOG_ERROR;
  }
  else {
    $watchdog = WATCHDOG_DEBUG;
  }
  if (dvg_stuf_bg_debug_mode()) {
    watchdog('dvg_stuf_bg', 'SOAP request @method: @status: Last Request: @last_request Last Headers: @last_headers', array(
      '@method' => $method,
      '@status' => $status,
      '@last_request' => $last_request,
      '@last_headers' => var_export($soap->__getLastRequestHeaders(), TRUE),
    ), $watchdog);
  }
  else {
    watchdog('dvg_stuf_bg', 'SOAP request @method: @status', array(
      '@method' => $method,
      '@status' => $status,
    ), $watchdog);
  }
}
