<?php
/**
 * @file
 * This file contains the DvG StUF BG module.
 */

include_once 'dvg_stuf_bg.dvg.user_permission.inc';

define('DVG_STUF_BG_CACHE_MIN_TIMEOUT', 0);

/**
 * Implements hook_menu().
 */
function dvg_stuf_bg_menu() {
  $items = array();

  $items['admin/config/services/dvg-stuf-bg'] = array(
    'title' => 'StUF-BG',
    'description' => 'Perform administration tasks for the StUF-BG module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dvg_stuf_bg_admin_form'),
    'access arguments' => array('administer dvg_stuf_bg'),
    'file' => 'dvg_stuf_bg.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function dvg_stuf_bg_permission() {
  return array(
    'administer dvg_stuf_bg' => array(
      'title' => t('Administer StUF-BG'),
      'description' => t('Perform administration tasks for the StUF-BG module.'),
    ),
  );
}

/**
 * Retrieve Natuurlijk Persoon from StUF-BG.
 */
function dvg_stuf_bg_natuurlijk_persoon($method, $reset = FALSE) {
  global $user;

  $url = variable_get('dvg_stuf_bg_natuurlijkpersoon_api_url');
  if ($method === 'prs') {
    $wsdl = drupal_get_path('module', 'dvg_stuf_bg') . '/wsdl/bg0310/prs/bg0310_vraagAntwoord_prs.wsdl';
    $api_method = 'npsLv01-prs-NatuurlijkPersoon';
  }
  else {
    if (dvg_stuf_bg_natuurlijkpersoon_api_method() === 'prsVraagAntwoord') {
      $url = variable_get('dvg_stuf_bg_natuurlijkpersoon_api_vraagantwoord_url');
    }
    $wsdl = drupal_get_path('module', 'dvg_stuf_bg') . '/wsdl/bg0310/vraagAntwoord/bg0310_beantwoordVraag_vraagAntwoord.wsdl';
    $api_method = 'npsLv01';
  }
  $call_type = 'natuurlijkpersoon';
  drupal_alter('dvg_stuf_bg_api_call', $wsdl, $api_method, $call_type);
  $bsn = FALSE;
  if (dvg_authentication_external_logged_in($user, ['digid']) || _dvg_stuf_bg_allowed_prefill_roles()) {
    if (dvg_stuf_bg_debug_mode()) {
      // @todo use generic BSN.
      $bsn = variable_get('dvg_stuf_bg_debug_bsn', '');
    }
    else {
      $bsn = dvg_authentication_get_external_user_value('bsn');
    }
  }
  if ($bsn) {
    // Ensure 9 digit bsn number.
    $bsn = str_pad($bsn, 9, '0', STR_PAD_LEFT);
    // Add a unique cache id per environment.
    $args['cache_id'] = get_cache_id();
    $args['bsn'] = $bsn;
    $args['method'] = $method;
    $cid = 'dvg_stuf_bg__' . $method . '__' . substr(md5(serialize($args)), 0, 8);
    if (!$reset && $cache = cache_get($cid)) {

      // Make sure the cache isn't expired.
      if ($cache->expire > REQUEST_TIME) {
        return unserialize(decrypt($cache->data, array('base64' => TRUE)));
      }
    }

    // Init SOAP client.
    // Set the connection duration time-out.
    if (!ini_set('default_socket_timeout', variable_get('dvg_stuf_bg_socket_timeout', 30))) {
      watchdog('dvg_stuf_bg', 'Unable to set the default_socket_timeout to @secs', array(
        '@secs' => variable_get('dvg_stuf_bg_socket_timeout', 30),
      ), WATCHDOG_ERROR);
    }
    $options = array(
      'connection_timeout' => variable_get('dvg_stuf_bg_connection_timeout', 2),
      'exceptions' => TRUE,
      'location' => $url,
      'trace' => TRUE,
    );
    drupal_alter('dvg_stuf_bg_soap_options', $options);
    $soap = new SoapClient($wsdl, $options);
    $reference_number = strval(round(microtime(TRUE) * 1000));
    $time_message = date('YmdHis') . '000';
    $message = array(
      'stuurgegevens' => array(
        'berichtcode' => 'Lv01',
        'zender' => array(
          'organisatie' => variable_get('dvg_stuf_bg_sender_organization'),
          'applicatie' => variable_get('dvg_stuf_bg_sender_application'),
        ),
        'ontvanger' => array(
          'applicatie' => variable_get('dvg_stuf_bg_receiver_application'),
        ),
        'referentienummer' => $reference_number,
        'tijdstipBericht' => $time_message,
        'entiteittype' => 'NPS',
      ),
      'parameters' => array(
        'sortering' => '0',
        'indicatorVervolgvraag' => FALSE,
        'maximumAantal' => '1',
        'indicatorAantal' => 'true',
      ),
    );
    $var = variable_get('dvg_stuf_bg_receiver_organization', '');
    if (!empty($var)) {
      $message['stuurgegevens']['ontvanger']['organisatie'] = variable_get('dvg_stuf_bg_receiver_organization');
    }
    $var = variable_get('dvg_stuf_bg_receiver_administration', '');
    if (!empty($var)) {
      $message['stuurgegevens']['ontvanger']['administratie'] = variable_get('dvg_stuf_bg_receiver_administration');
    }
    $xml = new DOMDocument();
    $xml->formatOutput = TRUE;

    $gelijk = $xml->createElement("ns2:gelijk");
    $gelijk->setAttribute('ns1:entiteittype', 'NPS');
    $gelijk_bsn = $xml->createElement("ns2:inp.bsn");
    $gelijk_bsn_text = $xml->createTextNode($bsn);
    $gelijk_bsn->appendChild($gelijk_bsn_text);
    $gelijk->appendChild($gelijk_bsn);
    $xml->appendChild($gelijk);
    if ($method === 'prs' || dvg_stuf_bg_natuurlijkpersoon_api_scope() === 'specific') {
      $scope = $xml->createElement("ns2:scope");
      $scope->setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
      $xml->appendChild($scope);
      $object_e = $xml->createElement("ns2:object");
      $object_e->setAttribute('ns1:entiteittype', 'NPS');
      if ($method !== 'prs') {
        $object_e->setAttribute('ns1:scope', 'alles');
      }
      $scope->appendChild($object_e);
      $field_names = array(
        'inp.bsn',
        'geslachtsnaam',
        'voorvoegselGeslachtsnaam',
        'voorletters',
        'voornamen',
        'aanduidingNaamgebruik',
        'geslachtsnaamPartner',
        'voorvoegselGeslachtsnaamPartner',
        'geslachtsaanduiding',
        'geboortedatum',
        'inp.geboorteplaats',
        'inp.geboorteLand',
      );
      foreach ($field_names as $field_name) {
        $element = $xml->createElement("ns2:" . $field_name);
        $element->setAttribute('xsi:nil', 'true');
        $object_e->appendChild($element);
      }
      $verblijfsadres = $xml->createElement("ns2:verblijfsadres");
      $object_e->appendChild($verblijfsadres);
      $field_names = array(
        'aoa.identificatie',
        'wpl.identificatie',
        'wpl.woonplaatsNaam',
        'gor.openbareRuimteNaam',
        'gor.straatnaam',
        'aoa.postcode',
        'aoa.huisnummer',
        'aoa.huisletter',
        'aoa.huisnummertoevoeging',
        'inp.locatiebeschrijving',
      );
      foreach ($field_names as $field_name) {
        $element = $xml->createElement("ns2:" . $field_name);
        $element->setAttribute('xsi:nil', 'true');
        $verblijfsadres->appendChild($element);
      }
      $correspondentie_adres = $xml->createElement("ns2:sub.correspondentieAdres");
      $object_e->appendChild($correspondentie_adres);
      $field_names = array(
        'wpl.woonplaatsNaam',
        'postcode',
        'sub.postadresType',
        'sub.postadresNummer',
        'aoa.identificatie',
        'gor.openbareRuimteNaam',
        'aoa.huisnummer',
        'aoa.huisletter',
        'aoa.huisnummertoevoeging',
      );
      foreach ($field_names as $field_name) {
        $element = $xml->createElement("ns2:" . $field_name);
        $element->setAttribute('xsi:nil', 'true');
        $correspondentie_adres->appendChild($element);
      }
      $field_names = array(
        'sub.telefoonnummer',
        'sub.emailadres',
      );
      foreach ($field_names as $field_name) {
        $element = $xml->createElement("ns2:" . $field_name);
        $element->setAttribute('xsi:nil', 'true');
        $object_e->appendChild($element);
      }
      if (dvg_stuf_bg_natuurlijkpersoon_gemeentevaninschrijving_enabled() && $method === 'vraagAntwoord') {
        $field_names = array(
          'inp.gemeenteVanInschrijving',
        );
        foreach ($field_names as $field_name) {
          $element = $xml->createElement("ns2:" . $field_name);
          $element->setAttribute('xsi:nil', 'true');
          $object_e->appendChild($element);
        }
      }
    }
    else {
      $scope = $xml->createElement("ns2:scope");
      $xml->appendChild($scope);
      $object_e = $xml->createElement("ns2:object");
      $object_e->setAttribute('ns1:entiteittype', 'NPS');
      if ($method !== 'prs') {
        $object_e->setAttribute('ns1:scope', 'alles');
      }
      $scope->appendChild($object_e);
    }
    $data = $xml->saveXML($gelijk);
    $message['gelijk'] = new SoapVar($data, XSD_ANYXML);
    $data = $xml->saveXML($scope);
    $message['scope'] = new SoapVar($data, XSD_ANYXML);
    try {
      $start = microtime(TRUE);
      $response = $soap->{$api_method}($message);

      $duration = microtime(TRUE) - $start;
      if ($duration >= variable_get('dvg_stuf_api_duration_threshold', 2)) {
        watchdog('dvg_stuf_bg', '@method duration exceeded threshold: @durations', array(
          '@method' => $api_method,
          '@duration' => round($duration, 2),
        ), WATCHDOG_WARNING);
      }
      if (isset($response->antwoord->object)) {
        // Store the results in cache.
        $expire = REQUEST_TIME + variable_get('dvg_stuf_bg_cache_timeout', 3600);
        cache_set($cid, encrypt(serialize($response->antwoord->object), array('base64' => TRUE)), 'cache', $expire);
        return $response->antwoord->object;
      }
      else {
        // Anonymize BSN if not debug mode.
        $message_bsn = dvg_stuf_bg_debug_mode() ? $bsn : '******' . substr($bsn, -3);
        watchdog('dvg_stuf_bg', 'Prefill: No NatuurlijkPersoon Data Found for BSN: @bsn', array('@bsn' => $message_bsn), WATCHDOG_INFO);
        return FALSE;
      }

    }
    catch (Exception $ex) {
      _dvg_stuf_bg_soap_error_message($ex, $soap, $method);
    }
  }
  return FALSE;
}

/**
 * Retrieve GezinssituatieOpAdresAanvrager from StUF-BG.
 */
function dvg_stuf_bg_gezinssituatie_op_adres_aanvrager($bsn = FALSE, $reset = FALSE) {
  global $user;
  $cache_id = 'npsLv01-prs-GezinssituatieOpAdresAanvrager';
  $url = variable_get('dvg_stuf_bg_gezinssituatieopadresaanvrager_api_url');
  $wsdl = drupal_get_path('module', 'dvg_stuf_bg') . '/wsdl/bg0310/prs/bg0310_vraagAntwoord_prs.wsdl';
  $method = 'npsLv01-prs-GezinssituatieOpAdresAanvrager';
  $call_type = 'gezinssituatieopadresaanvrager';
  drupal_alter('dvg_stuf_bg_api_call', $wsdl, $method, $call_type);
  if (dvg_authentication_external_logged_in($user, ['digid']) || _dvg_stuf_bg_allowed_prefill_roles()) {
    if (dvg_stuf_bg_debug_mode()) {
      // @todo use generic BSN.
      $bsn = variable_get('dvg_stuf_bg_debug_bsn', '');
    }
    else {
      $bsn = dvg_authentication_get_external_user_value('bsn');
    }
  }
  if ($bsn) {
    // Ensure 9 digit bsn number.
    $bsn = str_pad($bsn, 9, '0', STR_PAD_LEFT);
    // Add a unique cache id per environment.
    $args['cache_id'] = get_cache_id();
    $args['bsn'] = $bsn;
    $cid = 'dvg_stuf_bg__' . $cache_id . '__' . substr(md5(serialize($args)), 0, 8);
    if (!$reset && $cache = cache_get($cid)) {

      // Make sure the cache isn't expired.
      if ($cache->expire > REQUEST_TIME) {
        return unserialize(decrypt($cache->data, array('base64' => TRUE)));
      }
    }

    // Init SOAP client.
    // Set the connection duration time-out.
    if (!ini_set('default_socket_timeout', variable_get('dvg_stuf_bg_socket_timeout', 30))) {
      watchdog('dvg_stuf_bg', 'Unable to set the default_socket_timeout to @secs', array(
        '@secs' => variable_get('dvg_stuf_bg_socket_timeout', 30),
      ), WATCHDOG_ERROR);
    }
    $options = array(
      'connection_timeout' => variable_get('dvg_stuf_bg_connection_timeout', 2),
      'exceptions' => TRUE,
      'location' => $url,
      'trace' => TRUE,
    );
    drupal_alter('dvg_stuf_bg_soap_options', $options);

    $soap = new SoapClient($wsdl, $options);
    $reference_number = strval(round(microtime(TRUE) * 1000));
    $time_message = date('YmdHis') . '000';
    $message = array(
      'stuurgegevens' => array(
        'berichtcode' => 'Lv01',
        'zender' => array(
          'organisatie' => variable_get('dvg_stuf_bg_sender_organization'),
          'applicatie' => variable_get('dvg_stuf_bg_sender_application'),
        ),
        'ontvanger' => array(
          'applicatie' => variable_get('dvg_stuf_bg_receiver_application'),
        ),
        'referentienummer' => $reference_number,
        'tijdstipBericht' => $time_message,
        'entiteittype' => 'NPS',
      ),
      'parameters' => array(
        'sortering' => '0',
        'indicatorVervolgvraag' => FALSE,
        'maximumAantal' => '1',
      ),
    );
    $var = variable_get('dvg_stuf_bg_receiver_organization', '');
    if (!empty($var)) {
      $message['stuurgegevens']['ontvanger']['organisatie'] = variable_get('dvg_stuf_bg_receiver_organization');
    }
    $var = variable_get('dvg_stuf_bg_receiver_administration', '');
    if (!empty($var)) {
      $message['stuurgegevens']['ontvanger']['administratie'] = variable_get('dvg_stuf_bg_receiver_administration');
    }
    $xml = new DOMDocument();
    $xml->formatOutput = TRUE;

    $gelijk = $xml->createElement("ns2:gelijk");
    $gelijk->setAttribute('ns1:entiteittype', 'NPS');
    $gelijk_bsn = $xml->createElement("ns2:inp.bsn");
    $gelijk_bsn_text = $xml->createTextNode($bsn);
    $gelijk_bsn->appendChild($gelijk_bsn_text);
    $gelijk->appendChild($gelijk_bsn);
    $xml->appendChild($gelijk);
    $scope = $xml->createElement("ns2:scope");
    $scope->setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
    $xml->appendChild($scope);
    $object_e = $xml->createElement("ns2:object");
    $object_e->setAttribute('ns1:entiteittype', 'NPS');
    $scope->appendChild($object_e);
    $field_names = array(
      'inp.bsn',
      'geslachtsnaam',
      'voorvoegselGeslachtsnaam',
      'voorletters',
      'voornamen',
      'aanduidingNaamgebruik',
      'geslachtsnaamPartner',
      'voorvoegselGeslachtsnaamPartner',
      'geslachtsaanduiding',
      'geboortedatum',
      'inp.geboorteplaats',
      'inp.geboorteLand',
    );
    foreach ($field_names as $field_name) {
      $element = $xml->createElement("ns2:" . $field_name);
      $element->setAttribute('xsi:nil', 'true');
      $object_e->appendChild($element);
    }
    $verblijfsadres = $xml->createElement("ns2:verblijfsadres");
    $object_e->appendChild($verblijfsadres);
    $field_names = array(
      'aoa.identificatie',
      'wpl.identificatie',
      'wpl.woonplaatsNaam',
      'gor.openbareRuimteNaam',
      'gor.straatnaam',
      'aoa.postcode',
      'aoa.huisnummer',
      'aoa.huisletter',
      'aoa.huisnummertoevoeging',
      'inp.locatiebeschrijving',
    );
    foreach ($field_names as $field_name) {
      $element = $xml->createElement("ns2:" . $field_name);
      $element->setAttribute('xsi:nil', 'true');
      $verblijfsadres->appendChild($element);
    }
    $field_names = array(
      'sub.telefoonnummer',
      'sub.emailadres',
    );
    foreach ($field_names as $field_name) {
      $element = $xml->createElement("ns2:" . $field_name);
      $element->setAttribute('xsi:nil', 'true');
      $object_e->appendChild($element);
    }
    $heeft_als_echtgenoot_partner = $xml->createElement("ns2:inp.heeftAlsEchtgenootPartner");
    $heeft_als_echtgenoot_partner->setAttribute('ns1:entiteittype', 'NPSNPSHUW');
    $object_e->appendChild($heeft_als_echtgenoot_partner);
    $gerelateerde = $xml->createElement("ns2:gerelateerde");
    $gerelateerde->setAttribute('ns1:entiteittype', 'NPS');
    $heeft_als_echtgenoot_partner->appendChild($gerelateerde);
    $field_names = array(
      'inp.bsn',
      'geslachtsnaam',
      'voorvoegselGeslachtsnaam',
      'voorletters',
      'voornamen',
      'geslachtsaanduiding',
      'geboortedatum',
    );
    foreach ($field_names as $field_name) {
      $element = $xml->createElement("ns2:" . $field_name);
      $element->setAttribute('xsi:nil', 'true');
      $gerelateerde->appendChild($element);
    }
    $heeft_als_kinderen = $xml->createElement("ns2:inp.heeftAlsKinderen");
    $heeft_als_kinderen->setAttribute('ns1:entiteittype', 'NPSNPSKND');
    $object_e->appendChild($heeft_als_kinderen);
    $gerelateerde = $xml->createElement("ns2:gerelateerde");
    $gerelateerde->setAttribute('ns1:entiteittype', 'NPS');
    $heeft_als_kinderen->appendChild($gerelateerde);
    $field_names = array(
      'inp.bsn',
      'geslachtsnaam',
      'voorvoegselGeslachtsnaam',
      'voorletters',
      'voornamen',
      'geslachtsaanduiding',
      'geboortedatum',
    );
    foreach ($field_names as $field_name) {
      $element = $xml->createElement("ns2:" . $field_name);
      $element->setAttribute('xsi:nil', 'true');
      $gerelateerde->appendChild($element);
    }
    $heeft_als_ouders = $xml->createElement("ns2:inp.heeftAlsOuders");
    $heeft_als_ouders->setAttribute('ns1:entiteittype', 'NPSNPSOUD');
    $object_e->appendChild($heeft_als_ouders);
    $gerelateerde = $xml->createElement("ns2:gerelateerde");
    $gerelateerde->setAttribute('ns1:entiteittype', 'NPS');
    $heeft_als_ouders->appendChild($gerelateerde);
    $field_names = array(
      'inp.bsn',
      'geslachtsnaam',
      'voorvoegselGeslachtsnaam',
      'voorletters',
      'voornamen',
      'geslachtsaanduiding',
      'geboortedatum',
    );
    foreach ($field_names as $field_name) {
      $element = $xml->createElement("ns2:" . $field_name);
      $element->setAttribute('xsi:nil', 'true');
      $gerelateerde->appendChild($element);
    }
    $heeft_als_nationaliteit = $xml->createElement("ns2:inp.heeftAlsNationaliteit");
    $heeft_als_nationaliteit->setAttribute('ns1:entiteittype', 'NPSNAT');
    $object_e->appendChild($heeft_als_nationaliteit);
    $gerelateerde = $xml->createElement("ns2:gerelateerde");
    $gerelateerde->setAttribute('ns1:entiteittype', 'NAT');
    $heeft_als_nationaliteit->appendChild($gerelateerde);
    $field_names = array(
      'code',
      'omschrijving',
    );
    foreach ($field_names as $field_name) {
      $element = $xml->createElement("ns2:" . $field_name);
      $element->setAttribute('xsi:nil', 'true');
      $gerelateerde->appendChild($element);
    }
    $data = $xml->saveXML($gelijk);
    $message['gelijk'] = new SoapVar($data, XSD_ANYXML);
    $data = $xml->saveXML($scope);
    $message['scope'] = new SoapVar($data, XSD_ANYXML);
    try {
      $start = microtime(TRUE);
      $response = $soap->{$method}($message);

      $duration = microtime(TRUE) - $start;
      if ($duration >= variable_get('dvg_stuf_api_duration_threshold', 2)) {
        watchdog('dvg_stuf_bg', '@method duration exceeded threshold: @durations', array(
          '@method' => $method,
          '@duration' => round($duration, 2),
        ), WATCHDOG_WARNING);
      }
      if (isset($response->antwoord->object)) {
        // Store the results in cache.
        $expire = REQUEST_TIME + variable_get('dvg_stuf_bg_cache_timeout', 3600);
        cache_set($cid, encrypt(serialize($response->antwoord->object), array('base64' => TRUE)), 'cache', $expire);
        return $response->antwoord->object;
      }
      else {
        // Anonymize BSN if not debug mode.
        $message_bsn = dvg_stuf_bg_debug_mode() ? $bsn : '******' . substr($bsn, -3);
        watchdog('dvg_stuf_bg', 'Prefill: No GezinssituatieOpAdresAanvrager Data Found for BSN: @bsn', array('@bsn' => $message_bsn), WATCHDOG_INFO);
        return FALSE;
      }

    }
    catch (Exception $ex) {
      _dvg_stuf_bg_soap_error_message($ex, $soap, $method);
    }
  }
  return FALSE;
}

/**
 * List familymembers from StUF-BG.
 */
function dvg_stuf_bg_familymembers($bsn = FALSE, $reset = FALSE) {
  $familymembers = array();
  if ($family = dvg_stuf_bg_gezinssituatie_op_adres_aanvrager($bsn, $reset)) {
    if (!empty($family->{'inp.heeftAlsEchtgenootPartner'})) {
      $related = $family->{'inp.heeftAlsEchtgenootPartner'}->gerelateerde;
      $familymembers[$related->{'inp.bsn'}->_] = array(
        'geslachtsnaam' => $related->geslachtsnaam->_,
        'voorvoegselGeslachtsnaam' => _dvg_stuf_bg_get_property_value($related, 'voorvoegselGeslachtsnaam'),
        'voorletters' => _dvg_stuf_bg_get_property_value($related, 'voorletters'),
        'voornamen' => $related->voornamen->_,
        'geslachtsaanduiding' => _dvg_stuf_bg_get_property_value($related, 'geslachtsaanduiding'),
        'geboortedatum' => $related->geboortedatum->_,
        'entiteittype' => $family->{'inp.heeftAlsEchtgenootPartner'}->entiteittype,
      );
    }
    if (!empty($family->{'inp.heeftAlsKinderen'})) {
      $childs = is_array($family->{'inp.heeftAlsKinderen'}) ? $family->{'inp.heeftAlsKinderen'} : array($family->{'inp.heeftAlsKinderen'});
      foreach ($childs as $child) {
        $related = $child->gerelateerde;
        $familymembers[$related->{'inp.bsn'}->_] = array(
          'geslachtsnaam' => $related->geslachtsnaam->_,
          'voorvoegselGeslachtsnaam' => _dvg_stuf_bg_get_property_value($related, 'voorvoegselGeslachtsnaam'),
          'voorletters' => _dvg_stuf_bg_get_property_value($related, 'voorletters'),
          'voornamen' => $related->voornamen->_,
          'geslachtsaanduiding' => _dvg_stuf_bg_get_property_value($related, 'geslachtsaanduiding'),
          'geboortedatum' => $related->geboortedatum->_,
          'entiteittype' => $child->entiteittype,
        );
      }
    }
    if (!empty($family->{'inp.heeftAlsOuders'})) {
      $parents = is_array($family->{'inp.heeftAlsOuders'}) ? $family->{'inp.heeftAlsOuders'} : array($family->{'inp.heeftAlsOuders'});
      foreach ($parents as $parent) {
        $related = $parent->gerelateerde;
        $familymembers[$related->{'inp.bsn'}->_] = array(
          'geslachtsnaam' => $related->geslachtsnaam->_,
          'voorvoegselGeslachtsnaam' => _dvg_stuf_bg_get_property_value($related, 'voorvoegselGeslachtsnaam'),
          'voorletters' => _dvg_stuf_bg_get_property_value($related, 'voorletters'),
          'voornamen' => $related->voornamen->_,
          'geslachtsaanduiding' => _dvg_stuf_bg_get_property_value($related, 'geslachtsaanduiding'),
          'geboortedatum' => $related->geboortedatum->_,
          'entiteittype' => $parent->entiteittype,
        );
      }
    }
  }
  return $familymembers;
}

/**
 * Generate a id used for the cache based on the current domain.
 */
function get_cache_id() {
  return url(variable_get('site_frontpage', 'node'), array('absolute' => TRUE));
}

/**
 * Retrieve Vestiging from StUF-BG.
 */
function dvg_stuf_bg_vestiging($reset = FALSE) {
  global $user;
  $url = variable_get('dvg_stuf_bg_vestiging_api_url');
  $wsdl = drupal_get_path('module', 'dvg_stuf_bg') . '/wsdl/bg0310/prs/bg0310_vraagAntwoord_prs.wsdl';
  $method = 'vesLv01-prs-Vestiging';
  $call_type = 'vestiging';
  drupal_alter('dvg_stuf_bg_api_call', $wsdl, $method, $call_type);
  $vestigings_nummer = FALSE;
  if (dvg_authentication_external_logged_in($user, ['eherkenning']) || _dvg_stuf_bg_allowed_prefill_roles()) {
    if (dvg_stuf_bg_debug_mode()) {
      $vestigings_nummer = variable_get('dvg_stuf_bg_debug_kvk_vestigings_nummer', '');
    }
    else {
      $vestigings_nummer = dvg_authentication_get_external_user_value('kvk_vestigings_nummer');
    }
  }
  if ($vestigings_nummer) {
    // Ensure 12 digit vestiging number.
    if (strlen($vestigings_nummer) > 12) {
      $vestigings_nummer = substr($vestigings_nummer, -12);
    }
    $vestigings_nummer = str_pad($vestigings_nummer, 12, '0', STR_PAD_LEFT);
    // Add a unique cache id per environment.
    $args['cache_id'] = get_cache_id();
    $args['vestiging'] = $vestigings_nummer;
    $cid = 'dvg_stuf_bg__' . $method . '__' . substr(md5(serialize($args)), 0, 8);
    if (!$reset && $cache = cache_get($cid)) {

      // Make sure the cache isn't expired.
      if ($cache->expire > REQUEST_TIME) {
        return unserialize(decrypt($cache->data, array('base64' => TRUE)));
      }
    }

    // Init SOAP client.
    // Set the connection duration time-out.
    if (!ini_set('default_socket_timeout', variable_get('dvg_stuf_bg_socket_timeout', 30))) {
      watchdog('dvg_stuf_bg', 'Unable to set the default_socket_timeout to @secs', array(
        '@secs' => variable_get('dvg_stuf_bg_socket_timeout', 30),
      ), WATCHDOG_ERROR);
    }
    $options = array(
      'connection_timeout' => variable_get('dvg_stuf_bg_connection_timeout', 2),
      'exceptions' => TRUE,
      'location' => $url,
      'trace' => TRUE,
    );
    drupal_alter('dvg_stuf_bg_soap_options', $options);
    $soap = new SoapClient($wsdl, $options);
    $reference_number = strval(round(microtime(TRUE) * 1000));
    $time_message = date('YmdHis') . '000';
    $message = array(
      'stuurgegevens' => array(
        'berichtcode' => 'Lv01',
        'zender' => array(
          'organisatie' => variable_get('dvg_stuf_bg_sender_organization'),
          'applicatie' => variable_get('dvg_stuf_bg_sender_application'),
        ),
        'ontvanger' => array(
          'applicatie' => variable_get('dvg_stuf_bg_receiver_application'),
        ),
        'referentienummer' => $reference_number,
        'tijdstipBericht' => $time_message,
        'entiteittype' => 'VES',
      ),
      'parameters' => array(
        'sortering' => '0',
        'indicatorVervolgvraag' => FALSE,
        'maximumAantal' => '1',
        'indicatorAantal' => 'true',
      ),
    );
    $var = variable_get('dvg_stuf_bg_receiver_organization', '');
    if (!empty($var)) {
      $message['stuurgegevens']['ontvanger']['organisatie'] = variable_get('dvg_stuf_bg_receiver_organization');
    }
    $var = variable_get('dvg_stuf_bg_receiver_administration', '');
    if (!empty($var)) {
      $message['stuurgegevens']['ontvanger']['administratie'] = variable_get('dvg_stuf_bg_receiver_administration');
    }
    $xml = new DOMDocument();
    $xml->formatOutput = TRUE;

    $gelijk = $xml->createElement("ns2:gelijk");
    $gelijk->setAttribute('ns1:entiteittype', 'VES');
    $gelijk_vestiging = $xml->createElement("ns2:vestigingsNummer");
    $gelijk_vestiging_text = $xml->createTextNode($vestigings_nummer);
    $gelijk_vestiging->appendChild($gelijk_vestiging_text);
    $gelijk->appendChild($gelijk_vestiging);
    $xml->appendChild($gelijk);
    $scope = $xml->createElement("ns2:scope");
    $scope->setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
    $xml->appendChild($scope);
    $object_e = $xml->createElement("ns2:object");
    $object_e->setAttribute('ns1:entiteittype', 'VES');
    $scope->appendChild($object_e);
    $field_names = array(
      'vestigingsNummer',
      'handelsnaam',
      'handelsnaamVerkort',
    );
    foreach ($field_names as $field_name) {
      $element = $xml->createElement("ns2:" . $field_name);
      $element->setAttribute('xsi:nil', 'true');
      $object_e->appendChild($element);
    }
    $verblijfsadres = $xml->createElement("ns2:verblijfsadres");
    $object_e->appendChild($verblijfsadres);
    $field_names = array(
      'aoa.identificatie',
      'wpl.identificatie',
      'wpl.woonplaatsNaam',
      'gor.openbareRuimteNaam',
      'gor.straatnaam',
      'aoa.postcode',
      'aoa.huisnummer',
      'aoa.huisletter',
      'aoa.huisnummertoevoeging',
      'inp.locatiebeschrijving',
    );
    foreach ($field_names as $field_name) {
      $element = $xml->createElement("ns2:" . $field_name);
      $element->setAttribute('xsi:nil', 'true');
      $verblijfsadres->appendChild($element);
    }
    $data = $xml->saveXML($gelijk);
    $message['gelijk'] = new SoapVar($data, XSD_ANYXML);
    $data = $xml->saveXML($scope);
    $message['scope'] = new SoapVar($data, XSD_ANYXML);
    try {
      $start = microtime(TRUE);
      $response = $soap->{$method}($message);

      $duration = microtime(TRUE) - $start;
      if ($duration >= variable_get('dvg_stuf_api_duration_threshold', 2)) {
        watchdog('dvg_stuf_bg', '@method duration exceeded threshold: @durations', array(
          '@method' => $method,
          '@duration' => round($duration, 2),
        ), WATCHDOG_WARNING);
      }
      if (isset($response->antwoord->object)) {
        // Store the results in cache.
        $expire = REQUEST_TIME + variable_get('dvg_stuf_bg_cache_timeout', 3600);
        cache_set($cid, encrypt(serialize($response->antwoord->object), array('base64' => TRUE)), 'cache', $expire);
        return $response->antwoord->object;
      }
      else {
        watchdog('dvg_stuf_bg', 'Prefill: No Vestiging Data Found for vestigingsNummer: @vestigings_nummer', array('@vestigings_nummer' => $vestigings_nummer), WATCHDOG_INFO);
        return FALSE;
      }

    }
    catch (Exception $ex) {
      _dvg_stuf_bg_soap_error_message($ex, $soap, $method);

    }
  }
  return FALSE;
}


/**
 * Retrieve AOA from StUF-BG.
 */
function dvg_stuf_bg_adresgegevens($postal_code, $house_number, $house_letter = '', $house_number_addition = '', $reset = FALSE) {
  $cache_id = 'aoaLv01';
  $url = variable_get('dvg_stuf_bg_aoa_api_url');
  $wsdl = drupal_get_path('module', 'dvg_stuf_bg') . '/wsdl/bg0310/vraagAntwoord/bg0310_beantwoordVraag_vraagAntwoord.wsdl';
  $method = 'aoaLv01';
  $call_type = 'aoa';
  drupal_alter('dvg_stuf_bg_api_call', $wsdl, $method, $call_type);
  $postal_code = strtoupper($postal_code);
  // Add a unique cache id per environment.
  $args['cache_id'] = get_cache_id();
  $args['postal_code'] = $postal_code;
  $args['house_number'] = $house_number;
  $args['house_letter'] = $house_letter;
  $args['house_number_addition'] = $house_number_addition;
  $cid = 'dvg_stuf_bg__' . $cache_id . '__' . substr(md5(serialize($args)), 0, 8);
  if (!$reset && $cache = cache_get($cid)) {

    // Make sure the cache isn't expired.
    if ($cache->expire > REQUEST_TIME) {
      return unserialize(decrypt($cache->data, array('base64' => TRUE)));
    }
  }

  // Init SOAP client.
  // Set the connection duration time-out.
  if (!ini_set('default_socket_timeout', variable_get('dvg_stuf_bg_socket_timeout', 30))) {
    watchdog('dvg_stuf_bg', 'Unable to set the default_socket_timeout to @secs', array(
      '@secs' => variable_get('dvg_stuf_bg_socket_timeout', 30),
    ), WATCHDOG_ERROR);
  }
  $options = array(
    'connection_timeout' => variable_get('dvg_stuf_bg_connection_timeout', 2),
    'exceptions' => TRUE,
    'location' => $url,
    'trace' => TRUE,
  );
  drupal_alter('dvg_stuf_bg_soap_options', $options);
  $soap = new SoapClient($wsdl, $options);
  $reference_number = _dvg_stuf_bg_generate_reference();
  $time_message = date('YmdHis') . '00';
  $message = array(
    'stuurgegevens' => array(
      'berichtcode' => 'Lv01',
      'zender' => array(
        'organisatie' => variable_get('dvg_stuf_bg_sender_organization'),
        'applicatie' => variable_get('dvg_stuf_bg_sender_application'),
      ),
      'ontvanger' => array(
        'applicatie' => variable_get('dvg_stuf_bg_receiver_application'),
      ),
      'referentienummer' => $reference_number,
      'tijdstipBericht' => $time_message,
      'entiteittype' => 'AOA',
    ),
    'parameters' => array(
      'sortering' => '0',
      'indicatorVervolgvraag' => FALSE,
      'maximumAantal' => '1',
    ),
  );
  $var = variable_get('dvg_stuf_bg_receiver_organization', '');
  if (!empty($var)) {
    $message['stuurgegevens']['ontvanger']['organisatie'] = variable_get('dvg_stuf_bg_receiver_organization');
  }
  $var = variable_get('dvg_stuf_bg_receiver_administration', '');
  if (!empty($var)) {
    $message['stuurgegevens']['ontvanger']['administratie'] = variable_get('dvg_stuf_bg_receiver_administration');
  }
  $xml = new DOMDocument();
  $xml->formatOutput = TRUE;

  $gelijk = $xml->createElement("ns2:gelijk");
  $gelijk->setAttribute('ns1:entiteittype', 'AOA');
  $gelijk->setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
  $gelijk_huisnummer = $xml->createElement("ns2:huisnummer");
  $gelijk_huisnummer_text = $xml->createTextNode($house_number);
  $gelijk_huisnummer->appendChild($gelijk_huisnummer_text);
  $gelijk->appendChild($gelijk_huisnummer);
  $gelijk_huisletter = $xml->createElement("ns2:huisletter");
  $gelijk_huisletter_text = $xml->createTextNode($house_letter);
  if (empty($house_letter)) {
    $gelijk_huisletter->setAttribute('xsi:nil', 'true');
  }
  $gelijk_huisletter->appendChild($gelijk_huisletter_text);
  $gelijk->appendChild($gelijk_huisletter);
  $gelijk_huisnummertoevoeging = $xml->createElement("ns2:huisnummertoevoeging");
  $gelijk_huisnummertoevoeging_text = $xml->createTextNode($house_number_addition);
  if (empty($house_number_addition)) {
    $gelijk_huisnummertoevoeging->setAttribute('xsi:nil', 'true');
  }
  $gelijk_huisnummertoevoeging->appendChild($gelijk_huisnummertoevoeging_text);
  $gelijk->appendChild($gelijk_huisnummertoevoeging);
  $gelijk_postcode = $xml->createElement("ns2:postcode");
  $gelijk_postcode_text = $xml->createTextNode($postal_code);
  $gelijk_postcode->appendChild($gelijk_postcode_text);
  $gelijk->appendChild($gelijk_postcode);
  $gelijk_einddatum_object = $xml->createElement("ns2:einddatumObject", "");
  $gelijk_einddatum_object->setAttribute('xsi:nil', 'true');
  $gelijk->appendChild($gelijk_einddatum_object);
  $xml->appendChild($gelijk);
  $scope = $xml->createElement("ns2:scope");
  $scope->setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
  $xml->appendChild($scope);
  $object_e = $xml->createElement("ns2:object");
  $object_e->setAttribute('ns1:entiteittype', 'AOA');
  $scope->appendChild($object_e);
  $field_names = array(
    'wpl.woonplaatsNaam',
    'gor.openbareRuimteNaam',
    'huisnummer',
    'huisletter',
    'huisnummertoevoeging',
    'postcode',
    'gor.straatnaam',
  );
  foreach ($field_names as $field_name) {
    $element = $xml->createElement("ns2:" . $field_name);
    $element->setAttribute('xsi:nil', 'true');
    $object_e->appendChild($element);
  }

  $data = $xml->saveXML($gelijk);
  $message['gelijk'] = new SoapVar($data, XSD_ANYXML);
  $data = $xml->saveXML($scope);
  $message['scope'] = new SoapVar($data, XSD_ANYXML);
  try {
    $start = microtime(TRUE);
    $response = $soap->{$method}($message);
    $duration = microtime(TRUE) - $start;
    if ($duration >= variable_get('dvg_stuf_api_duration_threshold', 2)) {
      watchdog('dvg_stuf_bg', '@method duration exceeded threshold: @durations', array(
        '@method' => $method,
        '@duration' => round($duration, 2),
      ), WATCHDOG_WARNING);
    }
    if (isset($response->antwoord->object)) {
      // Store the results in cache.
      $expire = REQUEST_TIME + variable_get('dvg_stuf_bg_cache_timeout', 3600);
      cache_set($cid, encrypt(serialize($response->antwoord->object), array('base64' => TRUE)), 'cache', $expire);
      return $response->antwoord->object;
    }
    else {
      watchdog('dvg_stuf_bg', 'Prefill: No Data Found for Address: @postal_code @house_number@house_letter@house_number_addition', array(
          '@postal_code' => $postal_code,
          '@house_number' => $house_number,
          '@house_letter' => $house_letter,
          '@house_number_addition' => $house_number_addition,
      ), WATCHDOG_INFO);
      return FALSE;
    }

  }
  catch (Exception $ex) {
    _dvg_stuf_bg_soap_error_message($ex, $soap, $method);
  }
  return FALSE;
}

/**
 * Implements hook_dvg_global_testdata().
 */
function dvg_stuf_bg_dvg_global_testdata() {
  $form = array();
  if (dvg_stuf_bg_debug_mode()) {
    $form['stuf_bg'] = array(
      '#type' => 'fieldset',
      '#title' => t('StUF-BG'),
    );
    if (dvg_stuf_bg_natuurlijkpersoon_enabled() || dvg_stuf_bg_gezinssituatieopadresaanvrager_enabled()) {
      $form['stuf_bg']['dvg_stuf_bg_debug_bsn'] = array(
        '#type' => 'textfield',
        '#title' => t('Debug BSN'),
        '#default_value' => variable_get('dvg_stuf_bg_debug_bsn', ''),
        '#description' => t('Debug BSN used when debug mode is on.'),
      );
    }
    if (dvg_stuf_bg_vestiging_enabled()) {
      $form['stuf_bg']['dvg_stuf_bg_debug_kvk_vestigings_nummer'] = array(
        '#type' => 'textfield',
        '#title' => t('Debug KvK vestigingsNummer'),
        '#default_value' => variable_get('dvg_stuf_bg_debug_kvk_vestigings_nummer', ''),
        '#description' => t('Debug KvK vestigingsNummer used when debug mode is on.'),
      );
    }
  }
  $form['#validate'][] = 'dvg_stuf_bg_testdata_stuf_bg_attempt';
  $form['#submit'][] = 'dvg_stuf_bg_dvg_global_testdata_submit';
  return $form;
}

/**
 * Generates a 12 chars long referencecode.
 *
 * First part is a timestamp which is complemented by a random number.
 */
function _dvg_stuf_bg_generate_reference() {
  $time = time();
  $length = 12 - strlen($time);
  $random = '';
  for ($i = 0; $i < $length; $i++) {
    $random .= mt_rand(0, 9);
  }
  return (int) $time . $random;
}

/**
 * Helper function to check if the user is allowed to use the prefill.
 */
function _dvg_stuf_bg_allowed_prefill_roles() {
  global $user;
  $roles = array();
  // Additional roles can be added with a hook_alter().
  drupal_alter('dvg_stuf_bg_allowed_prefill_roles', $roles);

  if (!empty($roles)) {
    // Check if the user has any of the allowed roles.
    foreach ($roles as $role) {
      if (in_array($role, $user->roles)) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Submit form for dvg_stuf_bg_dvg_global test data.
 */
function dvg_stuf_bg_dvg_global_testdata_submit($form, &$form_state) {
  global $user;
  // Just get the headers if we can or else use the SERVER global.
  if (function_exists('apache_request_headers')) {
    $headers = apache_request_headers();
  }
  else {
    $headers = $_SERVER;
  }

  // If $headers is not an array, skip the forward header fetching.
  if (!is_array($headers)) {
    $ip = dvg_stuf_bg_get_ip_address();
  }
  else {
    // Get the forwarded IP if it exists.
    if (array_key_exists('X-Forwarded-For', $headers) &&
      filter_var($headers['X-Forwarded-For'],
        FILTER_VALIDATE_IP,
        FILTER_FLAG_IPV4
      )
    ) {
      $ip = $headers['X-Forwarded-For'];
    }
    elseif (array_key_exists('HTTP_X_FORWARDED_FOR', $headers) &&
      filter_var($headers['HTTP_X_FORWARDED_FOR'],
        FILTER_VALIDATE_IP,
        FILTER_FLAG_IPV4
      )
    ) {
      $ip = $headers['HTTP_X_FORWARDED_FOR'];
    }
    else {
      $ip = dvg_stuf_bg_get_ip_address();
    }
  }

  $user_options = array(
    'Date' => date('Y-m-d H:i:s'),
    'IP_ADDRESS' => $ip,
    'User' => $user->name,
  );

  if (is_array($headers)) {
    if (isset($headers['User-Agent'])) {
      $user_options['User-Agent'] = $headers['User-Agent'];
    }
    if (isset($headers['Cookie'])) {
      $user_options['Cookie'] = $headers['Cookie'];
    }
    if (isset($headers['Accept-Language'])) {
      $user_options['Accept-Language'] = $headers['Accept-Language'];
    }
  }

  watchdog('dvg_stuf_bg', 'The testdata form has been submitted by this client.', $user_options);
}

/**
 * Get ip address from the client.
 *
 * @return bool|string
 *   Return ip address. This is not 100% foolproof.
 */
function dvg_stuf_bg_get_ip_address() {
  $ip_keys = array(
    'HTTP_CLIENT_IP',
    'HTTP_X_FORWARDED_FOR',
    'HTTP_X_FORWARDED',
    'HTTP_X_CLUSTER_CLIENT_IP',
    'HTTP_FORWARDED_FOR',
    'HTTP_FORWARDED',
    'REMOTE_ADDR',
  );
  foreach ($ip_keys as $key) {
    if (array_key_exists($key, $_SERVER) === TRUE) {
      foreach (explode(',', $_SERVER[$key]) as $ip) {
        // Trim for safety measures.
        $ip = trim($ip);
        // Attempt to validate IP.
        if (dvg_stuf_bg_validate_ip($ip)) {
          return $ip;
        }
      }
    }
  }
  return ip_address();
}

/**
 * Ensures an ip address is both a valid IP.
 *
 * This does not fall within a private network range.
 *
 * @param string $ip
 *   Possible ip address.
 *
 * @return bool
 *   Return true if ip address is valid.
 */
function dvg_stuf_bg_validate_ip($ip) {
  if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) === FALSE) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Custom validate which checks if testdata BSN has been set and registers this.
 */
function dvg_stuf_bg_testdata_stuf_bg_attempt($form, &$form_state) {
  if (dvg_stuf_bg_natuurlijkpersoon_enabled() || dvg_stuf_bg_gezinssituatieopadresaanvrager_enabled()) {
    $name = $form_state['values']['dvg_stuf_bg_debug_bsn'];
    $type = 'testdata_stuf_bg_bsn_attempts';

    if (module_exists('dvg_logger') && $name) {
      _dvg_logger_register_log($type, $name);
    }
  }
  if (dvg_stuf_bg_vestiging_enabled()) {
    $name = $form_state['values']['dvg_stuf_bg_debug_kvk_vestigings_nummer'];
    $type = 'testdata_stuf_bg_kvk_vestigings_nummer_attempts';

    if (module_exists('dvg_logger') && $name) {
      _dvg_logger_register_log($type, $name);
    }
  }

}

/**
 * Gets possible empty property from object.
 */
function _dvg_stuf_bg_get_property_value($object, $property) {
  $value = isset($object->{$property}) ? $object->{$property}->_ : '';
  return $value;
}

/**
 * Check if natuurlijkPersoon is enabled.
 */
function dvg_stuf_bg_natuurlijkpersoon_enabled() {
  return variable_get('dvg_stuf_bg_natuurlijkpersoon_enabled', TRUE);
}

/**
 * Check if gezinsSituatieOpAdresAanvrager is enabled.
 */
function dvg_stuf_bg_gezinssituatieopadresaanvrager_enabled() {
  return variable_get('dvg_stuf_bg_gezinssituatieopadresaanvrager_enabled', FALSE);
}

/**
 * Check if vestiging is enabled.
 */
function dvg_stuf_bg_vestiging_enabled() {
  return variable_get('dvg_stuf_bg_vestiging_enabled', FALSE);
}


/**
 * Check if AOA is enabled.
 */
function dvg_stuf_bg_aoa_enabled() {
  return variable_get('dvg_stuf_bg_aoa_enabled', FALSE);
}

/**
 * Check if Debug Mode is enabled.
 */
function dvg_stuf_bg_debug_mode() {
  return variable_get('dvg_stuf_bg_debug_mode', FALSE);
}

/**
 * Api method of natuurlijkPersoon call.
 */
function dvg_stuf_bg_natuurlijkpersoon_api_method() {
  return variable_get('dvg_stuf_bg_natuurlijkpersoon_api_method', 'prs');
}

/**
 * Api scope of natuurlijkPersoon call.
 */
function dvg_stuf_bg_natuurlijkpersoon_api_scope() {
  return variable_get('dvg_stuf_bg_natuurlijkpersoon_api_scope', 'specific');
}

/**
 * Implements hook_dvg_authentication_required_providers().
 */
function dvg_stuf_bg_dvg_authentication_required_providers() {
  return [
    'digid',
  ];
}

/**
 * Add gemeenteVanInschrijving to request properties of natuurlijkPersoon call.
 */
function dvg_stuf_bg_natuurlijkpersoon_gemeentevaninschrijving_enabled() {
  return in_array(dvg_stuf_bg_natuurlijkpersoon_api_method(), array('vraagAntwoord', 'prsVraagAntwoord')) &&
    dvg_stuf_bg_natuurlijkpersoon_api_scope() === 'specific' &&
    variable_get('dvg_stuf_bg_natuurlijkpersoon_gemeentevaninschrijving_enabled', FALSE);
}

/**
 * Add error messages to watchdog.
 */
function _dvg_stuf_bg_soap_error_message($ex, $soap, $method) {
  $xml_last_response = new DOMDocument();
  $xml_last_response->formatOutput = TRUE;
  $last_response = $soap->__getLastResponse();
  $is_xml = !empty($last_response) ? $xml_last_response->loadXML($last_response) : FALSE;
  if ($is_xml && $details = $xml_last_response->getElementsByTagName('details')) {
    $faultstring = $details->item(0)->nodeValue;
  }
  else {
    $faultstring = $ex->faultstring;
  }
  if (dvg_stuf_bg_debug_mode()) {
    watchdog('dvg_stuf_bg', 'SOAP request @method: @faultstring Last Request: @last_request Last Headers: @last_headers', array(
      '@method' => $method,
      '@faultstring' => $faultstring,
      '@last_request' => var_export($soap->__getLastRequest(), TRUE),
      '@last_headers' => var_export($soap->__getLastRequestHeaders(), TRUE),
    ), WATCHDOG_ERROR);
  }
  else {
    watchdog('dvg_stuf_bg', 'SOAP request @method: @faultstring', array(
      '@method' => $method,
      '@faultstring' => $faultstring,
    ), WATCHDOG_ERROR);
  }
}
