<?php

/**
 * @file
 * Tests for the AuthenticationManager class.
 */

use Drupal\dvg_authentication\AuthenticationManager;

/**
 * Tests the AuthenticationManager functionality.
 */
class DvgAuthenticationManagerTest extends DrupalWebTestCase {

  /**
   * An external user used for testing.
   *
   * @var \stdClass
   */
  protected $externalUser;

  /**
   * Info describing this test.
   *
   * @return array
   *   The test info.
   */
  public static function getInfo() {
    return [
      'name' => t('Dvg Authentication Manager basic tests'),
      'description' => t('Test basic functionality of Dvg Authentication Manager module.'),
      'group' => 'Dvg Authentication',
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $this->profile = 'dvg';
    parent::setUp('dvg_authentication', 'dvg_authentication_dummy');

    // Create a drupal user with the external user role.
    $this->externalUser = $this->drupalCreateUser();

    if ($role = user_role_load_by_name(AuthenticationManager::USER_ROLE)) {
      $edit['roles'] = $this->externalUser->roles;
      $edit['roles'][$role->rid] = $role->name;
      $this->externalUser = user_save($this->externalUser, $edit);
    }

    // Test if the user has the External user role.
    $this->assertTrue(
      AuthenticationManager::getInstance()->isExternalUser($this->externalUser),
      t('User has %role role.', ['%role' => $role->name])
    );
  }

  /**
   * Test an external login based on the dummy login.
   */
  public function testExternalAuthentication() {
    // Test allowed access to anonymous user on the login selection page.
    $this->drupalGet('user/external');
    $this->assertResponse(200);

    // Test allowed access to anonymous user to the dummy authentication
    // callback.
    $this->drupalGet('user/external/dummy');
    $this->assertResponse(200);
    $this->drupalLogout();

    // Don't allow the user access to it's own page.
    $this->drupalLogin($this->externalUser);
    $this->drupalGet('user/' . $this->externalUser->uid . '/edit');
    $this->assertResponse(403);
  }

}
