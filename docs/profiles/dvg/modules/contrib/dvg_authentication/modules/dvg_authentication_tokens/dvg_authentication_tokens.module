<?php

/**
 * @file
 * Contains hooks for DvG Authentication Tokens.
 */

/**
 * Implements hook_token_info().
 *
 * {@inheritdoc}
 */
function dvg_authentication_tokens_token_info() {
  $type = array(
    'name' => t('DvG Authentication'),
    'description' => t('Tokens related to externally authenticated user data.'),
  );
  $tokens = [
    'provider' => [
      'name' => t('Provider'),
      'description' => t('The name of the external authentication method for the logged-in user.'),
    ],
    'provider_level' => [
      'name' => t('Provider level'),
      'description' => t('The level of external authentication for the logged-in user.'),
    ],
    'identifier' => [
      'name' => t('Identifier'),
      'description' => t('The @field of the logged-in user.', ['@field' => t('Identifier')]),
    ],
    'first_name' => [
      'name' => t('First name'),
      'description' => t('The @field of the logged-in user.', ['@field' => t('First name')]),
    ],
    'name_infix' => [
      'name' => t('Infix'),
      'description' => t('The @field of the logged-in user.', ['@field' => t('Infix')]),
    ],
    'last_name' => [
      'name' => t('Last name'),
      'description' => t('The @field of the logged-in user.', ['@field' => t('Last name')]),
    ],
    'full_name' => [
      'name' => t('Full name'),
      'description' => t('Combination of %first_name, %infix and %last_name of the logged-in user.', [
        '%first_name' => t('First name'),
        '%infix' => t('Infix'),
        '%last_name' => t('Last name'),
      ]),
    ],
    'date_of_birth' => [
      'name' => t('Birthday'),
      'description' => t('The @field of the logged-in user.', ['@field' => t('Birthday')]),
    ],
    // The following tokens are provider-specific tokens, not all providers
    // return values for these tokens. Some of these tokens can be provided
    // by more than one AuthenticationProvider.
    'bsn' => [
      'name' => t('BSN'),
      'description' => t('The @field of the logged in user', ['@field' => t('burgerservicenummer')]) . ' ' . t('(Provider: %provider)', [
        '%provider' => implode(', ', [
          t('DigiD'),
          t('eIDAS'),
        ]),
      ]),
    ],
    'kvk_number' => [
      'name' => t('KvK number'),
      'description' => t('The @field of the logged-in user.', ['@field' => t('KvK number')]) . ' ' . t('(Provider: %provider)', ['%provider' => t('eHerkenning')]),
    ],
    'kvk_department_number' => [
      'name' => t('KvK Department number'),
      'description' => t('The @field of the logged-in user.', ['@field' => t('KvK Department number')]) . ' ' . t('(Provider: %provider)', ['%provider' => t('eHerkenning')]),
    ],
  ];

  return [
    'types' => ['dvg_auth' => $type],
    'tokens' => ['dvg_auth' => $tokens],
  ];
}

/**
 * Implements hook_tokens().
 *
 * {@inheritdoc}
 */
function dvg_authentication_tokens_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];
  if ($type === 'dvg_auth') {
    foreach ($tokens as $name => $original) {
      $replacements[$original] = dvg_authentication_get_external_user_value($name);
    }
  }
  return $replacements;
}

/**
 * Implements hook_webform_component_render_alter().
 */
function dvg_authentication_tokens_webform_component_render_alter(&$element, &$component) {
  // If a textfield or BSN field has a token as default value and the token has
  // a value, disable the field to prevent users from altering the field value.
  // @Todo: This could be made more generic for any token on webform components in a seperate module.
  if (!empty($component['value']) &&
    in_array($element['#type'], ['textfield', 'bsn'])) {
    // Check if there are any dvg_auth tokens set.
    $tokens = token_scan($component['value']);
    if (!empty($tokens['dvg_auth']) &&
      !empty(token_replace($component['value'], [], ['clear' => TRUE]))
    ) {
      $element['#disabled'] = TRUE;
    }
  }
}
