<?php

/**
 * @file
 * Provides tools for the servicedesk related to authentication.
 */

use Drupal\dvg_authentication\AuthenticationManager;

include_once 'includes/dvg_authentication_servicedesk.dvg.user_permission.inc';

/**
 * Implements hook_permission().
 *
 * {@inheritdoc}
 */
function dvg_authentication_servicedesk_permission() {
  return [
    'authentication servicedesk' => [
      'title' => t('Access servicedesk tools'),
      'description' => t('Gives users access to servicedesk tools, like entering a custom BSN for prefilling forms.'),
      'restrict access' => TRUE,
      'warning' => t('Gives access to privacy sensitive information about citizens.'),
    ],
  ];
}

/**
 * Implements hook_dvg_authentication_selection_alternatives().
 *
 * {@inheritdoc}
 */
function dvg_authentication_servicedesk_dvg_authentication_selection_alternatives() {
  $alternatives = [
    'authentication servicedesk' => 'dvg_authentication_servicedesk_manual_auth',
  ];
  return $alternatives;
}

/**
 * Callback for hook_dvg_authentication_selection_alternatives().
 *
 * Give servicedesk the tools for manual authentication.
 *
 * @param array $build
 *   A renderable array representing the node content of a webform.
 */
function dvg_authentication_servicedesk_manual_auth(array &$build) {
  if (!empty($_GET['reset'])) {
    // Reset manual auth.
    unset($_GET['reset'], $_GET['skip_auth'], $_GET['destination']);
    $_SESSION['servicedesk'] = [];
    drupal_goto(current_path());
  }
  // Show manual auth form if:
  if (
    // Skip auth is not set.
    empty($_GET['skip_auth']) &&
    (
      // A BSN is not set, or the bsn is set for a different form.
      empty($_SESSION['servicedesk']['bsn']) ||
      (
        !empty($_SESSION['servicedesk']['last_auth_path']) &&
        $_SESSION['servicedesk']['last_auth_path'] !== current_path()
      )
    )
  ) {
    // Display manual auth form.
    $build['webform']['#enabled'] = FALSE;
    $build['servicedesk_authentication'] = _dvg_authentication_servicedesk_manual_auth_selection();
  }
  else {
    // Display manual auth info.
    $build['servicedesk_auth_info'] = _dvg_authentication_servicedesk_manual_auth_info();
  }
}

/**
 * Form submit callback for clearing the customer BSN after form completion.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form_state array.
 */
function dvg_authentication_servicedesk_cleanup_form_submit(array $form, array &$form_state) {
  if ($form_state['values']['details']['page_num'] == $form_state['values']['details']['page_count']) {
    $_SESSION['servicedesk'] = [];
  }
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}
 */
function dvg_authentication_servicedesk_form_alter(&$form, &$form_state, $form_id) {
  if (
    !empty($_SESSION['servicedesk']['bsn']) &&
    isset($form['#node']) &&
    AuthenticationManager::getInstance()->nodeHasAuthentication($form['#node'])
  ) {
    $form['#submit'][] = 'dvg_authentication_servicedesk_cleanup_form_submit';
  }
}

/**
 * Builds the manual auth selection screen.
 *
 * @return array
 *   Renderable array of the authentication selection screen.
 */
function _dvg_authentication_servicedesk_manual_auth_selection() {
  $link_options = [
    'attributes' => [
      'class' => [
        'btn',
        'btn__ext-auth',
      ],
      'rel' => 'nofollow',
    ],
    'query' => [
      'skip_auth' => 1,
    ],
  ];
  $manual_auth_form = drupal_get_form('dvg_authentication_servicedesk_manual_auth_form');
  // Remove required message that is not of any value to servicedesk users.
  unset($manual_auth_form['#prefix']);
  return [
    '#theme' => 'authentication_login_options',
    '#title' => t('Choose a prefill method:'),
    '#attributes' => [
      'class' => ['servicedesk-manual-auth-options'],
    ],
    '#children' => [
      'servicedesk_manual_auth_container' => [
        '#type' => 'container',
        '#attributes' => [
          'class' => ['ext-auth__wrapper'],
        ],
        'manual_auth_form' => $manual_auth_form,
      ],
      'servicedesk_skip_auth' => [
        '#type' => 'authentication_login_button',
        '#description' => t('Enter all fields manually without using prefill.'),
        '#link' => l(t('Skip prefill'), current_path(), $link_options),
      ],
    ],
  ];
}

/**
 * Builds the manual auth information.
 *
 * @return array
 *   Renderable array of the authentication information.
 */
function _dvg_authentication_servicedesk_manual_auth_info() {
  $customer_info = [
    'bsn' => $_SESSION['servicedesk']['bsn'] ?? FALSE,
    // @todo: Replace person name when prefill is available.
    'name' => '',
  ];
  // Show info for the currently active BSN, if any, and add a reset button.
  if ($customer_info['bsn']) {
    $identity = [];
    if (!empty($customer_info['name'])) {
      $identity[] = $customer_info['name'];
    }
    $bsn_text = t('BSN: !bsn', ['!bsn' => $customer_info['bsn']]);
    $identity[] = $identity ? "($bsn_text)" : $bsn_text;

    $message = t('You are currently filling in this form for !identity', ['!identity' => implode(' ', $identity)]);
  }
  else {
    $message = t('You are currently filling in this form manually.');
  }
  $info = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['servicedesk-auth-info'],
    ],
    'message' => [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['servicedesk-auth-info-txt', 'messages', 'warning'],
      ],
      '#children' => $message,
    ],
    'reset_button' => [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['servicedesk-auth-info-btn'],
      ],
      '#children' => l(t('Reset customer'), current_path(), ['query' => ['reset' => 1]]),
    ],
  ];

  return $info;
}

/**
 * Implements hook_form().
 *
 * {@inheritdoc}
 */
function dvg_authentication_servicedesk_manual_auth_form($form, &$form_state) {
  // The bsn textfield uses the value and validation callbacks
  // of the dvg_webform_components 'bsn' component.
  $form['bsn'] = [
    '#type' => 'textfield',
    '#title' => t('BSN'),
    '#required' => TRUE,
    '#description' => t('Please enter the BSN of the person you are submitting the form for.'),
    '#size' => 20,
    '#maxlength' => 20,
    '#value_callback' => 'dvg_webform_components_bsn_value',
    '#element_validate' => ['dvg_webform_components_bsn_validate'],
  ];

  $form['actions'] = [
    'submit' => [
      '#type' => 'submit',
      '#value' => t('BSN prefill'),
      '#attributes' => [
        'class' => ['btn'],
      ],
    ],
  ];

  return $form;
}

/**
 * Submit handler for the dvg_authentication_servicedesk_manual_auth_form.
 */
function dvg_authentication_servicedesk_manual_auth_form_submit($form, &$form_state) {
  // Set the bsn in the session.
  $_SESSION['servicedesk']['bsn'] = $form_state['values']['bsn'] ?? NULL;
  $_SESSION['servicedesk']['last_auth_path'] = current_path();
}

/**
 * Implements hook_node_load().
 *
 * {@inheritdoc}
 */
function dvg_authentication_servicedesk_node_load($nodes, $types) {
  if (in_array('webform', $types) && user_access('authentication servicedesk')) {
    global $user;
    // Add the servicedesk role to the allowed roles of webforms with
    // external authentication.
    $rid = array_search('servicedesk', $user->roles);
    foreach ($nodes as $node) {
      $authentication_manager = AuthenticationManager::getInstance();
      if ($authentication_manager->nodeHasAuthentication($node)) {
        $node->webform['roles'][] = $rid;
      }
    }
  }
}

/**
 * Implements hook_dvg_authentication_user_value_alter().
 *
 * {@inheritdoc}
 */
function dvg_authentication_servicedesk_dvg_authentication_user_value_alter(&$value, $field_name) {
  if (
    $field_name === 'bsn' &&
    !empty($_SESSION['servicedesk']['bsn']) &&
    user_access('authentication servicedesk')
  ) {
    $value = $_SESSION['servicedesk']['bsn'];
  }
}

/**
 * Implements hook_auto_logout_profiles_alter().
 *
 * {@inheritdoc}
 */
function dvg_authentication_servicedesk_auto_logout_profiles_alter(array &$profiles) {
  if (isset($profiles['role_servicedesk'])) {
    $profiles['role_servicedesk']['default_enabled'] = TRUE;
  }
}

/**
 * Implements hook_dvg_stuf_bg_allowed_prefill_roles_alter().
 *
 * {@inheritdoc}
 */
function dvg_authentication_servicedesk_dvg_stuf_bg_allowed_prefill_roles_alter(&$roles) {
  $roles['servicedesk'] = 'servicedesk';
}
