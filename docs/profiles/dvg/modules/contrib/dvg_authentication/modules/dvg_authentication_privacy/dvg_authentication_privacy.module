<?php

/**
 * @file
 * Contains hooks for DvG Authentication Privacy.
 */

use Drupal\dvg_authentication_privacy\Privacy;

module_load_include('inc', 'webform', 'includes/webform.submissions');

/**
 * Implements hook_menu().
 */
function dvg_authentication_privacy_menu() {
  $items = [];
  $items['admin/config/services/dvg-authentication/privacy'] = [
    'title' => 'Privacy',
    'description' => 'Administer Privacy settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['dvg_authentication_privacy_settings_form'],
    'access arguments' => ['access authentication administration pages'],
    'file' => 'includes/dvg_authentication_privacy.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];
  return $items;
}

/**
 * Implements hook_cron().
 */
function dvg_authentication_privacy_cron() {
  $privacy = new Privacy();
  $anonymous_user = drupal_anonymous_user();
  // Anonymize ip addresses webform submissions.
  $submission_submitted_before = strtotime('-' . $privacy->getConfig('anonymize_ip_address') . ' days');
  // Modify the IPs directly in the database, as we don't want to trigger
  // submission update hooks.
  db_update('webform_submissions')
    ->fields([
      'remote_addr' => $anonymous_user->hostname,
    ])
    ->condition(
      db_and()
        ->condition('submitted', $submission_submitted_before, '<')
        ->condition('remote_addr', $anonymous_user->hostname, '!=')
    )
    ->execute();

  // Anonymize ip addresses watchdog.
  $watchdog_log_before = strtotime('-' . $privacy->getConfig('anonymize_ip_address') . ' days');
  db_update('watchdog')
    ->fields([
      'hostname' => $anonymous_user->hostname,
    ])
    ->condition(
      db_and()
        ->condition('timestamp', $watchdog_log_before, '<')
        ->condition('hostname', $anonymous_user->hostname, '!='))
    ->execute();

  // Anonymize user data.
  $submission_submitted_before = strtotime('-' . $privacy->getConfig('anonymize_user_data') . ' days');
  db_update('webform_submissions')
    ->fields([
      'uid' => $anonymous_user->uid,
      'remote_addr' => $anonymous_user->hostname,
    ])
    ->condition(
      db_and()
        ->condition('submitted', $submission_submitted_before, '<')
        ->condition('uid', $anonymous_user->uid, '!=')
    )
    ->execute();

  // Remove user data.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->addTag('dvg_authentication_role_filter')
    ->addTag('dvg_authentication_test_user_filter')
    ->propertyOrderBy('created', 'ASC');
  $result = $query->execute();
  if (empty($result['user'])) {
    return;
  }
  $users = $result['user'];
  $user_created_before = strtotime('-' . $privacy->getConfig('save_user_data') . ' days');

  $delete_users = [];
  foreach ($users as $entityuser) {
    $user = user_load($entityuser->uid);
    if ($user->created < $user_created_before) {
      $delete_users[] = $entityuser->uid;
    }
  }
  if (!empty($delete_users)) {
    user_delete($delete_users);
  }
}
