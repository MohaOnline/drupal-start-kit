<?php

/**
 * @file
 * Function mapping for sites that don't have the new DvG Authentication module.
 *
 * Will be deprecated in a future stable release of DvG.
 */

use Drupal\dvg_authentication\AuthenticationManager;

/**
 * Remap legacy dvg_digid functions to the new dvg_authentication module.
 *
 * This is useful for sites where dvg itself is not patched yet,
 * but the new dvg_authentication module is already enabled.
 */
if (!module_exists('dvg_digid') && module_exists('dvg_authentication')) {

  /**
   * Creates a DigiD-login-button.
   */
  function _dvg_digid_digid_login_button() {
    $selection = AuthenticationManager::getInstance()->buildLoginSelection(['digid']);
    return drupal_render($selection);
  }

  /**
   * Check if the user is logged in with DigiD.
   */
  function _dvg_digid_logged_in($account) {
    return dvg_authentication_external_logged_in($account, ['digid']);
  }

  /**
   * If the user is fake logged in as a user with the DigiD role.
   */
  function _dvg_digid_fake_logged_in($account) {
    return dvg_authentication_external_logged_in($account, ['digid'], TRUE);
  }

  /**
   * Get the BSN from the $_SESSION object and disable the page cache.
   */
  function dvg_digid_get_bsn() {
    return dvg_authentication_get_external_user_value('bsn');
  }

  /**
   * Submit handler for webform_configure_form().
   */
  function dvg_digid_webform_configure_form_submit($form, $form_state) {
    dvg_authentication_webform_configure_form_submit($form, $form_state);
  }

  /**
   * Get the session id for digid.
   *
   * @return string
   *   The digid session id.
   */
  function dvg_authentication_digid_session_id() {
    return 'dvg_authentication_digid';
  }

}

/**
 * Remap legacy dvg_eherkenning functions to the new dvg_authentication module.
 *
 * This is useful for sites where dvg itself is not patched yet,
 * but the new dvg_authentication module is already enabled.
 */
if (!module_exists('dvg_eherkenning') && module_exists('dvg_authentication')) {

  /**
   * Check if the user is logged in with eHerkenning.
   */
  function _dvg_eherkenning_logged_in($account) {
    return dvg_authentication_external_logged_in($account, ['eherkenning']);
  }

  /**
   * If the user is fake logged in as a user with the eHerkenning role.
   */
  function _dvg_eherkenning_fake_logged_in($account) {
    return dvg_authentication_external_logged_in($account, ['eherkenning'], TRUE);
  }

  /**
   * Get the Vestigingsnummer from the session and disable the page cache.
   */
  function dvg_eherkenning_get_kvk_vestigings_nummer() {
    return dvg_authentication_get_external_user_value('vestigingsnummer');
  }

}

/**
 * Remap new dvg_authentication functions to the legacy dvg_digid module.
 *
 * This is used for sites that have the old dvg_digid module configured,
 * but have a newer version of ezdvg with the modules patched to the new
 * dvg_authentication module. The new callback functions are mapped to the
 * old dvg_digid module.
 */
if (!module_exists('dvg_authentication') && module_exists('dvg_digid')) {

  /**
   * {@inheritdoc}
   */
  function dvg_authentication_external_logged_in($account, array $allowed_providers, $debug_mode = FALSE) {

    // Mapping for DigiD.
    if (in_array('digid', $allowed_providers)) {
      if ($debug_mode) {
        return _dvg_digid_fake_logged_in($account);
      }
      return _dvg_digid_logged_in($account);
    }

    // Mapping for eHerkenning.
    if (in_array('eherkenning', $allowed_providers)) {
      if ($debug_mode) {
        return _dvg_eherkenning_fake_logged_in($account);
      }
      return _dvg_eherkenning_logged_in($account);
    }
    return FALSE;
  }

  /**
   * {@inheritdoc}
   */
  function dvg_authentication_get_external_user_value($fieldname) {
    switch ($fieldname) {
      case 'bsn':
        return dvg_digid_get_bsn();

      case 'kvk_vestigings_nummer':
        return dvg_eherkenning_get_kvk_vestigings_nummer();

      case 'kvk_nummer':
        return dvg_eherkenning_get_kvk_nummer();

      case 'kvk_subdossiernummer':
        // @todo: niet meer gebruiken?
        return dvg_eherkenning_get_kvk_subdossier_nummer();

      default:
        return NULL;
    }
  }

  /**
   * {@inheritdoc}
   */
  function dvg_authentication_node_authentication_provider_enabled($node, $provider_id) {
    $role = user_role_load_by_name($provider_id);
    if ($role && in_array($role->rid, $node->webform['roles'])) {
      return TRUE;
    }
    return FALSE;
  }

  /**
   * {@inheritdoc}
   */
  function dvg_authentication_webform_configure_form_submit($form, $form_state) {
    dvg_digid_webform_configure_form_submit($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  function dvg_authentication_authentication_select_block($module_name) {
    return _dvg_digid_digid_login_button();
  }

  /**
   * Get the session id for digid.
   *
   * @return string
   *   The digid session id.
   */
  function dvg_authentication_digid_session_id() {
    return 'dvg_digid';
  }

}

/**
 * Disable the deprecated authentication modules and enable dvg_authentication.
 *
 * Important: make sure DvG and DvG StUF BG are patched before updating!
 * Important: Don't forget to set an ezdvg update hook dependency before calling
 * this update hook in your sitemod. You need ezdvg update hook 7010.
 *
 * @see hook_update_dependencies()
 */
function dvg_authentication_tmp_mapping_enable_dvg_authentication() {

  // Only execute this function when it's called form cli,
  // because we do some nasty stuff here.
  if (!drupal_is_cli()) {
    throw new Exception('Update failed, use drush updb to run this function!');
  }
  $enable_modules = [
    'dvg_authentication',
    'dvg_authentication_auto_logout',
    'dvg_authentication_privacy',
    'dvg_authentication_service_catalog',
    'dvg_authentication_tokens',
    'dvg_authentication_tokens_legacy',
  ];

  $deprecated_modules = [
    'dvg_digid',
    'dvg_eherkenning',
    'dvg_digid_autologout',
    'dvg_autologout',
  ];
  // Loop through all modules, disable and uninstall them if present.
  foreach ($deprecated_modules as $module) {
    if (!module_exists($module)) {
      continue;
    }
    switch ($module) {
      case 'dvg_autologout':
        $autologout_settings = [
          'timeout' => variable_get('dvg_autologout_timeout', '900'),
          'max_session_time' => variable_get('dvg_autologout_max_session_time', '7200'),
          'inactivity_message' => variable_get('dvg_autologout_inactivity_message', 'You have been logged out due to inactivity.'),
          'redirect_url' => variable_get('dvg_autologout_redirect_url', 'user/login'),
          'use_watchdog' => variable_get('dvg_autologout_use_watchdog', 1),
        ];
        variable_set('dvg_authentication_auto_logout', $autologout_settings);
        break;

      case 'dvg_digid':
        $enable_modules[] = 'dvg_authentication_digid';

        // Migrate the old digid settings to the new module settings.
        $digid_settings = [
          'auth_source' => variable_get('dvg_digid_auth_source', 'dummy'),
          'logo' => variable_get('dvg_digid_logo'),
          'show_confirmation_page' => variable_get('dvg_digid_confirm', 0),
          'auto_logout' => [
            'timeout' => variable_get('dvg_digid_autologout_timeout', ''),
          ],
        ];
        _dvg_authentication_tmp_mapping_add_file_usage($digid_settings['logo'], 'digid');
        variable_set('dvg_authentication_digid', $digid_settings);
        break;

      case 'dvg_eherkenning':
        $enable_modules[] = 'dvg_authentication_eherkenning';
        $eherkenning_settings = [
          'logo' => variable_get('dvg_eherkenning_logo'),
          'show_confirmation_page' => variable_get('dvg_eherkenning_confirm', 0),
          'levels' => [],
          'version' => variable_get('dvg_eherkenning_version', '1.11'),
        ];
        _dvg_authentication_tmp_mapping_add_file_usage($eherkenning_settings['logo'], 'eherkenning');
        // Add settings for all levels.
        foreach (['1', '2', '2plus', '3'] as $level) {
          $eherkenning_settings['levels']['level_' . $level] = [
            'logo' => variable_get('dvg_eherkenning_logo_eh' . $level),
            'auth_source' => variable_get('dvg_eherkenning_auth_source_eh' . $level),
          ];
          // Prevent the images from disappearing.
          _dvg_authentication_tmp_mapping_add_file_usage($eherkenning_settings['level_' . $level]['logo'], 'eherkenning');
        }
        variable_set('dvg_authentication_eherkenning', $eherkenning_settings);
        break;
    }

    module_disable([$module]);
    drupal_uninstall_modules([$module]);
  }

  // Do dirty stuff to enable the new modules and add the current settings.
  // Because in the current PHP instance some functions from the now disabled
  // modules are already registered, which shouldn't exist for the new modules.
  $status = [];
  foreach ($enable_modules as $module) {
    exec('drush en ' . $module . ' -y', $status);
  }

  // Show the update messages.
  if ($status) {
    drupal_set_message(implode("\n", $status));
  }
}

/**
 * Helper function to update the file usage.
 *
 * To prevent files from disappearing on cron.
 *
 * @param int $fid
 *   The file id.
 * @param string $authentication_provider
 *   Identifier of the DvG Authentication Provider.
 */
function _dvg_authentication_tmp_mapping_add_file_usage($fid, $authentication_provider) {
  if (empty($fid)) {
    return;
  }
  if ($file = file_load($fid)) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'dvg_authentication', 'dvg_authentication_' . $authentication_provider, 0);
  }
}
