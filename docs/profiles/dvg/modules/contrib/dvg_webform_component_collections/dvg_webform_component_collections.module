<?php
/**
 * @file
 * Code for the dvg_webform_component_collections feature (content-type "webform_collection").
 * Also: provides reuse existing collections in webforms.
 */

include_once 'dvg_webform_component_collections.features.inc';
include_once 'dvg_webform_component_collections.user_permission.inc';

/**
 * Implements hook_theme().
 */
function dvg_webform_component_collections_theme() {
  return array(
    'webform_components_form_existing' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_form_formid_alter().
 */
function dvg_webform_component_collections_form_webform_components_form_alter(&$form, &$form_state) {

  $node = $form_state['build_info']['args'][0];

  if ($node->type === 'webform_collection') {
    return;
  }

  $form['existing'] = array(
    '#type' => 'container',
  );
  $form['existing']['collection_nid'] = array(
    '#type' => 'select',
    '#options' => _dvg_webform_component_collections_existing_field_option(),
    '#empty_option' => t('- Select an existing collection -'),
    '#weight' => 1,
  );

  $form['existing']['weight'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#delta' => count($node->webform['components']) > 10 ? count($node->webform['components']) : 10,
    '#attributes' => array('class' => array('webform-weight')),
  );

  $form['existing']['pid'] = array(
    '#type' => 'hidden',
    '#default_value' => (isset($_GET['cid']) && isset($node->webform['components'][$_GET['cid']])) ? $node->webform['components'][$_GET['cid']]['pid'] : 0,
    '#attributes' => array('class' => array('webform-pid')),
  );

  $form['existing']['add'] = array(
    '#type' => 'submit',
    '#value' => t('Add Existing Collection'),
    '#weight' => 1,
    '#submit' => array('dvg_webform_component_collections_form_submit'),
  );

  if (isset($_GET['cid']) && isset($node->webform['components'][$_GET['cid']])) {
    // Make the new component appear by default directly after the one that was
    // just added.
    $form['existing']['weight']['#default_value'] = $node->webform['components'][$_GET['cid']]['weight'] + 1;
    foreach (array_keys($node->webform['components']) as $cid) {
      // Adjust all later components also, to make sure none of them have the
      // same weight as the new component.
      if ($form['components'][$cid]['weight']['#default_value'] >= $form['existing']['weight']['#default_value']) {
        $form['components'][$cid]['weight']['#default_value']++;
      }
    }
  }
  else {
    // If no component was just added, the new component should appear by
    // default at the end of the list.
    $form['existing']['weight']['#default_value'] = count($node->webform['components']) + 1;
  }

  // Use drag and drop or just add to top?
  if (variable_get('dvg_webform_component_collections_drag_and_drop', TRUE)) {
    $form['#theme'] = array('webform_components_form_existing');
  }
  else {
    // No drag and drop, remove unnecessary fields.
    unset($form['existing']['weight'], $form['existing']['pid']);
  }
}

/**
 * Webform_add_existing_form_submit.
 */
function dvg_webform_component_collections_form_submit($form, &$form_state) {

  $node = $form_state['build_info']['args'][0];

  $webform_collection_nid = $form_state['values']['existing']['collection_nid'];

  if (variable_get('dvg_webform_component_collections_drag_and_drop', TRUE)) {
    $weight = $form_state['values']['existing']['weight'];
    $collection_pid = $form_state['values']['existing']['pid'];
  }
  else {
    $query = db_select('webform_component', 'wc');
    $query->addExpression('MIN(weight)', 'weight');
    $query->condition('nid', $node->nid);
    $weight = $query->execute()->fetchCol()[0];
    $collection_pid = 0;
  }

  $collection_node = node_load($webform_collection_nid);

  $collection_components = $collection_node->webform['components'];
  $collection_conditionals = $collection_node->webform['conditionals'];

  // Set weight such that the last added component is at the target position
  // in the component list (either the top or the drag and dropped position).
  $weight -= count($collection_components);

  // Holds mapping old cid -> new cid.
  $cid_mapping = array();

  if (is_array($collection_components)) {
    $pid = $collection_pid;
    foreach ($collection_components as $collection_component) {
      $new_component = $collection_component;
      $new_component['nid'] = $node->nid;
      $new_component['form_key'] = _dvg_webform_component_collections_ensure_unique_form_key($node->nid, $collection_component['form_key']);
      $new_component['weight'] = $weight;
      $new_component['pid'] = $pid;
      // webform_component_insert will figure it out!
      unset($new_component['cid']);
      $new_cid = webform_component_insert($new_component);
      $cid_mapping[$collection_component['cid']] = $new_cid;
      if ($new_component['type'] === 'fieldset') {
        $pid = $new_cid;
      }
      else {
        $pid = $collection_pid;
      }
      $weight++;
    }
  }

  module_load_include('inc', 'webform', 'includes/webform.conditionals');

  // Count existing collections.
  $existing_collection_count = count($node->webform['conditionals']);

  // Copy all conditionals to this nid but replace cids with new cids and nids.
  if (is_array($collection_conditionals)) {
    foreach ($collection_conditionals as $collection_conditional) {
      $collection_conditional['nid'] = $node->nid;
      $collection_conditional['rgid'] = $existing_collection_count;
      foreach ($collection_conditional['rules'] as $key => $val) {
        $collection_conditional['rules'][$key]['source'] = $cid_mapping[$collection_conditional['rules'][$key]['source']];
        $collection_conditional['rules'][$key]['nid'] = $node->nid;
        $collection_conditional['rules'][$key]['rgid'] = $existing_collection_count;
      }
      foreach ($collection_conditional['rules'] as $key => $val) {
        $collection_conditional['actions'][$key]['target'] = $cid_mapping[$collection_conditional['actions'][$key]['target']];
        $collection_conditional['actions'][$key]['nid'] = $node->nid;
        $collection_conditional['actions'][$key]['rgid'] = $existing_collection_count;
      }
      webform_conditional_insert($collection_conditional);
      $existing_collection_count++;
    }
  }

  $form_state['redirect'] = array(
    'node/' . $node->nid . '/webform',
    array()
  );
}

/**
 * Get webform_collection nids.
 *
 * @return array
 *   Existing Collections list.
 */
function _dvg_webform_component_collections_existing_field_option() {
  $components_list = db_select('node')
    ->fields('node', array('nid', 'title'))
    ->condition('type', 'webform_collection', '=')
    ->execute()->fetchAll();

  $components_list_options = array();
  foreach ($components_list as $component) {
    $components_list_options[$component->nid] = $component->title;
  }

  return $components_list_options;
}

/**
 * Make sure the form key is unique, or add an index to make it unique.
 *
 * @param int $nid
 *   The node for which the component is.
 * @param string $form_key
 *   The initial form_key for the component.
 *
 * @return string
 *   Either the initial form_key if it is already unique, or a modified version
 *   which is unique.
 */
function _dvg_webform_component_collections_ensure_unique_form_key($nid, $form_key) {
  $query = db_select('webform_component', 'wc');
  $query->addField('wc', 'form_key');
  $query->condition('nid', $nid);
  $query->condition('form_key', "$form_key%", 'LIKE');
  $result = $query->execute();
  if ($result->rowCount() !== 0) {
    $current_keys = $result->fetchCol();
    $initial_key = $form_key;
    $i = 0;
    do {
      $form_key = "${initial_key}_$i";
      $i++;
    } while (in_array($form_key, $current_keys, TRUE));
  }
  return $form_key;
}

/**
 * Preprocess variables for theming the webform components form. This code is largely taken from webform, we just add our own form element.
 */
function template_preprocess_webform_components_form_existing(&$variables) {
  $form = $variables['form'];

  $form['components']['#attached']['library'][] = array('webform', 'admin');

  drupal_add_tabledrag('webform-components', 'order', 'sibling', 'webform-weight');
  drupal_add_tabledrag('webform-components', 'match', 'parent', 'webform-pid', 'webform-pid', 'webform-cid');

  $node = $form['#node'];

  $header = array(t('Label'), t('Form key'), t('Type'), t('Value'), t('Required'), t('Weight'), array('data' => t('Operations'), 'colspan' => 3));
  $rows = array();

  // Add a row containing form elements for a new item.
  unset($form['add']['name']['#title'], $form['add_type']['#description']);
  $form['add']['name']['#attributes']['placeholder'] = t('New component name');
  $form['add']['cid']['#attributes']['class'][] = 'webform-cid';
  $form['add']['pid']['#attributes']['class'][] = 'webform-pid';
  $form['add']['weight']['#attributes']['class'][] = 'webform-weight';
  $row_data = array(
    array('data' => drupal_render($form['add']['name']), 'class' => array('webform-component-name')),
    array('data' => drupal_render($form['add']['type']), 'class' => array('webform-component-type')),
    array('data' => '', 'class' => array('webform-component-value')),
    array('data' => drupal_render($form['add']['required']), 'class' => array('webform-component-required', 'checkbox')),
    array('data' => drupal_render($form['add']['cid']) . drupal_render($form['add']['pid']) . drupal_render($form['add']['weight'])),
    array('colspan' => 3, 'data' => drupal_render($form['add']['add']), 'class' => array('webform-component-add')),
  );
  $add_form = array('data' => $row_data, 'class' => array('draggable', 'webform-add-form', 'tabledrag-leaf'));

  if (!empty($node->webform['components'])) {
    $component_tree = array();
    $page_count = 1;
    _webform_components_tree_build($node->webform['components'], $component_tree, 0, $page_count);
    $component_tree = _webform_components_tree_sort($component_tree);
    // Build the table rows recursively.
    foreach ($component_tree['children'] as $cid => $component) {
      _webform_components_form_rows($node, $cid, $component, 0, $form, $rows, $add_form);
    }
  }
  else {
    $rows[] = array(array('data' => t('No Components, add a component below.'), 'colspan' => 9));
  }

  // Append the add form if not already printed.
  if ($add_form) {
    $rows[] = $add_form;
  }

  $existing_row_data = array(
    drupal_render($form['existing']['collection_nid']),
    '',
    '',
    '',
    drupal_render($form['existing']['weight']) . drupal_render($form['existing']['pid']),
    array('colspan' => 3, 'data' => drupal_render($form['existing']['add'])),
  );
  $existing_form = array('data' => $existing_row_data, 'class' => array('draggable', 'webform-add-form', 'tabledrag-leaf'));

  // Append the existing form if not already printed
  if ($existing_form) {
    $rows[] = $existing_form;
  }

  $variables['rows'] = $rows;
  $variables['header'] = $header;
  $variables['form'] = $form;
}

/**
 * Theme the node components form. Use a table to organize the components.
 *
 * @return
 *   Formatted HTML form, ready for display.
 */
function theme_webform_components_form_existing($variables) {
  $output = '';
  $output .= theme('table',
    array(
      'header' => $variables['header'],
      'rows' => $variables['rows'],
      'attributes' => array('id' => 'webform-components')
    )
  );

  $output .= drupal_render_children($variables['form']);
  return $output;
}

/**
 * Adding a custom access callback to remove some of the menu tabs in webform collection.
 */
function dvg_webform_component_collections_menu_alter(&$items) {
  $items['node/%webform_menu/webform/configure']['access callback'] = '_dvg_webform_component_collections_accesscheck';
  $items['node/%webform_menu/webform/emails']['access callback'] = '_dvg_webform_component_collections_accesscheck';
  $items['node/%webform_menu/webform-results']['access callback'] = '_dvg_webform_component_collections_accesscheck';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function dvg_webform_component_collections_form_webform_admin_settings_alter(&$form, &$form_state, $form_id) {
  // Add option if webform collections should allow drag and dropping a
  // collection in an existing webform or if it should just always put the new
  // components at the top of the existing form.
  $description = t('When enabled collection components are added to an existing webform using drag and drop. When disabled the new components are always added to the top of the webform.');
  $form['advanced']['dvg_webform_component_collections_drag_and_drop'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add webform collection using drag and drop?'),
    '#description' => $description,
    '#default_value' => variable_get('dvg_webform_component_collections_drag_and_drop', TRUE),
  );
}

/**
 * Custom access callback
 */
function _dvg_webform_component_collections_accesscheck($node) {
  if ($node->type == 'webform_collection') {
    return FALSE;
  } else {
    return webform_node_update_access($node);
  }
}

/**
 * Prevent these nodes to be displayed for anyone unless you have permission.
 */
function dvg_webform_component_collections_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'webform_collection' && !user_access('edit webform components')) {
    drupal_access_denied();
  }
}

/**
 * Hide nodes of type 'webform_collection' in the standard webform admin overview page.
 *
 * Implements hook_views_pre_build().
 */
function dvg_webform_component_collections_views_pre_view(&$view) {
  if ($view->name == 'webform_webforms') {
    $filter = $view->display_handler->get_option('filters');
    $filters['type'] = array(
      'id' => 'type',
      'table'=> 'node',
      'field'=> 'type',
      'relationship' => 'nid',
      'group_type' => 'group',
      'ui_name' => '',
      'operator' => 'in',
      'value'   => array(
        'webform' => 'webform',
      ),
      'group' => '1',
      'exposed' => FALSE,
      'is_grouped' => FALSE
    );
    $view->display_handler->set_option('filters', $filters);
  }
}
