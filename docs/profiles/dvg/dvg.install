<?php
/**
 * @file
 * Install, update and uninstall functions for the Drupal Voor Gemeenten installation profile.
 */

/**
 * Implements hook_install().
 *
 * @see system_install()
 */
function dvg_install() {
}

/**
 * Implements hook_install_tasks().
 */
function dvg_install_tasks(&$install_state) {

  // Remove any status messages that might have been set. They are unneeded.
  drupal_get_messages('status', TRUE);

  $tasks = array();
  $current_task = variable_get('install_task', 'done');
  $install_demo_content = variable_get('dvg_demo_content', FALSE);

  $tasks['dvg_configure_form'] = array(
    'display_name' => st('Optional features'),
    'type' => 'form',
  );
  $tasks['dvg_install_additional_modules'] = array(
    'display_name' => st('Install additional modules'),
    'type' => 'batch',
    'display' => strpos($current_task, 'dvg_') !== FALSE,
  );
  $tasks['dvg_install_translations'] = array(
    'display_name' => st('Update translations'),
    'type' => 'batch',
    'display' => $install_state['parameters']['locale'] != 'en',
  );
  $tasks['dvg_install_demo_content'] = array(
    'display_name' => st('Import demo content'),
    'type' => 'batch',
    'display' => $install_demo_content,
  );

  return $tasks;
}

/**
 * Implements hook_install_tasks_alter().
 */
function dvg_install_tasks_alter(&$tasks, $install_state) {
  $tasks['install_finished']['function'] = 'dvg_install_finished';
  $tasks['install_select_locale']['display'] = FALSE;
  $tasks['install_profile_modules']['display_name'] = st('Install');

  unset(
    $tasks['install_select_profile'],
    $tasks['install_import_locales'],
    $tasks['install_import_locales_remaining']
  );

  // The "Welcome" screen needs to come after the first two steps
  // (profile and language selection), despite the fact that they are disabled.
  $new_task['dvg_install_welcome'] = array(
    'display' => TRUE,
    'display_name' => st('Welcome'),
    'type' => 'form',
    'run' => isset($install_state['parameters']['welcome']) ? INSTALL_TASK_SKIP : INSTALL_TASK_RUN_IF_REACHED,
  );
  $old_tasks = $tasks;
  $tasks = array_slice($old_tasks, 0, 2) + $new_task + array_slice($old_tasks, 2);

  // Set the installation theme.
  _dvg_set_theme('dvg');
}

/**
 * Force-set a theme at any point during the execution of the request.
 *
 * Drupal doesn't give us the option to set the theme during the installation
 * process and forces enable the maintenance theme too early in the request
 * for us to modify it in a clean way.
 */
function _dvg_set_theme($target_theme) {
  if ($GLOBALS['theme'] != $target_theme) {
    unset($GLOBALS['theme']);

    drupal_static_reset();
    $GLOBALS['conf']['maintenance_theme'] = $target_theme;
    _drupal_maintenance_theme();
  }
}

/**
 * Task callback: shows the welcome screen.
 */
function dvg_install_welcome($form, &$form_state, &$install_state) {
  drupal_set_title(st('Drupal voor Gemeenten'));
  $message = '<p>' . st('DVG is the <em>"Drupal voor Gemeenten"</em> distribution developed specifically for Dutch municipalities. DVG is built around the top tasks model, putting easy and efficient online services front and center.') . '</p>';
  $details = '<p>' . st('DVG contains features and functionality specifically needed for Dutch local governments. For example:') . '</p>';
  $items = array();
  $items[] = st('Webrichtlijnen V2 compliant');
  //$items[] = st('DigiD V4 authentication');
  $items[] = st('Samenwerkende Catalogi XML feed');
  $items[] = st('Appointments interface');
  $items[] = st('Q-matic Suite 3 & 4 integration');
  $items[] = st('Q-matic Orchestra 5 integration');
  $items[] = st('JCC G-BOS integration');
  $details .= theme('item_list', array('items' => $items));

  $form = array();
  $form['welcome_message'] = array(
    '#markup' => $message,
  );
  $form['eula'] = array(
    '#prefix' => '<div id="eula-installation-welcome">',
    '#markup' => $details,
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );

  $query = drupal_get_query_parameters();
  $query['locale'] = ($query['locale'] == 'nl') ? 'en' : 'nl';
  $other_language = ($_GET['locale'] == 'nl') ? st('English') : st('Dutch');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st("Install Drupal voor Gemeenten"),
    '#weight' => 10,
    '#suffix' => '<div><a href="' . check_url(drupal_current_script_url($query)) . '">' . st('Install DVG in @language', array(
      '@language' => $other_language,
    )) . '</a></div>',
  );
  return $form;
}

function dvg_install_welcome_submit($form, &$form_state) {
  global $install_state;
  $install_state['parameters']['welcome'] = 'done';
}

/**
 * Task callback: returns the form allowing the user to add example content content on install.
 */
function dvg_configure_form() {
  include_once DRUPAL_ROOT . '/includes/iso.inc';

  drupal_set_title(st('Configure Drupal voor Gemeenten'));

  // Prepare all the options for sample content.
  $options = array(
    '1' => st('Yes'),
    '0' => st('No'),
  );
  $form['functionality'] = array(
    '#type' => 'fieldset',
    '#title' => st('Functionality'),
  );
  $form['functionality']['install_demo_content'] = array(
    '#type' => 'radios',
    '#title' => st('Do you want to install the demo content?'),
    '#description' => st('This installs all DVG features.'),
    '#options' => $options,
    '#default_value' => '1',
  );

  $options_selection = array(
    //'digid' => st('DigiD'),
    'tasks' => st('Tasks'),
    'spatial_plan' => st('Spatial plans'),
    'product_catalog' => st('Samenwerkende Catalogi XML feed'),
    'news' => st('News'),
    'town_council' => st('Town council'),
    'datab' => st('Data B integration'),
  );
  $form['functionality']['extras'] = array(
    '#type' => 'checkboxes',
    '#options' => $options_selection,
    '#title' => st("Install additional functionality"),
    '#description' => st("!product_catalog depends on Tasks.", array(
      '!product_catalog' => st('Samenwerkende Catalogi XML feed'),
    )),
    '#states' => array(
      'visible' => array(
        ':input[name="install_demo_content"]' => array('value' => '0'),
      ),
    ),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Save and continue'),
    '#weight' => 15,
  );
  return $form;
}

/**
 * Submit callback: creates the requested sample content.
 */
function dvg_configure_form_submit(&$form, &$form_state) {
  variable_set('dvg_demo_content', $form_state['values']['install_demo_content']);
  variable_set('dvg_selected_extras', $form_state['values']['extras']);
}

/**
 * Task callback: uses Batch API to import modules based on user selection.
 * Installs all demo store modules if requested, or any modules providing
 * additional functionality to the base install.
 *
 * Any modules providing custom blocks should be enabled here, and not before
 * (as an install profile dependency), because the themes are setup during
 * dvg_install(), which means region assignment can only happen
 * after that.
 */
function dvg_install_additional_modules() {
  $install_demo_content = variable_get('dvg_demo_content', FALSE);

  $extra_modules = array(
    //'digid' => array('dvg_digid'),
    'tasks' => array('dvg_ct_task'),
    'spatial_plan' => array('dvg_ct_plan'),
    'product_catalog' => array('product_catalog'),
    'news' => array('dvg_ct_news'),
    'town_council' => array('dvg_town_council'),
    'datab' => array('dvg_datab'),
  );

  $modules = array(
    'dvg_global',
    'dvg_admin_views',
    'dvg_ct_basicpage',
    'dvg_ct_menu_page',
    'dvg_ct_block',
    'dvg_ct_guide',
    'dvg_ct_general_text',
    'dvg_dashboard',
    'dvg_file_category_type',
    'dvg_media_file_types',
    'dvg_password_policy',
    'dvg_roles_and_permissions',
    'dvg_search_settings',
    'dvg_search_view',
    'dvg_topical',
    'dvg_wysiwyg',
    'dvg_ct_webform',
    'dvg_ct_external_link',
  );

  if ($install_demo_content) {

    // Add all modules from the extra modules.
    foreach ($extra_modules as $index => $extra) {
      $modules = array_merge($modules, $extra);
    }

    $modules[] = 'menu_import';
    $modules[] = 'node_export';
    $modules[] = 'node_export_dependency';
  }
  else {
    $selected_extras = array_filter(variable_get('dvg_selected_extras', array()));
    foreach ($selected_extras as $selected_extra) {
      $modules = array_merge($modules, $extra_modules[$selected_extra]);
    }
  }

  // Resolve the dependencies now, so that module_enable() doesn't need
  // to do it later for each individual module (which kills performance).
  $files = system_rebuild_module_data();
  $modules_sorted = array();
  foreach ($modules as $module) {
    if ($files[$module]->requires) {
      // Create a list of dependencies that haven't been installed yet.
      $dependencies = array_keys($files[$module]->requires);
      $dependencies = array_filter($dependencies, '_dvg_filter_dependencies');
      // Add them to the module list.
      $modules = array_merge($modules, $dependencies);
    }
  }
  $modules = array_unique($modules);
  foreach ($modules as $module) {
    $modules_sorted[$module] = $files[$module]->sort;
  }
  arsort($modules_sorted);

  // Set default operations.
  $operations = array();
  $operations[] = array('_dvg_install_file_system', array(st('Fix filesystem settings')));
  $operations[] = array('_dvg_install_set_default_settings', array(st('Set default DVG settings')));
  $operations[] = array('_dvg_install_enable_dvg_theme', array(st('Install the default DVG theme')));
  $operations[] = array('_dvg_install_disable_file_types', array(st('Disable the default file types')));

  // Enable the selected modules.
  foreach ($modules_sorted as $module => $weight) {
    $operations[] = array('_dvg_enable_module', array($module, $files[$module]->info['name']));
  }

  // Operations after all modules are enabled.
  $operations[] = array('_dvg_install_revert_all_features', array(st('Revert all features'))); // @todo: this should not be needed?
  $operations[] = array('_dvg_install_permissions', array(st('Set user permissions')));

  $batch = array(
    'title' => st('Installing additional modules'),
    'operations' => $operations,
    'file' => drupal_get_path('profile', 'dvg') . '/dvg.install_callbacks.inc',
  );

  return $batch;
}

/**
 * Task callback.
 */
function dvg_install_demo_content() {
  if (!variable_get('dvg_demo_content', FALSE)) {
    return;
  }

  module_load_include('inc', 'node_export', 'formats/drupal');
  $nodes = node_export_drupal_import(file_get_contents(__DIR__ . '/demo-content/nodes.txt'));

  $operations = array();
  foreach ($nodes as $node) {
    $operations[] = array('_dvg_import_node', array($node));
  }

  foreach (array(
    'menu-about',
    'menu-dashboard-menu',
    'menu-footer-menu',
    'menu-organization',
    'menu-social-media-menu',
    'menu-tasks',
  ) as $menu) {
    $operations[] = array('_dvg_menu_import_file', array($menu, ));
  }

  $operations[] = array('_dvg_install_save_datab_demo_content', array());
  $operations[] = array('_dvg_install_save_taxonomies_demo_content', array());
  $operations[] = array('_dvg_install_save_custom_texts_demo_content', array());
  $operations[] = array('_dvg_install_set_40x', array());

  // Uninstall temporary modules.
  $operations[] = array('_dvg_uninstall_module', array('node_export_dependency'));
  $operations[] = array('_dvg_uninstall_module', array('node_export'));
  $operations[] = array('_dvg_uninstall_module', array('menu_import'));

  $batch = array(
    'title' => st('Importing demo content'),
    'operations' => $operations,
    'file' => drupal_get_path('profile', 'dvg') . '/dvg.install_callbacks.inc',
  );

  return $batch;
}

/**
 * array_filter() callback used to filter out already installed dependencies.
 */
function _dvg_filter_dependencies($dependency) {
  return !module_exists($dependency);
}

/**
 * Custom installation task; perform final steps and redirect the user to the new site if there are no errors.
 *
 * @param $install_state
 *   An array of information about the current installation state.
 *
 * @return
 *   A message informing the user about errors if there was some.
 */
function dvg_install_finished(&$install_state) {
  $install_demo_content = variable_get('dvg_demo_content', FALSE);
  drupal_set_title(st('@drupal installation complete', array('@drupal' => drupal_install_profile_distribution_name())), PASS_THROUGH);
  $messages = drupal_set_message();

  // Remember the profile which was used.
  variable_set('install_profile', drupal_get_profile());
  variable_set('install_task', 'done');

  // Flush all caches to ensure that any full bootstraps during the installer
  // do not leave stale cached data, and that any content types or other items
  // registered by the install profile are registered correctly.
  drupal_flush_all_caches();

  // Install profiles are always loaded last
  db_update('system')
    ->fields(array('weight' => 1000))
    ->condition('type', 'module')
    ->condition('name', drupal_get_profile())
    ->execute();

  // Cache a fully-built schema.
  drupal_get_schema(NULL, TRUE);

  // Run cron to populate update status tables (if available) so that users
  // will be warned if they've installed an out of date Drupal version.
  // Will also trigger indexing of profile-supplied content or feeds.
  drupal_cron_run();

  if (isset($messages['error'])) {
    $output = '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';
    return $output;
  }
  else {
    // Since any module can add a drupal_set_message, this can bug the user
    // when we redirect him to the front page. For a better user experience,
    // remove all the message that are only "notifications" message.
    drupal_get_messages('status', TRUE);
    drupal_get_messages('completed', TRUE);
    if (!drupal_is_cli()) {
      drupal_set_message(st('Installation complete'));

      if ($install_demo_content) {
        $ids = entity_get_id_by_uuid('node', array('79b143a1-c3af-47ff-8e85-5acd1498d3fb'));
        $nid = reset($ids);
        drupal_goto('node/' . $nid);
      }
      else {
        drupal_goto('<front>');
      }
    }
  }
}

/**
 * Installation step callback.
 *
 * @see l10n_install_import_translation().
 */
function dvg_install_translations(&$install_state) {
  // Enable installation language as default site language.
  include_once DRUPAL_ROOT . '/includes/locale.inc';
  $install_locale = $install_state['parameters']['locale'];
  locale_add_language($install_locale, NULL, NULL, NULL, '', NULL, 1, TRUE);

  // Fetch and batch the translations!
  module_load_include('fetch.inc', 'l10n_update');
  $options = _l10n_update_default_update_options();
  $last_checked = variable_get('l10n_update_last_check');
  if ($last_checked < REQUEST_TIME - L10N_UPDATE_STATUS_TTL) {
    l10n_update_clear_status();
    $batch = l10n_update_batch_update_build(array(), array($install_locale), $options);
  }
  else {
    $batch = l10n_update_batch_fetch_build(array(), array($install_locale), $options);
  }
  return $batch;
}
