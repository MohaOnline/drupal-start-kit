<?php

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'efq_extra_field') . '/efq_extra_field.module';

/**
 * Compare file return pair of suspected duplicate files (images).
 */
function media_unique_get_suspect_dupes_return_json() {
  if (!module_exists('file_entity')) {
    return;
  }
  $file_entity_id = 0;
  $replacements = array('!file_entity_id' => $file_entity_id);
  $err_msg1 = 'Some error. : ';
  $err_msg2 = 'MEDIA UNIQUE error, we do not want to delete: ';
  watchdog('media_unique', $err_msg1 . '!file_entityfolder ' . $err_msg2 . '!file_entityfolder', $replacements, WATCHDOG_ERROR);
  drupal_set_message(t($err_msg1 . ' @var ' . $err_msg2 . ' @var2', array('@var' => $file_entity_id,'@var2' => $file_entity_id)),'error',TRUE);

}


/**
 * Implements hook_menu().
 */
function media_unique_menu() {
  // For managing media unique settings.
  $items['admin/config/media/media_unique'] = array(
    'title' => 'Media Unique settings',
    'description' => 'Configure the behavior of Media Unique.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_unique_configuration'),
    'access arguments' => array('administer media unique'),
    'file' => 'includes/unique.admin.inc',
  );
  $items['media-unique'] = array(
    'page callback' => 'media_unique_page',
    'description' => 'Media Unique ui',
    'access callback' => 'user_access',
    'access arguments' => array('access media unique'),
    'theme callback' => 'variable_get',
    'theme arguments' => array('admin_theme'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['media-unique/batch'] = array(
    'page callback' => 'media_unique_batch_page',
    'description' => 'Media Unique ui for batch processing',
    'access callback' => 'user_access',
    'access arguments' => array('access media unique'),
    'theme callback' => 'variable_get',
    'theme arguments' => array('admin_theme'),
    'file' => 'includes/unique.batch.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}


/**
 * Implements hook_theme().
 */
function media_unique_theme($existing, $type, $theme, $path) {
  return array(
    'media_unique' => array(
      'template' => 'media_unique',
      'path' => $path . '/templates',
    ),
    'media_unique_batch' => array(
      'template' => 'media_unique_batch',
      'path' => $path . '/templates',
    ),
  );
}


function __public_or_private($uri) {
  // Handle public:// or private:// .
  $file_path = '';
  $drupal_root = DRUPAL_ROOT . '/';
  if (strpos($uri, 'public') === FALSE) {
    $file_private_path = variable_get('file_private_path') . '/';
    $file_path = str_replace('private://', $drupal_root . $file_private_path , $uri);
  } else {
    $file_public_path = variable_get('file_public_path') . '/';
    $file_path = str_replace('public://', $drupal_root . $file_public_path , $uri);
  }
  return $file_path;
}


function __set_sha1_hash_fid_array($fid_array, $test, &$context = array()) {
  foreach ($fid_array as $fid) {
    __set_sha1_hash($fid);
  }
}


function __set_sha1_hash($fid) {
  $file = file_load($fid);
  $uri = $file->uri;
  // Handle public:// or private:// .
  $file_path = __public_or_private($uri);
  $bundle = variable_get('media_unique_bundle_to_process', 'image');
  if ($bundle == 'video') {
    // @TODO instead of bundle check, do a filesize check set a threshold.
    $sha1 = sha1_file($file_path); // Slower but better for large files.
  } else {
    $sha1 = sha1(file_get_contents($file_path)); // Faster.
  }
  if (!isset($sha1) || strlen($sha1) == 0) {
    if ($bundle == 'video') {
      // @TODO instead of bundle check, do a filesize check set a threshold.
      $sha1 = sha1_file($file_path); // Slower but better for large files.
    } else {
      $sha1 = sha1(file_get_contents($file_path)); // Faster.
    }
    if (!isset($sha1)) {
      $replacements = array(
       '!fid' => $fid,
       '!file_path' => $file_path
      );
      watchdog('media_unique', 'Hash is empty for !fid at !file_path', $replacements, WATCHDOG_ERROR);
    }
  }
  $queryEntityId = db_query('SELECT entity_id FROM {media_unique} where entity_id = :entity_id', array(':entity_id' => $fid));
  $resultEntityId = $queryEntityId->fetchColumn(0);
  if (isset($resultEntityId) && $resultEntityId == $fid) {
    // db_update.
    $update_ok = db_update('media_unique')
      ->fields(array(
      'sha1' => $sha1,
    ))
    ->condition('entity_id', $fid, '=')
    ->execute();

  } else {
    $insert_ok = db_insert('media_unique')
      ->fields(array(
      'entity_id' => $fid,
      'sha1' => $sha1,
    ))
    ->execute();
  }

}


/**
 * Implements the media_unique page rendering.
 */
function media_unique_page() {
  if (!user_access('access media unique')) {
    drupal_set_message(t('You do not have access to media unique, check your permissions, contact the administrator.', FALSE, 'error', TRUE));
    drupal_goto('<front>');
  } else {
    drupal_goto('media-unique/batch');
  }
}


/**
 * Implements hook_permission().
 */
function media_unique_permission() {
  return array(
    'administer media unique' => array(
      'title' => t('Administer media unique'),
      'description' => t('Access media unique settings.'),
    ),
    'access media unique' => array(
      'title' => t('Use media unique'),
      'description' => t('Process files for duplicates, only elevated roles should be able to use this because this performs file delete.'),
    ),
  );
}

