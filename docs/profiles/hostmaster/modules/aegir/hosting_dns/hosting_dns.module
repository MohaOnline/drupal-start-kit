<?php
/**
 * @file
 * Manage DNS records for your hosted sites.
 */

// TODO: These could be moved to the repective modules, or need to be altered to use hook names related to this module.
// Include the hooks for other modules.
require_once __DIR__ . '/modules/hosting_alias.inc';
require_once __DIR__ . '/modules/hosting_site.inc';

/**
 * Implements hook_menu().
 */
function hosting_dns_menu() {
  $items['admin/hosting/dns'] = array(
    'title' => 'DNS',
    'description' => 'Configure DNS settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_dns_settings'),
    'access arguments' => array('administer hosting dns'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'hosting_dns.form.inc',
  );

  $items['node/%node/dns'] = array(
    'title' => 'DNS',
    'description' => 'Configure DNS settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_dns_manage_records', 1),
    'access callback' => 'hosting_dns_menu_access_callback',
    'access arguments' => array(1, 'site', 'administer hosting dns'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'hosting_dns.form.inc',
    'weight' => 1,
  );

  $items['node/%node/dns/default'] = array(
    'title callback' => 'hosting_dns_menu_title_callback',
    'title arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // TODO: Below is depending on a cache clear before subtabs show up and has quite some overhead. This has to implemented in another way.
  // Load aliases if the hosting_alias module is enabled.
  if (module_exists('hosting_alias')) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'site')
      ->addMetaData('account', user_load(1))
      ->execute();

    if (isset($result['node'])) {
      $site_node_keys = array_keys($result['node']);
      $sites = entity_load('node', $site_node_keys, array(), TRUE);

      foreach ($sites as $nid => $site) {

        $domains = hosting_alias_get_aliases($site);

        foreach ($domains as $domain) {
          $items['node/%node/dns/' . $domain] = array(
            'title' => $domain,
            'description' => 'Configure DNS settings',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('hosting_dns_manage_records', 1, 3),
            'access callback' => 'hosting_dns_menu_access_callback',
            'access arguments' => array(1, 'site', 'administer hosting dns', $site),
            'type' => MENU_LOCAL_TASK,
            'file' => 'hosting_dns.form.inc'
          );
        }
      }
    }
  }
  return $items;
}

/**
 * Helper function for obtaining the title of a given site or alias.
 *
 * @param $site
 * @param $alias
 *
 * @return mixed
 */
function hosting_dns_menu_title_callback($site, $alias = NULL) {
  if ($alias) {
    return $site->aliases[$alias];
  }
  return $site->title;
}

/**
 * Make sure the user is allowed access to the DNS settings for a certain site.
 *
 * @param $node
 * @param $type
 * @param $permission
 * @param $site
 *
 * @return bool TRUE if access granted, FALSE otherwise
 */
function hosting_dns_menu_access_callback($node, $type, $permission, $site = NULL) {
  if ($site) {
    if ($site != $node) {
      return FALSE;
    }
  }

  if ($node->type == $type && user_access($permission)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function hosting_dns_permission() {
  return array(
    'administer hosting dns' => array(
      'title' => t('Administer hosting DNS settings'),
    ),
    'create dns-deploy task' => array(
      'title' => t('Create dns-deploy task'),
    ),
  );
}

/**
 * Implements hook_hosting_service_type().
 */
function hosting_dns_hosting_service_type() {
  return array(
    'dns' => array(
      'title' => t('DNS')
    )
  );
}

/**
 * Implements hook_hosting_service().
 */
function hosting_dns_hosting_service() {
  return array(
    'dnsmasq' => 'dns',
    'bind' => 'dns',
    'bind_slave' => 'dns',
  );
}

/**
 * Implements hook_hosting_tasks().
 */
function hosting_dns_hosting_tasks() {
  $tasks = array();

  $tasks['site']['dns-deploy'] = array(
    'title' => t('Deploy DNS zone(s)'),
    'description' => t('Deploys the DNS zone of this site.'),
    'provision_save' => TRUE, // Makes sure we always have the latest db records available in provision.
  );

  return $tasks;
}

/**
 * Callback for DNS Deploy action.
 *
 * @see: hosting_task_action_info().
 */
function hosting_site_dns_deploy_action($node) {
  hosting_add_task($node->nid, 'dns-deploy');
}

/**
 * Implements hook_entity_property_info_alter().
 */
function hosting_dns_entity_property_info_alter(&$info) {
  $dns_properties = &$info['node']['bundles']['site']['properties'];

  // Add a DNS zone property to sites.
  $dns_properties['dns_zone'] = array(
    'label' => t('DNS Zone'),
    'description' => t('The DNS records associated with this site.'),
    'type' => 'node',
    'bundle' => 'dns_record',
  );
}

/**
 * Implements hook_node_load().
 *
 * Attaches the dns records to the site nodes.
 */
function hosting_dns_node_load($nodes, $types) {
  // Decide whether any of $types are relevant to our purposes.
  if (count(array_intersect(array('site'), $types))) {
    foreach ($nodes as $nid => $node) {
      $nodes[$nid]->dns_records = hosting_dns_get_dns_records($node);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function hosting_dns_node_insert($node) {
  if ($node->type == 'site') {
    hosting_dns_save($node);
  }
}

/**
 * Implements hook_node_update().
 */
function hosting_dns_node_update($node) {
  if ($node->type == 'site') {
    hosting_dns_save($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function hosting_dns_node_delete($node) {
  if ($node->type == 'site') {
    hosting_dns_delete($node);
  }
}

/**
 * Implements hook_node_revision_delete().
 */
function hosting_dns_node_revision_delete($node) {
  if ($node->type == 'site') {
    hosting_dns_delete_revision($node);
  }
}

/**
 * Saves the DNS part of a node after creation or update.
 *
 * @see hosting_dns_node_insert()
 * @see hosting_dns_node_update()
 *
 * @param Object $node
 *   The site node.
 */
function hosting_dns_save($node) {
  if (isset($node->dns_records)) {
    foreach ($node->dns_records as $domain => $record) {
      db_merge('hosting_dns_records')
        ->key(array(
          'vid' => $node->vid,
          'nid' => $node->nid,
          'domain' => $domain,
        ))
        ->fields(array(
          'vid' => $node->vid,
          'nid' => $node->nid,
          'domain' => $domain,
          'dns_zone' => serialize($record),
        ))
        ->updateFields(array(
          'dns_zone' => serialize($record),
        ))
        ->execute();
    }
  }
}

/**
 * Remove the stored DNS records for and existing site.
 *
 * @param Object $node
 *   The site node.
 */
function hosting_dns_delete($node) {
  db_delete('hosting_dns_records')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Remove the stored DNS records for and existing site for a specific version.
 *
 * @param Object $node
 *   The site node.
 */
function hosting_dns_delete_revision($node) {
  db_delete('hosting_dns_records')
    ->condition('nid', $node->nid)
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Helper for returning the supported TTL options.
 *
 * @return array
 *   List of ttl options.
 */
function _hosting_dns_ttl_options() {
  return array(
    60 => t('1 Min'),
    300 => t('5 Min'),
    3600 => t('1 Hour'),
    86400 => t('1 Day'),
  );
}

/**
 * Helper for returning the supported DNS record types.
 *
 * @return array
 *   List of available DNS record types.
 */
function _hosting_dns_type_options() {
  return drupal_map_assoc(array(
    'A',
    'AAAA',
    'CNAME',
    'MX',
    'NS',
    'TXT',
    'SRV',
    'SSHFP',
    'TLSA',
  ));
}

/**
 * Function for returning DNS entries for a certain site.
 *
 * @param Object $site
 *   A fully loaded node of the site type.
 *
 * @return array
 *   Array of DNS records, keyed by domain.
 */
function hosting_dns_get_dns_records($site) {
  $query = db_select('hosting_dns_records', 'h')
    ->fields('h', array('domain', 'dns_zone'))
    ->condition('nid', $site->nid)
    ->condition('vid', $site->vid)
    ->execute();

  // Fetch the zones in a an array keyed by domain.
  $records = $query->fetchAllKeyed();

  // This makes no sense. Why does the db layer automatically serialize, but not unserialize.
  foreach ($records as &$val) {
    $val = unserialize($val);
  }

  // Use default values ony if it does not yet exists (DNS can be deliberately empty).
  if (!isset($records[$site->title])) {
    $records[$site->title] = hosting_dns_merge_default_records($site, $site->title);
  }

  // Check also for any aliases.
  if (module_exists('hosting_alias')) {
    $domains = hosting_alias_get_aliases($site);
    // Use default values ony if it does not yet exists (DNS can be deliberately empty).
    foreach ($domains as $domain) {
      if (!isset($records[$domain])) {
        $records[$domain] = hosting_dns_merge_default_records($site, $domain);
      }
    }
  }

  // Allow other modules to change the records.
  drupal_alter('hosting_dns_records', $records, $site);

  return $records;
}

/**
 * Merge the hooks records with custom user records. The latter overwrites the first.
 *
 * @param object $site
 *   The site node.
 * @param string $domain
 *  The specific domain.
 *
 * @return array
 *   The merged array of DNS records, keyed by domain.
 */
function hosting_dns_merge_default_records($site, $domain) {
  $user_defaults = variable_get('hosting_dns_default_dns_records', array());
  $hooks_defaults =_hosting_dns_obtain_default_records($site, $domain);

  $defaults = array_replace_recursive($hooks_defaults, $user_defaults);

  // Collapse.
  module_load_include('inc', 'hosting_dns', 'hosting_dns.form');
  $defaults = hosting_dns_collapse_records($defaults);

  return $defaults;
}

/**
 * Function for returning the default DNS records for domains.
 *
 * @return array An array of records with the fields 'title', 'dns_ttl',
 * 'dns_type' and 'dns_value'.
 */
function _hosting_dns_obtain_default_records($site = NULL, $domain = NULL) {
  // Fetch the default records.
  $records = module_invoke_all('hosting_dns_default_records', $site, $domain);

  return $records;
}

/**
 * Implements hook_help().
 */
function hosting_dns_help($path, $arg) {
  switch ($path) {
    case 'admin/help#hosting_dns':
      return '<pre>' . file_get_contents(drupal_get_path('module', 'hosting_dns') . '/README.md') . '</pre>';
      break;
    case 'node/%/dns':
    case 'node/%/dns/%': // TODO: This does not appear to work.
      return 'Enter your DNS records, one per line. For TXT records, use no quotes.';
      break;
  }
}
