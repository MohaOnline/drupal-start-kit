<?php

/**
 * @file
 * Define install, update and uninstall functions.
 */

use \Drupal\campaignion_newsletters\NewsletterList;
use \Drupal\campaignion_newsletters\ProviderFactory;
use \Drupal\campaignion_newsletters\QueueItem;

/**
 * Implements hook_uninstall().
 */
function campaignion_newsletters_mailchimp_uninstall() {
  variable_del(array(
    'mailchimp_api_keys',
    'campaignion_newsletters_mailchimp_register_webhooks',
  ));
}

/**
 * Migrate old queue items to the new API version.
 */
function campaignion_newsletters_mailchimp_update_1() {
  menu_rebuild();

  $factory = ProviderFactory::getInstance();
  $lists = [];
  foreach ($factory->providers() as $source) {
    if (substr($source, 0, 10) == 'MailChimp-') {
      $provider = $factory->providerByKey($source);
      foreach ($provider->getLists() as $list) {
        $list->save();
        $lists[$list->list_id] = $list;
      }
    }
  }

  $last_id = 0;
  $sql = "SELECT id FROM {campaignion_newsletters_lists} INNER JOIN {campaignion_newsletters_queue} USING(list_id) WHERE source LIKE 'MailChimp-%' AND id>:last_id ORDER BY id LIMIT 100";

  while ($ids = db_query($sql, [':last_id' => $last_id])->fetchCol()) {
    foreach ($ids as $id) {
      $item = QueueItem::byId($id);
      $data = $item->data;
      $new_data = [];

      if (isset($data['groupings'])) {
        $map = array_flip($lists[$item->list_id]->data->groups);
        foreach ($data['groupings'] as $grouping) {
          foreach ($grouping['groups'] as $name) {
            if (isset($map[$name])) {
              $new_data['interests'][$map[$name]] = TRUE;
            }
          }
        }
        unset($data['groupings']);
      }
      $new_data['merge_fields'] = $data;
      $item->data = $new_data;
      $item->save();
      $last_id = $item->id;
    }
  }
}
